<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="https://feeds.transistor.fm/stylesheet.xsl" type="text/xsl"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom/" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:googleplay="http://www.google.com/schemas/play-podcasts/1.0" xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd">
  <channel>
    <atom:link rel="self" type="application/atom+xml" href="https://feeds.transistor.fm/empowerapps-show" title="MP3 Audio"/>
    <atom:link rel="hub" href="https://pubsubhubbub.appspot.com/"/>
    <title>Empower Apps</title>
    <generator>Transistor (https://transistor.fm)</generator>
    <itunes:new-feed-url>https://feeds.transistor.fm/empowerapps-show</itunes:new-feed-url>
    <description>An exploration of Apple business news and technology. We talk about how businesses can use new technology to empower their business and employees, from Leo Dion, founder of BrightDigit.</description>
    <copyright>© Bright Digit, LLC 2018</copyright>
    <language>en</language>
    <pubDate>Sun, 03 Nov 2019 00:00:00 -0400</pubDate>
    <lastBuildDate>Mon, 04 Nov 2019 00:00:25 -0500</lastBuildDate>
    <link>https://www.empowerapps.show</link>
    <image>
      <url>https://images.transistor.fm/file/transistor/images/show/122/full_1533929410-artwork.jpg</url>
      <title>Empower Apps</title>
      <link>https://www.empowerapps.show</link>
    </image>
    <itunes:category text="Business"/>
    <itunes:category text="Technology"/>
    <googleplay:author>Leo Dion, Principal CEO and Swift Developer at BrightDigit </googleplay:author>
    <googleplay:image href="https://images.transistor.fm/file/transistor/images/show/122/full_1533929410-artwork.jpg"/>
    <googleplay:summary>An exploration of Apple business news and technology. We talk about how businesses can use new technology to empower their business and employees, from Leo Dion, founder of BrightDigit.</googleplay:summary>
    <googleplay:explicit>No</googleplay:explicit>
    <googleplay:block>No</googleplay:block>
    <itunes:type>episodic</itunes:type>
    <itunes:author>Leo Dion, Principal CEO and Swift Developer at BrightDigit </itunes:author>
    <itunes:image href="https://images.transistor.fm/file/transistor/images/show/122/full_1533929410-artwork.jpg"/>
    <itunes:summary>An exploration of Apple business news and technology. We talk about how businesses can use new technology to empower their business and employees, from Leo Dion, founder of BrightDigit.</itunes:summary>
    <itunes:subtitle>An exploration of Apple business news and technology.</itunes:subtitle>
    <itunes:keywords>technology, apple, business, iPhone, Mac, osx, macOS, iPad, Apple Watch</itunes:keywords>
    <itunes:owner>
      <itunes:name>Leo Dion, Principal CEO and Swift Developer at BrightDigit </itunes:name>
      <itunes:email>leogdion@brightdigit.com</itunes:email>
    </itunes:owner>
    <itunes:complete>No</itunes:complete>
    <itunes:explicit>No</itunes:explicit>
    <itunes:block>No</itunes:block>
    <item>
      <title>Media Outreach with Jeff Gamet</title>
      <itunes:episode>27</itunes:episode>
      <itunes:title>Media Outreach with Jeff Gamet</itunes:title>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:block>No</itunes:block>
      <googleplay:block>No</googleplay:block>
      <guid isPermaLink="false">05cdaa44-766a-464c-873a-8143a4578a9b</guid>
      <link>https://share.transistor.fm/s/b0bd852d</link>
      <description>In this episode we talk with Jeff Gamet from Smile about how to get how to get your message to media, bloggers, and podcasters about your app.</description>
      <content:encoded>
        <![CDATA[<h1>Guest</h1><ul><li> Jeff Gamet - <a href="https://textexpander.com">Text Expander</a> Evangelist <ul>
<li>
<a href="https://textexpander.com">TextExpander</a> -<a href="https://twitter.com/textexpander"> @textexpander</a>
</li>
<li>Twitter <a href="https://twitter.com/jgamet">@jgamet</a>
</li>
<li>Instagram <a href="https://www.instagram.com/jgamet/">@jgamet</a>
</li>
</ul>
</li></ul><h1>Related Episodes</h1><ul><li><a href="https://share.transistor.fm/s/15b7ff63"><strong>Episode 26 - App Search Optimization with Ariel Mitcheli</strong></a></li></ul><h1>Sponsors</h1><a href="https://brightdigit.com/"><strong>BrightDigit</strong></a><ul>
<li>Specialize in helping businesses build apps for iPhone, iPad, Mac and Apple Watch</li>
<li>10 years of experience developing for a variety of Apple platform</li>
<li>Helping dev shops which lack experience with Apple platforms and Swift</li>
</ul><a href="https://brightdigit.com/contact/"><strong>Contact me if you need help today.</strong></a><br><strong>We have an opening for sponsors</strong><ul><li>Do you have a product or service which can target our ever growing community of developers as well as technology and business leaders? </li></ul><a href="https://brightdigit.com/contact/">Contact me today if you are interested in sponsoring</a> or <a href="https://www.patreon.com/empowerappsshow">go to our Patreon page.</a><h1>Importance of Reaching the Press</h1><ul>
<li>
<strong>Clear messaging</strong> prevents uncertainty and ambiguity</li>
<li>Pay attention and <strong>communicate with users</strong>
</li>
<li>Get insight from the users by <strong>scheduling calls</strong>
</li>
<li>
<strong>Cater your messaging</strong> to your audience</li>
<li>Using PR Services (ex. <a href="https://www.prlog.org">PRLog</a>) are helpful but <strong>personal relationships are important</strong>
</li>
</ul><h1>Going to the Right Audience</h1><ul>
<li>Based on the target device (Android vs iOS) and industry, <strong>pitch to right journalists</strong>
</li>
<li>
<strong>Talk to developers</strong> who have done apps in that space</li>
<li>Make sure the <strong>press release service aligns with your app</strong>
</li>
</ul><h1>The Email - Important Components </h1><ul>
<li>
<strong>What is it</strong> - Software, Hardware, etc...</li>
<li>
<strong>What does it do</strong> - Email Client, Music Player, iPhone Case, etc...</li>
<li>
<strong>Who is it for</strong> - for the iPhone, for the Apple Watch, for Windows PCs, etc...</li>
<li>
<strong>Why should I care</strong>/What makes it special/What need does it fill<ul><li>Email Client - AI based Spam Filter for Administrative Assistant</li></ul>
</li>
</ul><h1>The Email - Subject Line Mistakes </h1><ul>
<li>Ambiguous or Unclear Subject Line</li>
<li>Being Too Clever</li>
<li>Pretending Like You're <em>Looping Back</em>
</li>
<li>Timing is Important</li>
<li>Keeping It Fresh</li>
<li>When to Actually Follow-Up</li>
</ul><h1>How to build a Media Kit</h1><ul>
<li>
<strong>High Resolution Screenshots</strong> - PNG or JPEG</li>
<li>
<strong>Logos</strong> - SVG and PNG or JPEG</li>
<li>
<strong>Product Information</strong> - PDF - <em>not Microsoft Word</em>
</li>
<li>
<strong>Reviewers Guide</strong><ul>
<li><strong>Walkthrough Documentation</strong></li>
<li>
<strong>FAQ</strong> - Addresses questions the media will have</li>
<li>
<strong>Required Files or Info</strong> - Example Files, Logins, etc...</li>
</ul>
</li>
<li>
<strong>Contact Info</strong> - email address, social media, home page</li>
<li>
<strong>Videos</strong> <em>optional - </em>Youtube Link (for in-use) or GIF (for screenshots) </li>
</ul><h1>How Can Companies Integrate the Messaging Early On</h1><ul>
<li>Think About the Messaging Early In the Development Process</li>
<li>Think About How It's Presented As It's Developed</li>
<li>
<a href="http://momtestbook.com"><strong>Mom Test</strong></a><strong> </strong>- Rope In Friends and Family</li>
<li>Look at <a href="https://textexpander.com/press/"><strong>Other PR Pages such as TextExpander's</strong></a>
</li>
<li>Live Stream or Schedule Live Presentations Usage of the App</li>
<li>Using the Press for Recruiting Beta Testing</li>
</ul><h1>Social Media</h1><a href="https://twitter.com/brightdigit">Twitter - @brightdigit</a><a href="http://facebook.com/brightdigit">Facebook - BrightDigit</a><a href="https://www.linkedin.com/company/bright-digit">LinkedIn - BrightDigit</a><a href="https://www.instagram.com/brightdigit/">Instagram - @brightdigit</a><br><a href="https://www.patreon.com/empowerappsshow">Patreon - empowerappshow</a><br><p><strong><a rel="payment" title="★ Support this podcast on Patreon ★" href="https://www.patreon.com/empowerappsshow">★ Support this podcast on Patreon ★</a></strong></p>]]>
      </content:encoded>
      <pubDate>Sun, 03 Nov 2019 00:00:00 -0400</pubDate>
      <author>Leo Dion, Principal CEO and Swift Developer at BrightDigit </author>
      <enclosure url="https://chtbl.com/track/51E5/media.transistor.fm/17b3b144.mp3" length="41070234" type="audio/mpeg"/>
      <itunes:author>Leo Dion, Principal CEO and Swift Developer at BrightDigit </itunes:author>
      <itunes:image href="https://images.transistor.fm/file/transistor/images/show/122/full_1533929410-artwork.jpg"/>
      <itunes:duration>2565</itunes:duration>
      <itunes:summary>In this episode we talk with Jeff Gamet from Smile about how to get how to get your message to media, bloggers, and podcasters about your app.</itunes:summary>
      <itunes:subtitle>In this episode we talk with Jeff Gamet from Smile about how to get how to get your message to media, bloggers, and podcasters about your app.</itunes:subtitle>
      <itunes:keywords>technology, apple, business, iPhone, Mac, osx, macOS, iPad, Apple Watch</itunes:keywords>
      <itunes:explicit>No</itunes:explicit>
      <googleplay:explicit>No</googleplay:explicit>
    </item>
    <item>
      <title>App Store Optimization with Ariel Michaeli</title>
      <itunes:episode>26</itunes:episode>
      <itunes:title>App Store Optimization with Ariel Michaeli</itunes:title>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:block>No</itunes:block>
      <googleplay:block>No</googleplay:block>
      <guid isPermaLink="false">e05b467a-57b5-45a6-b26a-0f403d3dc055</guid>
      <link>https://share.transistor.fm/s/15b7ff63</link>
      <description>In this episode we talk with Ariel Michaeli of App Figures about integrating App Store Optimization with the marketing and development process of building an app.</description>
      <content:encoded>
        <![CDATA[<h1>Guest</h1><ul><li> <a href="https://arielmichaeli.com"><strong>Ariel Michaeli</strong></a><strong>  - </strong><a href="https://twitter.com/arielmichaeli"><strong>Twitter @arielmichaeli</strong></a><ul>
<li>
<a href="https://appfigures.com"><strong>AppFigures</strong></a> - <a href="https://twitter.com/appfigures">Twitter @appfigures</a>
</li>
<li><a href="https://www.youtube.com/watch?v=8qd_13dKz4Q"><strong>360idev 2019 - App Store Optimization for the Rest of Us</strong></a></li>
<li>
<strong>AppFigures Guides</strong><ul>
<li><a href="https://appfigures.com/resources/aso/app-store-optimization-checklist"><strong>AppFigures App Store Optimization Checklist</strong></a></li>
<li><a href="https://appfigures.com/resources/aso/app-name-optimization"><strong>How to Optimize Your Keywords List in App Store Connect</strong></a></li>
<li><a href="https://appfigures.com/resources/aso/app-name-optimization"><strong>Optimizing Your App’s Name to Get More Downloads</strong></a></li>
<li><a href="https://appfigures.com/resources/aso/which-keywords-to-optimize-for"><strong>How to Choose the Right Keywords for App Store Optimization</strong></a></li>
</ul>
</li>
</ul>
</li></ul><h1>Sponsors</h1><a href="https://brightdigit.com/"><strong>BrightDigit</strong></a><ul>
<li>Specialize in helping businesses build apps for iPhone, iPad, Mac and Apple Watch</li>
<li>10 years of experience developing for a variety of Apple platform</li>
<li>Helping dev shops which lack experience with Apple platforms and Swift</li>
</ul><a href="https://brightdigit.com/contact/"><strong>Contact me if you need help today.</strong></a><br><strong>We have an opening for sponsors</strong><ul><li>Do you have a product or service which can target our ever growing community of developers as well as technology and business leaders? </li></ul><a href="https://brightdigit.com/contact/">Contact me today if you are interested in sponsoring</a> or <a href="https://www.patreon.com/empowerappsshow">go to our Patreon page.</a><h1>App Store Optimization Basics</h1><ul>
<li>The Importance of Marketing</li>
<li>Why not depend on Today, Category, or Featured by Apple</li>
<li>How it helps established business as well as startups</li>
<li>
<strong>60% of downloads</strong> are directly from the App Store</li>
<li>You only have <strong>20 seconds</strong> to capture your audience</li>
<li><a href="https://appfigures.com/resources/aso/app-store-optimization-checklist"><strong>AppFigures App Store Optimization Checklist</strong></a></li>
</ul><h1>Key Differences between SEO and ASO</h1><ul>
<li>Backwards Engineering the Play Store/App Store vs. Google</li>
<li>ASO is restricted by the fields and parameters Apple or Google Play Store provides</li>
<li>People Search for Solutions on Google vs People Search for <strong>Apps </strong>on the App Store</li>
</ul><h1>What are the Components For Successful ASO?</h1><ul>
<li>
<strong>Research</strong> for Correct Keywords </li>
<li>Apply <strong>Keywords</strong> based on Solutions the App Provides<ul>
<li><a href="https://appfigures.com/resources/keyword-optimization-app-store-connect">Breakdown Keywords</a></li>
<li>Use the Correct Title and Subtitle Correctly</li>
<li>Title and Subtitle in the Apple App Store Are Rendered As One Sentence</li>
<li><a href="https://appfigures.com/resources/aso/app-name-optimization"><strong>How to Optimize Your Keywords List in App Store Connect</strong></a></li>
<li><a href="https://appfigures.com/resources/aso/app-name-optimization"><strong>Optimizing Your App’s Name to Get More Downloads</strong></a></li>
<li><a href="https://appfigures.com/resources/aso/which-keywords-to-optimize-for"><strong>How to Choose the Right Keywords for App Store Optimization</strong></a></li>
</ul>
</li>
<li>Make <strong>Visuals</strong> Compelling Which Encourage Downloads<ul>
<li>Videos Are Very Helpful</li>
<li>Give Your Screenshots Context and Use the Design of the App Page<ul><li><a href="https://apps.apple.com/us/app/jump-by-uber/id1251322970"><strong>User Jump</strong></a></li></ul>
</li>
</ul>
</li>
<li>
<strong>Monitoring</strong> Keywords and Algorithm Changes</li>
<li>
<strong>Experiment</strong> with Emulated App Store Pages and A/B Testing</li>
</ul><h1>What are Common Mistakes For Successful ASO?</h1><ul>
<li>
<strong>Don't </strong>Optimize for Competitor Name</li>
<li>
<strong>Don't </strong>Leave Your App Page Alone But Constantly Monitor</li>
<li>
<strong>Don't </strong>Optimize for Only Your Competitor </li>
</ul><h1>Apple Watch App Store and <a href="https://heartwitch.app">Heartwitch App</a> Feedback</h1><ul>
<li>Understand Your Audience</li>
<li>Use Branding with Browser Window</li>
<li>Selling on the Apple Watch Store Makes the App Unique</li>
<li>Ask Apple to Feature</li>
<li>Reach Out To The Community</li>
</ul><h1>Social Media</h1><a href="https://twitter.com/brightdigit">Twitter - @brightdigit</a><a href="http://facebook.com/brightdigit">Facebook - BrightDigit</a><a href="https://www.linkedin.com/company/bright-digit">LinkedIn - BrightDigit</a><a href="https://www.instagram.com/brightdigit/">Instagram - @brightdigit</a><br><a href="https://www.patreon.com/empowerappsshow">Patreon - empowerappshow</a><br><br><br><br><br><p><strong><a rel="payment" title="★ Support this podcast on Patreon ★" href="https://www.patreon.com/empowerappsshow">★ Support this podcast on Patreon ★</a></strong></p>]]>
      </content:encoded>
      <pubDate>Sun, 27 Oct 2019 00:00:00 -0400</pubDate>
      <author>Leo Dion, Principal CEO and Swift Developer at BrightDigit </author>
      <enclosure url="https://chtbl.com/track/51E5/media.transistor.fm/ab74d3e7.mp3" length="44215861" type="audio/mpeg"/>
      <itunes:author>Leo Dion, Principal CEO and Swift Developer at BrightDigit </itunes:author>
      <itunes:image href="https://images.transistor.fm/file/transistor/images/show/122/full_1533929410-artwork.jpg"/>
      <itunes:duration>2761</itunes:duration>
      <itunes:summary>In this episode we talk with Ariel Michaeli of App Figures about integrating App Store Optimization with the marketing and development process of building an app.</itunes:summary>
      <itunes:subtitle>In this episode we talk with Ariel Michaeli of App Figures about integrating App Store Optimization with the marketing and development process of building an app.</itunes:subtitle>
      <itunes:keywords>technology, apple, business, iPhone, Mac, osx, macOS, iPad, Apple Watch</itunes:keywords>
      <itunes:explicit>No</itunes:explicit>
      <googleplay:explicit>No</googleplay:explicit>
    </item>
    <item>
      <title>Hiring an iOS Developer with John Knox</title>
      <itunes:episode>25</itunes:episode>
      <itunes:title>Hiring an iOS Developer with John Knox</itunes:title>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:block>No</itunes:block>
      <googleplay:block>No</googleplay:block>
      <guid isPermaLink="false">6187fb4b-e6ba-432f-8e1c-fb6a466d5ab8</guid>
      <link>https://share.transistor.fm/s/382a5473</link>
      <description>In this episode we talk with John Knox about Business of Software conference, hiring an iOS developer, and getting hired as an iOS developer.</description>
      <content:encoded>
        <![CDATA[<h1>Guest</h1><ul><li> <a href="https://pyrus.io/"><strong>J</strong></a><strong>ohn Knox  - </strong><a href="https://twitter.com/windaddict"><strong>Twitter @windaddict</strong></a><strong> - </strong><a href="https://www.linkedin.com/in/johnmpknox/"><strong>LinkedIn</strong></a><ul><li>
<a href="https://www.hireappdeveloper.org"><strong>Hiring An App Developer</strong></a> - <a href="https://twitter.com/hireanappdev">Twitter @hireanappdev</a>
</li></ul>
</li></ul><h1>Previous Episodes</h1><a href="https://share.transistor.fm/s/bcf9bb21"><strong>Episode 12 - iOS Developer Interviews with Alex Bush</strong></a><h1>Sponsors</h1><a href="https://brightdigit.com/"><strong>BrightDigit</strong></a><ul>
<li>Specialize in helping businesses build apps for iPhone, iPad, Mac and Apple Watch</li>
<li>10 years of experience developing for a variety of Apple platform</li>
<li>Helping dev shops which lack experience with Apple platforms and Swift</li>
</ul><a href="https://brightdigit.com/contact/"><strong>Contact me if you need help today.</strong></a><br><strong>We have an opening for sponsors</strong><ul><li>Do you have a product or service which can target our ever growing community of developers as well as technology and business leaders? </li></ul><a href="https://brightdigit.com/contact/">Contact me today if you are interested in sponsoring</a> or <a href="https://www.patreon.com/empowerappsshow">go to our Patreon page.</a><h1>
<a href="https://businessofsoftware.org">Business of Software</a> Highlights</h1><ul>
<li><a href="https://businessofsoftware.org/speaker/matt-wensing/">Matt Wensing on Forecasting</a></li>
<li><a href="https://1se.co">One Second Everyday </a></li>
</ul><h1>iOS Hiring Challenges</h1><ul>
<li>Lack of Experience and Understand of iOS Development</li>
<li>
<em>Cargo Cult </em>Interview Style (and Burying Dead Bodies😱?)</li>
<li>Lack of Training Resources for Employees</li>
<li>Not Oppurtunities for Growth </li>
<li>Lack of Organization Skills in HR/Recruiting</li>
</ul><h1>Getting Hired</h1><ul>
<li>Dealing with HR Automation</li>
<li>Finding the Right Person at the Company?</li>
<li>LinkedIn vs Twitter</li>
</ul><h1>What Companies Should Look For?</h1><ul>
<li>How John Does Coding Challenges</li>
<li>Finding Coding Style</li>
<li>Have Little to No Complex Dependencies</li>
<li>Seeing Actual Experience </li>
</ul><h1>Social Media</h1><a href="https://twitter.com/brightdigit">Twitter - @brightdigit</a><a href="http://facebook.com/brightdigit">Facebook - BrightDigit</a><a href="https://www.linkedin.com/company/bright-digit">LinkedIn - BrightDigit</a><a href="https://www.instagram.com/brightdigit/">Instagram - @brightdigit</a><br><a href="https://www.patreon.com/empowerappsshow">Patreon - empowerappshow</a><br><br><br><br><p><strong><a rel="payment" title="★ Support this podcast on Patreon ★" href="https://www.patreon.com/empowerappsshow">★ Support this podcast on Patreon ★</a></strong></p>]]>
      </content:encoded>
      <pubDate>Sun, 20 Oct 2019 00:00:00 -0400</pubDate>
      <author>Leo Dion, Principal CEO and Swift Developer at BrightDigit </author>
      <enclosure url="https://chtbl.com/track/51E5/media.transistor.fm/239f4b40.mp3" length="32452240" type="audio/mpeg"/>
      <itunes:author>Leo Dion, Principal CEO and Swift Developer at BrightDigit </itunes:author>
      <itunes:image href="https://images.transistor.fm/file/transistor/images/show/122/full_1533929410-artwork.jpg"/>
      <itunes:duration>2026</itunes:duration>
      <itunes:summary>In this episode we talk with John Knox about Business of Software conference, hiring an iOS developer, and getting hired as an iOS developer.</itunes:summary>
      <itunes:subtitle>In this episode we talk with John Knox about Business of Software conference, hiring an iOS developer, and getting hired as an iOS developer.</itunes:subtitle>
      <itunes:keywords>technology, apple, business, iPhone, Mac, osx, macOS, iPad, Apple Watch</itunes:keywords>
      <itunes:explicit>No</itunes:explicit>
      <googleplay:explicit>No</googleplay:explicit>
    </item>
    <item>
      <title>Continuous Integration with Kyle Newsome</title>
      <itunes:episode>24</itunes:episode>
      <itunes:title>Continuous Integration with Kyle Newsome</itunes:title>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:block>No</itunes:block>
      <googleplay:block>No</googleplay:block>
      <guid isPermaLink="false">92853b76-d484-4c2e-aca4-1150decc8fa9</guid>
      <link>https://share.transistor.fm/s/a14f868f</link>
      <description>In this episode we talk with Kyle Newsome about continuous integration with iOS and other Apple platforms development.</description>
      <content:encoded>
        <![CDATA[<h1>Guest</h1><ul><li> <a href="https://pyrus.io"><strong>Kyle Newsome</strong></a><strong> - (</strong><a href="https://twitter.com/kylnew"><strong>Twitter @kylnew</strong></a><strong>)</strong><ul><li>
<a href="https://vimeo.com/showcase/6225806/video/354783100">Continuous Integration - What, Why &amp; How feat. Bitrise</a> - SwiftTO</li></ul>
</li></ul><h1>Sponsors</h1><a href="https://brightdigit.com/"><strong>BrightDigit</strong></a><ul>
<li>Specialize in helping businesses build apps for iPhone, iPad, Mac and Apple Watch</li>
<li>10 years of experience developing for a variety of Apple platform</li>
<li>Helping dev shops which lack experience with Apple platforms and Swift</li>
</ul><a href="https://brightdigit.com/contact/"><strong>Contact me if you need help today.</strong></a><br><strong>We have an opening for sponsors</strong><ul><li>Do you have a product or service which can target our ever growing community of developers as well as technology and business leaders? </li></ul><a href="https://brightdigit.com/contact/">Contact me today if you are interested in sponsoring</a> or <a href="https://www.patreon.com/empowerappsshow">go to our Patreon page.</a><h1>New iPhone 11 Thoughts</h1><ul>
<li>Camera Improvements</li>
<li>Max vs Not-Max Size</li>
<li>DSL vs iPhone</li>
<li>Night Mode</li>
</ul><h1>Continuous Integration Issues with iOS</h1><ul>
<li>Deployment Issues</li>
<li>Cache Issues</li>
<li>Continuous Integration 101</li>
</ul><h1>How to Get Started</h1><ul>
<li>Removing Dependencies on People and Files</li>
<li>Reproducible Anywhere</li>
<li>Using Pull Requests or Code Reviews As Triggers</li>
<li>Having Tests to Address Pain Points</li>
<li>Dealing with Certificates and Provisioning Profiles</li>
<li><a href="https://www.hashicorp.com">HashiCorp</a></li>
<li>Using Tools Like <a href="https://fastlane.tools"><strong>Fastlane</strong></a>
</li>
</ul><h1>Comparing Services</h1><ul>
<li>Cloud Services<ul>
<li>
<a href="https://www.bitrise.io"><strong>Bitrise</strong></a> - Focused on Mobile Development (Android and iOS)</li>
<li>
<a href="https://travis-ci.org"><strong>Travis-CI</strong></a> - Free Open Source (includes macOS)</li>
<li>
<a href="https://circleci.com"><strong>Circle-CI</strong></a> - Free Open Source (includes macOS)</li>
</ul>
</li>
<li>Self-Hosting<ul>
<li><a href="https://jenkins.io">Jenkins</a></li>
<li>Xcode Server</li>
<li><a href="https://github.com/AlexanderWillner/runMacOSinVirtualBox">Running Your Own Mac Virtual Machine</a></li>
</ul>
</li>
<li>Hybrid Solutions<ul><li><a href="https://www.macstadium.com">MacStadium</a></li></ul>
</li>
<li>Differences between macOS and iOS building <a href="https://speculid.com"><strong>Speculid</strong></a><ul><li><a href="https://www.youtube.com/watch?v=9kH_Qtla4-g&amp;list=PLmpJxPaZbSnB_h1FlXwN7TdJ7UGzvEtsG&amp;index=4">Tutorial Setting Up Speculid and macOS on Travis-CI</a></li></ul>
</li>
</ul><h1>Feedback Loops and CI</h1><ul>
<li>Having Healthy Unit Tests </li>
<li>Rapid Results through Automation</li>
<li>Proofing Builds Before QA</li>
</ul><h1>Social Media</h1><a href="https://twitter.com/brightdigit">Twitter - @brightdigit</a><a href="http://facebook.com/brightdigit">Facebook - BrightDigit</a><a href="https://www.linkedin.com/company/bright-digit">LinkedIn - BrightDigit</a><a href="https://www.instagram.com/brightdigit/">Instagram - @brightdigit</a><br><a href="https://www.patreon.com/empowerappsshow">Patreon - empowerappshow</a><br><br><br><p><strong><a rel="payment" title="★ Support this podcast on Patreon ★" href="https://www.patreon.com/empowerappsshow">★ Support this podcast on Patreon ★</a></strong></p>]]>
      </content:encoded>
      <pubDate>Sun, 13 Oct 2019 00:00:00 -0400</pubDate>
      <author>Leo Dion, Principal CEO and Swift Developer at BrightDigit </author>
      <enclosure url="https://chtbl.com/track/51E5/media.transistor.fm/dfe1727b.mp3" length="39262829" type="audio/mpeg"/>
      <itunes:author>Leo Dion, Principal CEO and Swift Developer at BrightDigit </itunes:author>
      <itunes:image href="https://images.transistor.fm/file/transistor/images/show/122/full_1533929410-artwork.jpg"/>
      <itunes:duration>2452</itunes:duration>
      <itunes:summary>In this episode we talk with Kyle Newsome about continuous integration with iOS and other Apple platforms development.</itunes:summary>
      <itunes:subtitle>In this episode we talk with Kyle Newsome about continuous integration with iOS and other Apple platforms development.</itunes:subtitle>
      <itunes:keywords>technology, apple, business, iPhone, Mac, osx, macOS, iPad, Apple Watch</itunes:keywords>
      <itunes:explicit>No</itunes:explicit>
      <googleplay:explicit>No</googleplay:explicit>
    </item>
    <item>
      <title>Modularizing in Xcode with Abbey Jackson</title>
      <itunes:episode>23</itunes:episode>
      <itunes:title>Modularizing in Xcode with Abbey Jackson</itunes:title>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:block>No</itunes:block>
      <googleplay:block>No</googleplay:block>
      <guid isPermaLink="false">d610aa7d-56a1-411c-a90e-4e5ce1e4c2a6</guid>
      <link>https://share.transistor.fm/s/c8f9aa41</link>
      <description>In this episode we talk with Abbey Jackson about how to improve testing and reliability with modularizing your iOS applications in Xcode.</description>
      <content:encoded>
        <![CDATA[<h1>Guest</h1><ul><li> <a href="https://abbeyjackson.ca"><strong>Abbey Jackson</strong></a><strong> - (</strong><a href="https://twitter.com/earthabbey"><strong>Twitter @earthabbey</strong></a><strong>)</strong><ul><li><a href="https://vimeo.com/showcase/6225806/video/354783100">Modularize All the Things - Abbey Jackson</a></li></ul>
</li></ul><h1>Sponsors</h1><a href="https://brightdigit.com/"><strong>BrightDigit</strong></a><ul>
<li>Specialize in helping businesses build apps for iPhone, iPad, Mac and Apple Watch</li>
<li>10 years of experience developing for a variety of Apple platform</li>
<li>Helping dev shops which lack experience with Apple platforms and Swift</li>
</ul><a href="https://brightdigit.com/contact/"><strong>Contact me if you need help today.</strong></a><br><strong>We have an opening for sponsors</strong><ul><li>Do you have a product or service which can target our ever growing community of developers as well as technology and business leaders? </li></ul><a href="https://brightdigit.com/contact/">Contact me today if you are interested in sponsoring</a> or <a href="https://www.patreon.com/empowerappsshow">go to our Patreon page.</a><h1>Themes from Conferences</h1><ul>
<li>The Importance with Meeting New People</li>
<li>Learning Old Features</li>
<li>Trying to Deep Dive into SwiftUI and its Future</li>
<li>The Benefits of SwiftUI for Designers</li>
<li>Comparing HTML and SwiftUI</li>
</ul><h1>Breaking Down How Xcode Works</h1><ul>
<li>How Different Components in Xcode Can Help Organize Your Code</li>
<li>How an Xcode Project Works</li>
<li>How Files result in Targets</li>
<li>Differences between Targets and Build Configuration</li>
<li>Dealing with Target Dependencies</li>
<li>Testing with Targets and Xcode</li>
<li>How Workspaces Differ from Projects</li>
</ul><h1>Modularizing Components</h1><ul>
<li>What are the best ways to organize your product?</li>
<li>Modularizing Your Persistence Layer</li>
<li>Importance of TDD and Protocol Oriented Programming</li>
<li>Other examples of modularizing: Network, Feature-cased, Authentication, User Profile, Location</li>
<li>Following Apple's SDK Framework Example</li>
</ul><h1>Dealing with Source Control</h1><ul>
<li>Using Git Submodules</li>
<li>Dependency Management Tools (i.e. SPM, Cocoapods, Carthage)</li>
<li>Using SDK Targets</li>
<li>Swift Package Manager</li>
</ul><h1>The Benefits of Modularizing</h1><ul>
<li>Decrease Build Times</li>
<li>Share Code and Functionality</li>
<li>Optimize Your Build Pipelines</li>
</ul><h1>Post-September Purchasing Choices</h1><ul>
<li>Apple Watch Series 5</li>
<li>iTunes vs App Store Gift Cards</li>
<li><a href="https://www.amazon.com/Lavolta-Carrying-Case-Apple-27-inch/dp/B01DYHDQNI">iMac Backpack</a></li>
</ul><h1>Social Media</h1><a href="https://twitter.com/brightdigit">Twitter - @brightdigit</a><a href="http://facebook.com/brightdigit">Facebook - BrightDigit</a><a href="https://www.linkedin.com/company/bright-digit">LinkedIn - BrightDigit</a><a href="https://www.instagram.com/brightdigit/">Instagram - @brightdigit</a><br><a href="https://www.patreon.com/empowerappsshow">Patreon - empowerappshow</a><br><br><p><strong><a rel="payment" title="★ Support this podcast on Patreon ★" href="https://www.patreon.com/empowerappsshow">★ Support this podcast on Patreon ★</a></strong></p>]]>
      </content:encoded>
      <pubDate>Sun, 29 Sep 2019 00:00:00 -0400</pubDate>
      <author>Leo Dion, Principal CEO and Swift Developer at BrightDigit </author>
      <enclosure url="https://chtbl.com/track/51E5/media.transistor.fm/c8c2a148.mp3" length="50640626" type="audio/mpeg"/>
      <itunes:author>Leo Dion, Principal CEO and Swift Developer at BrightDigit </itunes:author>
      <itunes:image href="https://images.transistor.fm/file/transistor/images/show/122/full_1533929410-artwork.jpg"/>
      <itunes:duration>3163</itunes:duration>
      <itunes:summary>In this episode we talk with Abbey Jackson about how to improve testing and reliability with modularizing your iOS applications in Xcode.</itunes:summary>
      <itunes:subtitle>In this episode we talk with Abbey Jackson about how to improve testing and reliability with modularizing your iOS applications in Xcode.</itunes:subtitle>
      <itunes:keywords>Xcode, iOS, swift, macOS, watchOS, packages, dependencies</itunes:keywords>
      <itunes:explicit>No</itunes:explicit>
      <googleplay:explicit>No</googleplay:explicit>
    </item>
    <item>
      <title>September 2019 Event</title>
      <itunes:episode>22</itunes:episode>
      <itunes:title>September 2019 Event</itunes:title>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:block>No</itunes:block>
      <googleplay:block>No</googleplay:block>
      <guid isPermaLink="false">a33bead9-3e8c-49d1-b161-eb50565e7421</guid>
      <link>https://share.transistor.fm/s/7966a039</link>
      <description>In this special episode, Leo talks briefly about the September event this year: specifically what does Apple Arcade and Apple TV+ mean for the app business, can the iPad be a serious laptop competitor, iPhone is now a "professional" camera, the continued improvements to the Apple Watch and its battery, and lastly the maturity of the smartphone and it's affect on the app business.</description>
      <content:encoded>
        <![CDATA[<h1>Full Video</h1><a href="https://youtu.be/5Qn22CN3hAA"><strong>Youtube Video - https://youtu.be/5Qn22CN3hAA</strong></a><h1>Sponsors</h1><a href="https://brightdigit.com/"><strong>BrightDigit</strong></a><ul>
<li>Specialize in helping businesses build apps for iPhone, iPad, Mac and Apple Watch</li>
<li>10 years of experience developing for a variety of Apple platform</li>
<li>Helping dev shops which lack experience with Apple platforms and Swift</li>
</ul><a href="https://brightdigit.com/contact/"><strong>Contact me if you need help today.</strong></a><br><strong>We have an opening for sponsors</strong><ul><li>Do you have a product or service which can target our ever growing community of developers as well as technology and business leaders? </li></ul><a href="https://brightdigit.com/contact/">Contact me today if you are interested in sponsoring</a> or <a href="https://www.patreon.com/empowerappsshow">go to our Patreon page.</a><h1>Apple Arcade and Apple TV+</h1><ul>
<li>Can there be a subscription service for apps similar to Arcade for games?</li>
<li>Was the pricing reasonable for most </li>
</ul><h1>iPad (7th Generation)</h1><ul>
<li>Is the iPad ready to be a laptop replacement?</li>
<li>Is the app ecosystem ready for professional apps on the iPad?</li>
</ul><h1>Apple Watch Series 6</h1><ul>
<li>What the continuing trend of the Apple Watch battery improvement?</li>
<li>Is the Apple Watch the device of the future?</li>
</ul><h1>iPhone 11</h1><ul>
<li>A continuing trend of maturity in the smartphone market?</li>
<li>Is the iPhone a phone or a camera?</li>
</ul><h1>iOS 13</h1><ul><li>
<a href="https://twitter.com/tonydehnke/status/1171891500969410560">Thoughts on if Apple bit off too much on the OS upgrades to deliver everything on time?</a> - @tonydehnke</li></ul><h1>Social Media</h1><a href="https://www.youtube.com/channel/UCnl3jF6GHAvlj1MZyb6Ka9g?view_as=subscriber"><strong>Youtube - BrightDigit</strong></a><br><a href="https://twitter.com/brightdigit">Twitter - @brightdigit</a><a href="http://facebook.com/brightdigit">Facebook - BrightDigit</a><a href="https://www.linkedin.com/company/bright-digit">LinkedIn - BrightDigit</a><a href="https://www.instagram.com/brightdigit/">Instagram - @brightdigit</a><br><a href="https://www.patreon.com/empowerappsshow">Patreon - empowerappshow</a><br><br><p><strong><a rel="payment" title="★ Support this podcast on Patreon ★" href="https://www.patreon.com/empowerappsshow">★ Support this podcast on Patreon ★</a></strong></p>]]>
      </content:encoded>
      <pubDate>Sun, 15 Sep 2019 00:00:00 -0400</pubDate>
      <author>Leo Dion, Principal CEO and Swift Developer at BrightDigit </author>
      <enclosure url="https://chtbl.com/track/51E5/media.transistor.fm/b2321e3f.mp3" length="9044163" type="audio/mpeg"/>
      <itunes:author>Leo Dion, Principal CEO and Swift Developer at BrightDigit </itunes:author>
      <itunes:image href="https://images.transistor.fm/file/transistor/images/show/122/full_1533929410-artwork.jpg"/>
      <itunes:duration>1127</itunes:duration>
      <itunes:summary>In this special episode, Leo talks briefly about the September event this year: specifically what does Apple Arcade and Apple TV+ mean for the app business, can the iPad be a serious laptop competitor, iPhone is now a "professional" camera, the continued improvements to the Apple Watch and its battery, and lastly the maturity of the smartphone and it's affect on the app business.</itunes:summary>
      <itunes:subtitle>In this special episode, Leo talks briefly about the September event this year: specifically what does Apple Arcade and Apple TV+ mean for the app business, can the iPad be a serious laptop competitor, iPhone is now a "professional" camera, the continued </itunes:subtitle>
      <itunes:keywords>iPhone 11, Apple TV+, Apple Arcade, iPad, Apple Watch Series 6</itunes:keywords>
      <itunes:explicit>No</itunes:explicit>
      <googleplay:explicit>No</googleplay:explicit>
    </item>
    <item>
      <title>Developing for Multiple Platforms with Manton Reece</title>
      <itunes:episode>21</itunes:episode>
      <itunes:title>Developing for Multiple Platforms with Manton Reece</itunes:title>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:block>No</itunes:block>
      <googleplay:block>No</googleplay:block>
      <guid isPermaLink="false">231442ca-7695-4436-a599-5a9f23037ba0</guid>
      <link>https://share.transistor.fm/s/3498c82f</link>
      <description>In this episode we talk with Manton Reece about his experience developing micro.blog for multiple Apple platforms as well as building his audience, monetization, other aspects of building an app.</description>
      <content:encoded>
        <![CDATA[<h1>Guest</h1><ul><li> <a href="https://manton.org">Manton Reece</a><ul>
<li><a href="https://micro.blog/">Micro.blog</a></li>
<li><a href="https://micro.blog/manton">@manton - Micro.blog</a></li>
<li><a href="https://coreint.org">Core Int - Podcast with Daniel</a></li>
</ul>
</li></ul><h1>Sponsors</h1><a href="https://brightdigit.com"><strong>BrightDigit</strong></a><ul>
<li>Specialize in helping businesses build apps for iPhone, iPad, Mac and Apple Watch</li>
<li>10 years of experience developing for a variety of Apple platform</li>
<li>Helping dev shops which lack experience with Apple platforms and Swift</li>
</ul><a href="https://brightdigit.com/contact/"><strong>Contact me if you need help today.</strong></a><br><strong>We have an opening for sponsors</strong><ul><li>Do you have a product or service which can target our ever growing community of developers as well as technology and business leaders? </li></ul><a href="https://brightdigit.com/contact/">Contact me today if you are interested in sponsoring</a> or <a href="https://www.patreon.com/empowerappsshow">go to our Patreon page.</a><h1>Micro.blog</h1><ul>
<li>Self-Hosted and Indie Web Focus</li>
<li>Dealing with Twitter Issues<ul>
<li>Developer-Friendly</li>
<li>Privacy</li>
<li>Community Issues</li>
</ul>
</li>
</ul><h1>Marketing to an Audience</h1><ul>
<li>Reach Out and Let People Know</li>
<li>Starting a Mailing List and Blog to Reach Out</li>
<li>Slow Growth Allows For Intermittent Improves Based On Audience Feedback</li>
<li>Maintaining Engagement</li>
<li>Using Automation with Mailchimp and other Mailing Lists</li>
<li>Using Kickstarter for Funding a New Project</li>
<li>Finding the right niche or niches</li>
<li>Providing value outside of comparing yourself</li>
</ul><h1>Developing for Multiple Apple Platform</h1><ul>
<li>Hosting through Linode using Sinatra + Ruby</li>
<li>How Micro.blog works behind the scenes</li>
<li>Having a Public API and Dealing with Third-Party APIs</li>
<li>Adopting standards</li>
<li>Dealing with Multiple Different UIs</li>
<li>Building Frameworks for other Developers</li>
<li>Differences between developing for the Mac vs. iPhone</li>
<li>Catalyst vs SwiftUI on the Mac</li>
<li>Constantly Releasing Updates</li>
</ul><h1>Apple September Event</h1><ul>
<li>What the new iPhone might mean for developers?</li>
<li>Maturity of the iPhone</li>
<li>Emphasis on Photography with third lens</li>
<li>Independence of the Watch App</li>
</ul><h1>Social Media</h1><a href="https://twitter.com/brightdigit">Twitter - @brightdigit</a><a href="http://facebook.com/brightdigit">Facebook - BrightDigit</a><a href="https://www.linkedin.com/company/bright-digit">LinkedIn - BrightDigit</a><a href="https://www.instagram.com/brightdigit/">Instagram - @brightdigit</a><br><a href="https://www.patreon.com/empowerappsshow">Patreon - empowerappshow</a><br><p><strong><a rel="payment" title="★ Support this podcast on Patreon ★" href="https://www.patreon.com/empowerappsshow">★ Support this podcast on Patreon ★</a></strong></p>]]>
      </content:encoded>
      <pubDate>Sat, 07 Sep 2019 23:55:00 -0400</pubDate>
      <author>Leo Dion, Principal CEO and Swift Developer at BrightDigit </author>
      <enclosure url="https://chtbl.com/track/51E5/media.transistor.fm/1e618ff4.mp3" length="24328380" type="audio/mpeg"/>
      <itunes:author>Leo Dion, Principal CEO and Swift Developer at BrightDigit </itunes:author>
      <itunes:image href="https://images.transistor.fm/file/transistor/images/show/122/full_1533929410-artwork.jpg"/>
      <itunes:duration>3195</itunes:duration>
      <itunes:summary>In this episode we talk with Manton Reece about his experience developing micro.blog for multiple Apple platforms as well as building his audience, monetization, other aspects of building an app.</itunes:summary>
      <itunes:subtitle>In this episode we talk with Manton Reece about his experience developing micro.blog for multiple Apple platforms as well as building his audience, monetization, other aspects of building an app.</itunes:subtitle>
      <itunes:keywords>technology, apple, business, iPhone, Mac, osx, macOS, iPad, Apple Watch</itunes:keywords>
      <itunes:explicit>No</itunes:explicit>
      <googleplay:explicit>No</googleplay:explicit>
    </item>
    <item>
      <title>WWDC 2019 - Mac Development with Daniel Jalkut</title>
      <itunes:episode>20</itunes:episode>
      <itunes:title>WWDC 2019 - Mac Development with Daniel Jalkut</itunes:title>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:block>No</itunes:block>
      <googleplay:block>No</googleplay:block>
      <guid isPermaLink="false">154294ac-69f1-448a-b25c-8bf923d84b9a</guid>
      <link>https://share.transistor.fm/s/4f8b37d3</link>
      <description>In this episode we talk with Daniel Jalkut of Red Sweater Software about what’s new in Mac Development post-WWDC 2019.</description>
      <content:encoded>
        <![CDATA[<h1>Guest</h1><ul><li> Daniel Jalkut<ul>
<li><a href="https://red-sweater.com">Red Sweater - Software Company</a></li>
<li><a href="https://bitsplitting.org">Daniel's Blog - https://bitsplitting.org</a></li>
<li><a href="https://coreint.org">Core Int - Podcast with Manton</a></li>
<li><a href="https://twitter.com/danielpunkass">(@danielpunkass) | Twitter</a></li>
</ul>
</li></ul><h1>Previous Episodes</h1><ul>
<li><a href="https://share.transistor.fm/s/3d4c7634?preview=true">Empower Apps | WWDC 2019 - Apple Watch with Gary Sabo | Episode 18</a></li>
<li><a href="https://share.transistor.fm/s/03051561">Empower Apps | WWDC 2019 - Swift UI with Jason Anderson | Episode 19</a></li>
<li><a href="https://coreint.org/2019/06/episode-378-hi-i-make-macintosh-software/">Core Int | Episode 378: Hi, I make Macintosh Software</a></li>
<li><a href="https://coreint.org/2019/06/episode-377-just-a-tiny-company/">Core Int | Episode 377: Just A Tiny Company</a></li>
<li><a href="https://coreint.org/2019/06/episode-376-i-had-a-vegan-quesadilla/">Core Int | Episode 376: I Had A Vegan Quesadilla</a></li>
<li><a href="https://daringfireball.net/thetalkshow/2019/07/23/ep-257">Talk Show with John Gruber - Episode 257 - A Real Sandwich</a></li>
</ul><h1>Sponsors</h1><a href="https://brightdigit.com"><strong>BrightDigit</strong></a><ul>
<li>Specialize in helping businesses build apps for iPhone, iPad, Mac and Apple Watch</li>
<li>10 years of experience developing for a variety of Apple platform</li>
<li>Helping dev shops which lack experience with Apple platforms and Swift</li>
</ul><a href="https://brightdigit.com/contact/"><strong>Contact me if you need help today.</strong></a><br><strong>We have an opening for sponsors</strong><ul><li>Do you have a product or service which can target our ever growing community of developers as well as technology and business leaders? </li></ul><a href="https://brightdigit.com/contact/">Contact me today if you are interested in sponsoring</a> or <a href="https://www.patreon.com/empowerappsshow">go to our Patreon page.</a><h1>WWDC 2019</h1><ul>
<li>SwiftUI is the Future but is it Ready?</li>
<li>SwiftUI and Pragmatic Adoption and Migration</li>
</ul><h1>How has Apple changed over the years?</h1><ul>
<li>Apple conservative approach towards change</li>
<li>Not Releasing First</li>
</ul><h1>What happened to Marzipan?</h1><ul>
<li>Project Catalyst vs. SwiftUI</li>
<li>Using SwiftUI with AppKit</li>
<li>Artisanal vs Cross-Platform</li>
<li>Why would a company develop using Catalyst?<ul>
<li>
<a href="https://slack.engineering/rebuilding-slack-on-the-desktop-308d6fe94ae4">When a rewrite isn’t: rebuilding Slack on the desktop</a> </li>
<li>Is Slack in the business of writing exemplary apps?</li>
</ul>
</li>
<li>Pragmatism vs Art in Product Development<ul>
<li>How does Apple develop products?</li>
<li>Leading by Design</li>
</ul>
</li>
<li>Would you use SwiftUI in a Brand New App?</li>
</ul><h1>Future of macOS</h1><ul>
<li>Locking Down of macOS<ul><li><a href="https://daringfireball.net/thetalkshow/2019/07/23/ep-257">Talk Show with John Gruber - Episode 257 - A Real Sandwich</a></li></ul>
</li>
<li>Mac App Store vs. Distributing Yourself</li>
<li>How does Notarization work?</li>
<li>How does Gatekeeper work?<ul><li><a href="https://bitsplitting.org/2019/07/22/a-real-gatekeeper/">Daniel's Article - A Real Gatekeeper</a></li></ul>
</li>
<li>Apple - Making macOS more secure or more annoying</li>
<li>Is Sandboxing and the 30% cut worth it for the Mac App Store?</li>
<li><a href="https://speculid.com">Speculid - Easily Manage Graphics in Xcode Projects</a></li>
<li><a href="https://red-sweater.com/fastscripts/">FastScripts - Powerful script management utility</a></li>
<li><a href="https://daringfireball.net/thetalkshow/2019/07/23/ep-257">Non-Consensual Software</a></li>
</ul><h1>Running an App Business</h1><ul>
<li>Limits of the App Store as a Business</li>
<li>How to be a successful business and build great apps?</li>
<li>
<a href="https://saas.transistor.fm/episodes/did-we-solve-our-bandwidth-cost-crisis">Build Your Saas - Hosting Costs</a> </li>
<li><a href="https://stratechery.com/2019/apples-audacity/">Stratechery - The First Post-iPhone Keynote</a></li>
<li>Find Where the Market Is</li>
</ul><h1>Social Media</h1><a href="https://twitter.com/brightdigit">Twitter - @brightdigit</a><a href="http://facebook.com/brightdigit">Facebook - BrightDigit</a><a href="https://www.linkedin.com/company/bright-digit">LinkedIn - BrightDigit</a><a href="https://www.instagram.com/brightdigit/">Instagram - @brightdigit</a><br><a href="https://www.patreon.com/empowerappsshow">Patreon - empowerappshow</a><br><p><strong><a rel="payment" title="★ Support this podcast on Patreon ★" href="https://www.patreon.com/empowerappsshow">★ Support this podcast on Patreon ★</a></strong></p>]]>
      </content:encoded>
      <pubDate>Sat, 24 Aug 2019 23:05:00 -0400</pubDate>
      <author>Leo Dion, Principal CEO and Swift Developer at BrightDigit </author>
      <enclosure url="https://chtbl.com/track/51E5/media.transistor.fm/3918a210.mp3" length="33300093" type="audio/mpeg"/>
      <itunes:author>Leo Dion, Principal CEO and Swift Developer at BrightDigit </itunes:author>
      <itunes:image href="https://images.transistor.fm/file/transistor/images/show/122/full_1533929410-artwork.jpg"/>
      <itunes:duration>3890</itunes:duration>
      <itunes:summary>In this episode we talk with Daniel Jalkut of Red Sweater Software about what’s new in Mac Development post-WWDC 2019.</itunes:summary>
      <itunes:subtitle>In this episode we talk with Daniel Jalkut of Red Sweater Software about what’s new in Mac Development post-WWDC 2019.</itunes:subtitle>
      <itunes:keywords>technology, apple, business, iPhone, Mac, osx, macOS, iPad, Apple Watch</itunes:keywords>
      <itunes:explicit>No</itunes:explicit>
      <googleplay:explicit>No</googleplay:explicit>
    </item>
    <item>
      <title>WWDC 2019 - Swift UI with Jason Anderson</title>
      <itunes:episode>19</itunes:episode>
      <itunes:title>WWDC 2019 - Swift UI with Jason Anderson</itunes:title>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:block>No</itunes:block>
      <googleplay:block>No</googleplay:block>
      <guid isPermaLink="false">ff9c5bfb-d1ef-4729-adf9-9fd1958a9077</guid>
      <link>https://share.transistor.fm/s/03051561</link>
      <description>In this episode we talk with Jason Anderson about Swift UI and reactive Swift post-WWDC 2019.</description>
      <content:encoded>
        <![CDATA[<h1>Guest</h1><ul><li> Jason Anderson <ul>
<li>
<a href="https://twitter.com/_jasonranderson">(@_jasonranderson) | Twitter</a> </li>
<li><a href="https://github.com/Jasonranderson">jasonranderson GitHub</a></li>
</ul>
</li></ul><h1>Previous Episodes</h1><ul><li><a href="https://share.transistor.fm/s/3d4c7634?preview=true">Empower Apps | WWDC 2019 - Apple Watch with Gary Sabo | Episode 18</a></li></ul><h1>Sponsors</h1><a href="https://360idev.com/"><strong>360|iDev- August 25 - 28th - Denver, CO</strong></a><ul>
<li>The Leading indie iOS/Mac (and watchOS, and tvOS) Developer conference</li>
<li>It’s all about Community and Code!</li>
<li>Four days of hands-on training, amazing sessions, and the great community. All Swift.</li>
</ul>Use the promo code <strong><em>FriendsInHighPlaces</em></strong> to get <a href="https://360idev.com/#tile_registration">20% off registration.<br></a><br><strong>We have an opening for sponsors</strong><ul><li>Do you have a product or service which can target our ever growing community of developers as well as technology and business leaders? <a href="https://brightdigit.com/contact/">Contact me today if you are interested in sponsoring</a> or <a href="https://www.patreon.com/empowerappsshow">go to our Patreon page.</a>
</li></ul><h1>Functional Reactive Programming</h1><ul>
<li><a href="https://github.com/ReactiveCocoa">ReactiveCocoa · GitHub</a></li>
<li><a href="https://developer.apple.com/documentation/combine">Combine | Apple Developer Documentation</a></li>
<li><a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel">Model–view–viewmodel - Wikipedia</a></li>
<li><a href="https://en.wikipedia.org/wiki/First-class_function">First-class function - Wikipedia</a></li>
</ul><h1>Understanding Declarative Programming</h1><ul>
<li>Better for Multiple Devices</li>
<li>Improved Team Collaboration</li>
<li>Xcode LivePreview</li>
<li>Keep View Model and Data Model Separate</li>
<li>Faster Iterative Development Long-Term</li>
</ul><h1>Drawbacks of using Swift UI</h1><ul>
<li>Limited to latest OS (iOS, macOS, watchOS, tvOS)</li>
<li>Lack of Documentation and Support</li>
<li>Collection Views (i.e. Grids)</li>
<li>Good Support of Communication Between of UIKit and SwiftUI</li>
<li>Not Best for New Recent Releases</li>
<li>Do Need To Use It Now</li>
<li><a href="https://www.youtube.com/watch?v=e5EzQgKx2Es&amp;t=2051s">Leo’s Swift UI Stream</a></li>
</ul><h1>Social Media</h1><a href="https://twitter.com/brightdigit">Twitter - @brightdigit</a><a href="http://facebook.com/brightdigit">Facebook - BrightDigit</a><a href="https://www.linkedin.com/company/bright-digit">LinkedIn - BrightDigit</a><a href="https://www.instagram.com/brightdigit/">Instagram - @brightdigit</a><br><a href="https://www.patreon.com/empowerappsshow">Patreon - empowerappshow</a><p><strong><a rel="payment" title="★ Support this podcast on Patreon ★" href="https://www.patreon.com/empowerappsshow">★ Support this podcast on Patreon ★</a></strong></p>]]>
      </content:encoded>
      <pubDate>Sat, 10 Aug 2019 22:20:00 -0400</pubDate>
      <author>Leo Dion, Principal CEO and Swift Developer at BrightDigit </author>
      <enclosure url="https://chtbl.com/track/51E5/media.transistor.fm/82555a1d.mp3" length="10202033" type="audio/mpeg"/>
      <itunes:author>Leo Dion, Principal CEO and Swift Developer at BrightDigit </itunes:author>
      <itunes:image href="https://images.transistor.fm/file/transistor/images/show/122/full_1533929410-artwork.jpg"/>
      <itunes:duration>1358</itunes:duration>
      <itunes:summary>In this episode we talk with Jason Anderson about Swift UI and reactive Swift post-WWDC 2019.</itunes:summary>
      <itunes:subtitle>In this episode we talk with Jason Anderson about Swift UI and reactive Swift post-WWDC 2019.</itunes:subtitle>
      <itunes:keywords>swift ui, WWDC 2019, Apple Watch</itunes:keywords>
      <itunes:explicit>No</itunes:explicit>
      <googleplay:explicit>No</googleplay:explicit>
    </item>
    <item>
      <title>WWDC 2019 - Apple Watch with Gary Sabo</title>
      <itunes:episode>18</itunes:episode>
      <itunes:title>WWDC 2019 - Apple Watch with Gary Sabo</itunes:title>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:block>No</itunes:block>
      <googleplay:block>No</googleplay:block>
      <guid isPermaLink="false">f5e45b06-d2a2-4de0-af14-8f319fe3eb98</guid>
      <link>https://share.transistor.fm/s/3d4c7634</link>
      <description>In this episode we talk with Gary Sabo about the Apple Watch post-WWDC 2019. We talk about Independent Watch Apps,	Swift UI and watchOS 6,	HealthKit, Fitness apps and more.</description>
      <content:encoded>
        <![CDATA[<h1>Guest</h1><ul><li>
<a href="https://twitter.com/garysabo">Gary Sabo</a><ul>
<li><a href="https://apps.apple.com/us/developer/myndarc-llc/id979588062">‎MyndArc, LLC Apps on the App Store</a></li>
<li><a href="https://join.slack.com/t/healthkitdevelopers/shared_invite/enQtMzEyOTg1NTk2MDY2LWJlMjc5ZWE1ZjNhMTdlNzk3MTQ4Y2EyYzg4ZmRkODdmNTU1NDMyYjhkMjNmNDAxY2NlZjZlMTE2OGJhOTJiMjE">HealthKit Slack</a></li>
</ul>
</li></ul><h1>Previous Episodes</h1><ul>
<li><a href="https://share.transistor.fm/s/eddb8632">Unit Testing Episode</a></li>
<li><a href="https://share.transistor.fm/s/82709349">Apple Watch Series 4</a></li>
</ul><h1>Sponsors</h1><a href="https://360idev.com/">360|iDev- August 25 - 28th - Denver, CO</a><ul>
<li>The Leading indie iOS/Mac (and watchOS, and tvOS) Developer conference</li>
<li>It’s all about Community and Code!</li>
<li>Four days of hands-on training, amazing sessions, and the great community. All Swift.</li>
</ul>Use the promo code <strong>FriendsInHighPlaces </strong>to get <a href="https://360idev.com/#tile_registration">20% off registration.<br></a><br><a href="https://www.patreon.com/empowerappsshow"><strong>We have an opening for sponsors and patrons</strong></a><strong> </strong><ul><li>Do you have a product or service which can target our ever growing community of developers as well as technology and business leaders? <a href="https://brightdigit.com/contact/">Contact me today if you are interested</a> or <a href="https://www.patreon.com/empowerappsshow">join our Patreon</a>.</li></ul><h1>Thoughts on WWDC</h1><ul>
<li>
<strong>SwiftUI and the slow demise of Storyboards</strong><ul>
<li><a href="https://twitter.com/gruber/status/1014490721909444608">Gruber’s rumor about Declarite Programming</a></li>
<li>Swift and the slow demise of Objective-C</li>
</ul>
</li>
<li>
<a href="https://github.com/Blackjacx/WWDC#whats-new-in-swift"><strong>Github Repo on Talks</strong></a><ul>
<li><a href="https://developer.apple.com/videos/play/wwdc2019/218/">Exploring New Data Representations in HealthKit - WWDC 2019 - Videos - Apple Developer</a></li>
<li><a href="https://developer.apple.com/videos/play/wwdc2019/219/">SwiftUI on watchOS - WWDC 2019 - Videos - Apple Developer</a></li>
<li><a href="https://developer.apple.com/videos/play/wwdc2019/208/">Creating Independent Watch Apps - WWDC 2019 - Videos - Apple Developer</a></li>
<li><a href="https://developer.apple.com/videos/play/wwdc2019/239/">Great Developer Habits - WWDC 2019 - Videos - Apple Developer</a></li>
</ul>
</li>
<li><a href="https://github.com/Juanpe/About-Swifr"><strong>Github Repo on SwiftUI</strong></a></li>
<li>
<a href="https://www.economist.com/babbage/2012/07/13/youve-been-sherlocked">You’ve been sherlocked - Operating systems</a><ul>
<li><a href="https://apps.apple.com/us/app/hockeytracker/id1297971760">‎HockeyTracker on the App Store</a></li>
<li>Gear Towards Your Specific Audience</li>
<li>Specific Activities with specific metrics</li>
</ul>
</li>
</ul><h1>Independent Apple Watch Apps</h1><ul>
<li><strong>Why does Apple Watch apps need iPhone app counterparts?</strong></li>
<li>
<strong>iPhone Counterparts of Apple Watch</strong> workout apps are for visualization</li>
<li><strong>Slow Deprecation of WatchConnectivity</strong></li>
<li>How do you <strong>syncing certain data between Apple Watch and iPhone?</strong><ul><li>HealthKit ,StoreKit, etc…</li></ul>
</li>
<li>What’s the <strong>position of the iPhone in the future</strong> with AR and the Apple Watch?</li>
<li>
<strong>SwiftUI</strong> on the Apple Watch</li>
<li>The new <strong>Apple Watch App Store</strong>
</li>
</ul><h1>Where’s the Focus of the Apple Watch</h1><ul>
<li><strong>Health and Fitness - Niche Fitness</strong></li>
<li><strong>Advanced Notifications</strong></li>
<li>
<strong>Location Tracking</strong> - GPS and Indoor Positioning System (Indoor GPS)</li>
<li><strong>Accessibility and Haptic Feedback</strong></li>
<li>
<strong>More Sensors</strong> in the Future?</li>
</ul><h1>Maturity of HealthKit</h1><ul>
<li>Lacking <strong>Inability to Edit</strong>
</li>
<li><strong>Apple Partnering with Health Companies</strong></li>
<li><strong>Allowing HealthKit on iPad and macOS?</strong></li>
</ul><h1>Social Media</h1><a href="https://twitter.com/brightdigit">Twitter - @brightdigit</a><a href="http://facebook.com/brightdigit">Facebook - BrightDigit</a><a href="https://www.linkedin.com/company/bright-digit">LinkedIn - BrightDigit</a><a href="https://www.instagram.com/brightdigit/">Instagram - @brightdigit</a><br><a href="https://www.patreon.com/empowerappsshow">Patreon - empowerappsshow</a><br><p><strong><a rel="payment" title="★ Support this podcast on Patreon ★" href="https://www.patreon.com/empowerappsshow">★ Support this podcast on Patreon ★</a></strong></p>]]>
      </content:encoded>
      <pubDate>Sun, 28 Jul 2019 00:00:00 -0400</pubDate>
      <author>Leo Dion, Principal CEO and Swift Developer at BrightDigit </author>
      <enclosure url="https://chtbl.com/track/51E5/media.transistor.fm/09170915.mp3" length="18546595" type="audio/mpeg"/>
      <itunes:author>Leo Dion, Principal CEO and Swift Developer at BrightDigit </itunes:author>
      <itunes:image href="https://images.transistor.fm/file/transistor/images/show/122/full_1533929410-artwork.jpg"/>
      <itunes:duration>2489</itunes:duration>
      <itunes:summary>In this episode we talk with Gary Sabo about the Apple Watch post-WWDC 2019. We talk about Independent Watch Apps,	Swift UI and watchOS 6,	HealthKit, Fitness apps and more.</itunes:summary>
      <itunes:subtitle>In this episode we talk with Gary Sabo about the Apple Watch post-WWDC 2019. We talk about Independent Watch Apps,	Swift UI and watchOS 6,	HealthKit, Fitness apps and more.</itunes:subtitle>
      <itunes:keywords>apple watch, health, wwdc 2019, fitness tracking, swift ui</itunes:keywords>
      <itunes:explicit>No</itunes:explicit>
      <googleplay:explicit>No</googleplay:explicit>
    </item>
    <item>
      <title>Subcontracting with Joe Cieplinski</title>
      <itunes:episode>17</itunes:episode>
      <itunes:title>Subcontracting with Joe Cieplinski</itunes:title>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:block>No</itunes:block>
      <googleplay:block>No</googleplay:block>
      <guid isPermaLink="false">4d0d6472-ec86-48fd-ac81-9a7e0ae9b5ca</guid>
      <link>https://share.transistor.fm/s/b059197f</link>
      <description>In this episode we talk with Joe Cieplinski of Breakpoint Studio and Release Notes about the challenges and benefits companies and freelancers face in a subcontracting relationship.</description>
      <content:encoded>
        <![CDATA[<h1>Guest</h1><ul><li> <a href="https://joec.design">Joe Cieplinski</a> <ul>
<li><a href="https://twitter.com/jcieplinski">jcieplinski (@jcieplinski) - Twitter</a></li>
<li><a href="https://micro.blog/joec">Micro.blog - @joec</a></li>
<li><a href="https://recaf.app">RECaf - Effortless Caffeine Tracking</a></li>
<li><a href="https://releasenotes.tv">Release Notes | The Business of Online Businesses</a></li>
</ul>
</li></ul><h1>Previous Episodes</h1><ul><li><a href="https://share.transistor.fm/s/c2631188">Cross Platform Comparison with Rob Kerr</a></li></ul><h1>Sponsors</h1><a href="https://360idev.com"><strong>360|iDev</strong> - August 25 - 28th - Denver, CO</a><ul>
<li>The Leading indie iOS/Mac (and watchOS, and tvOS) Developer conference</li>
<li>It's all about Community and Code!</li>
<li>Four days of hands-on training, amazing sessions, and the great community. All Swift.</li>
</ul>Use the promo code <strong>FriendsInHighPlaces </strong>to get <a href="https://360idev.com/#tile_registration"><strong>20% off registration.</strong></a><strong><br><br></strong><a href="https://brightdigit.com"><strong>BrightDigit</strong></a><ul>
<li>Specialize in helping businesses build apps for iPhone, iPad, Mac and Apple Watch</li>
<li>10 years of experience developing for a variety of Apple platform</li>
<li>Helping dev shops which lack experience with Apple platforms and Swift</li>
</ul><a href="https://brightdigit.com/contact/"><strong>Contact me if you need help today.</strong></a><h1>Thoughts on WWDC </h1><ul>
<li><a href="https://joecieplinski.com/blog/2018/03/30/wwdc-on-a-budget/">WWDC on a Budget</a></li>
<li><a href="http://altconf.com">AltConf</a></li>
</ul><strong>Business + Developer Conferences</strong><ul>
<li><a href="http://peersconf.com">Peers Conference</a></li>
<li><a href="https://2019.releasenotes.tv">Release Notes 2019</a></li>
</ul><strong>Why Should You Be A Subcontractor?</strong><ul>
<li>
<strong>An Agency needs flexibility</strong> and an extra developer for a project</li>
<li>
<strong>An Agency needs a special expertise</strong> (i.e. HealthKit, WatchKit, etc…)</li>
<li>Fill a need for a particular platform and expertise (i.e. iOS) on team with other platform developers</li>
</ul><strong>Things to Consider for iOS Developers</strong><ul>
<li>
<strong>Have a portfolio and resume</strong> - help the agency sell you to other companies</li>
<li>
<strong>Be a </strong><a href="https://en.wikipedia.org/wiki/T-shaped_skills"><strong>T-shaped</strong></a><strong> developer</strong> - know the how to build an iOS app but also have a special expertise in an area</li>
<li>
<strong>Consider being a consultant</strong> - help build iOS development teams for companies while also making more money</li>
<li>
<strong>Know developers of other platforms -</strong> such as Android - if you can work with them then this provides even more value to the agency</li>
</ul><strong>Challenges of Being a Subcontractor</strong><ul>
<li>
<strong>Giving up Flexibility</strong> - you can be dropped at anytime because you only filling a role till a full-time employee is hired</li>
<li>
<strong>Communication and Management</strong> - Understood Your Role Within the Structure</li>
<li>
<strong>Don't Talk Money with Client Directly</strong> - Discussions on Money and Time should go though the agency always not directly with the client</li>
<li>
<strong>Don’t Sell Yourself as an Individual</strong> - remember you represent the agency</li>
<li>
<strong>Listen to the Team</strong> - Follow the agency and client’s protocols and guidelines such as their coding style, etc…</li>
</ul><strong>Speaking at 360|iDev</strong><ul>
<li><a href="https://360idev.com/sessions/when-a-simple-algorithm-will-do/">Joe’s Talk - <strong>When a Simple Algorithm will Do</strong></a></li>
<li><a href="https://360idev.com/sessions/the-multi-threaded-asynchronous-parallel-world-of-swift/">Leo’s Talk - <strong>The Multi-Threaded Asynchronous Parallel World of Swift</strong></a></li>
</ul><strong>Social Media</strong><a href="https://twitter.com/brightdigit">Twitter - @brightdigit</a>  <br><a href="http://facebook.com/brightdigit">Facebook - BrightDigit</a> <a href="https://www.linkedin.com/company/bright-digit">LinkedIn - BrightDigit</a> <a href="https://www.instagram.com/brightdigit/">Instagram - @brightdigit</a> <p><strong><a rel="payment" title="★ Support this podcast on Patreon ★" href="https://www.patreon.com/empowerappsshow">★ Support this podcast on Patreon ★</a></strong></p>]]>
      </content:encoded>
      <pubDate>Sun, 14 Jul 2019 00:00:00 -0400</pubDate>
      <author>Leo Dion, Principal CEO and Swift Developer at BrightDigit </author>
      <enclosure url="https://chtbl.com/track/51E5/media.transistor.fm/0d1b3a18.mp3" length="23786922" type="audio/mpeg"/>
      <itunes:author>Leo Dion, Principal CEO and Swift Developer at BrightDigit </itunes:author>
      <itunes:image href="https://images.transistor.fm/file/transistor/images/show/122/full_1533929410-artwork.jpg"/>
      <itunes:duration>2465</itunes:duration>
      <itunes:summary>In this episode we talk with Joe Cieplinski of Breakpoint Studio and Release Notes about the challenges and benefits companies and freelancers face in a subcontracting relationship.</itunes:summary>
      <itunes:subtitle>In this episode we talk with Joe Cieplinski of Breakpoint Studio and Release Notes about the challenges and benefits companies and freelancers face in a subcontracting relationship.</itunes:subtitle>
      <itunes:keywords>technology, apple, business, iPhone, Mac, osx, macOS, iPad, Apple Watch</itunes:keywords>
      <itunes:explicit>No</itunes:explicit>
      <googleplay:explicit>No</googleplay:explicit>
    </item>
    <item>
      <title>Cross Platform Comparison with Rob Kerr</title>
      <itunes:episode>16</itunes:episode>
      <itunes:title>Cross Platform Comparison with Rob Kerr</itunes:title>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:block>No</itunes:block>
      <googleplay:block>No</googleplay:block>
      <guid isPermaLink="false">f185d9f4-6e89-4969-a702-77328240b48c</guid>
      <link>https://share.transistor.fm/s/c2631188</link>
      <description>In this episode we talk with Rob Kerr (@rekerrsive), mobile development consultant, about cross platform developer tools such as Ionic, React Native, Xamarin, Flutter, and others. We compare them with native Swift development and talk about how Swift UI might change that landscape.</description>
      <content:encoded>
        <![CDATA[<h1>Guest</h1><ul><li><a href="https://twitter.com/rekerrsive/"><strong>Rob Kerr - @rekerrsive</strong></a></li></ul><h1>Why should companies go with a cross-platform solution?</h1><ul>
<li>Consistent User Experience (whether that's a good idea or not)</li>
<li>Synchronicity in Code Base</li>
<li>Budget - Use existing team expertise </li>
</ul><h1>What are the differences between cross-platform solutions?</h1><ul>
<li>
<strong>Web Based</strong> - Cordova, Ionic, PhoneGap</li>
<li>
<strong>Bridging Solution </strong>- Flutter, React Native, NativeScript</li>
<li>
<strong>Language Based</strong> - Xamarin - Use C# to Call Native API</li>
</ul><h1>What are the challenges with cross-platform solution?</h1><ul>
<li>Dependent on Vendor Support<ul><li>Dev teams need to keep Cross-Platform Tooling up to date</li></ul>
</li>
<li>Using a Specific API (Metal, HealthKit, etc…) <ul><li>May not be supported by Cross-Platform Tool</li></ul>
</li>
<li>There may be instances such as UI - you want differences between devices</li>
</ul><h1>Social Media</h1><a href="https://twitter.com/brightdigit"><strong>Twitter - @brightdigit<br></strong></a><a href="http://facebook.com/brightdigit"><strong>Facebook - BrightDigit</strong></a><strong><br></strong><a href="https://www.linkedin.com/company/bright-digit"><strong>LinkedIn - BrightDigit</strong></a><strong><br></strong><a href="https://www.instagram.com/brightdigit/"><strong>Instagram - @brightdigit</strong></a><h1>Transcript</h1>[00:00:00] <strong>Leo Dion (Host): </strong>Today with us. We have Rob Kerr. You want to go ahead and introduce yourself. <br><br>[00:00:05] <strong>Rob Kerr (Guest): </strong>My name is Rob Kerr. I'm a consultant working primarily in mobile platforms a lot of native development but more and more it's cross-platform with Xamarin, Flutter, and some other tools and I work with primarily business customers who are looking to deliver applications to both IOS and Android with the most efficient development process that they can experience.<br><br>[00:00:29] <strong>Leo Dion (Host): </strong>Awesome, really glad to have you on Rob. I've known you for three or four years now. It seems like. <br><br>[00:00:35] <strong>Rob Kerr (Guest): </strong>Something like that. <br><br>[00:00:37] <strong>Leo Dion (Host): </strong>Yeah, and we've met either at meetups or touch base every so often. So it sounds like recently you've been doing a lot of cross-platform development. And like I said, I have a little bit of experience with that of dabbled a little bit in Cordova as well.<br><br>[00:00:54] My bread-and-butter, my expertise is obviously Swift [that is] native Swift development. That's what I like to do. I think it has a lot of advantages but there could be situations like business reasons valid business reasons to go cross-platform, right? <br><br>[00:01:10] <strong>Rob Kerr (Guest): </strong>Yeah, I think so. And I think you and I have similar backgrounds in solutions as far as Apple. I've done a ton of native development in Swift and iOS and some on Android as well. Probably the last year or two a lot of my work has been cross platform and it's kind of driven by that business need or want to you know, hit both platforms efficiently. And currently in the IOS app store has you know about 1.8 million apps and the Play Store has about 2.1 million but the stats tell us that I think AppFigures had a study that only 450 thousand apps are truly cross platform where the same application is deployed in both platforms, which is you know, it's really small numbers less than 10 percent.<br><br>[00:01:54] And so when will you find is you know, Everyone would kind of like to be on both platforms at the same time, but not a lot of folks are or at least not not an efficient way. So in the past you mentioned Cordova and PhoneGap and probably five or six years ago that was almost the only game in town.<br><br>[00:02:11] But now this cross-platform frameworks are you know sprouting up quite a bit and all of the mega vendors offer something like Flutter or React Native or Xamarin from Microsoft. And so it's definitely coming into its own and there's certainly those those applications like business applications, especially where you need to have both platforms, but maybe don't want to fund building the app twice once for each so yeah, I think so.<br><br>[00:02:38] <strong>Leo Dion (Host): </strong>What are some situations where businesses should choose cross platform as opposed to a native? <br><br>[00:02:46] <strong>Rob Kerr (Guest): </strong>Yeah, that's a good question. And that's you know comes up a lot because the sort of the reasons not to usually drive into accessing very exotic APIs and things like that. In my mind if a business really wants to deliver on both platforms, especially if they like to do it at the same time that kind of tends toward cross-platform if you can particularly if the user experience they wanted to be the same on both platforms then using something cross-platform maybe doesn't mandate it but certainly makes it much likely that an application is going to work the same way so that when the support call comes in then you know somebody who needs to help a user doesn't have to think about you know, how does this work on Android how does this work on iOS. How's the potentially work on Windows? <br><br>[00:03:29] Then the obvious, you know elephant in the room is just budget. If you have to build the same application twice that costs, you know potentially twice as much typically usually other different teams that work on IOS and Android if they're done completely native.<br><br>[00:03:44] And then you know, you really have to think about in the long term how does that go into support cost? So if the application has to have a life cycle, new features that we added bugs need to be fixed, if they're written in two different languages than two platforms than that's something to think about so. As I think about it and on the consumer market, if you are going to develop an application to compete with one of Apple's native apps or Android and it needs to be really exotic, you know, cross-platform might not be the right choice for that.<br><br>[00:04:16] But for the vast majority of apps are content consumpution or business orientated and so on It's probably the majority of the leading cross-platform tools can deliver an app with the same user experience. So something to think about.<br><br>[00:04:33] <strong>Leo Dion (Host): </strong>It's funny you mention user experience. I would say that can be a benefit of cross-platform but also a hindrance in a lot of ways because like recently I was doing work with the client and they were really good about making sure that the user experience was actually different on both platforms precisely because of the expectations that certain like Android users have with their UI and Apple users have with their UI - there are definitely big differences. Specificly I'm just like thinking about like hamburger menus is like we don't have hamburger menus is very much on iOS and that's that's one of the jarring things is when you use a cross-platform app.<br><br>[00:05:18] It can be obvious and jarring when you're using an app that is built cross platform, but doesn't like take into account like the user experience differences between both platforms. <br><br>[00:05:33] <strong>Rob Kerr (Guest): </strong>Yeah, there's a little bit to unpack there because as I've worked with clients that you know, definitely wanted pixel-perfect identical experiences in both platforms.<br><br>[00:05:42] Now, you might argue that you shouldn't do that right and Google and Apple and tell you shouldn't do that because you're not following their conventions and that's a very valid argument, but the cross-platform tooling doesn't really dictate that you have to have that same experience on both platforms.<br><br>[00:05:58] <strong>Leo Dion (Host): </strong>Right. I think it really depends. It really depends on which cross-platform tool you're using <br><br>[00:06:05] <strong>Rob Kerr (Guest): </strong>It does but even on most of them, I mean you can implement something conditionally. So you say that you know, this is the view used on Android. That's the view used on iOS for example, if that's what you want.<br><br>[00:06:17] I don't think cross platform prevents that but conversely if you really want a very identical experience cross-platform probably enables it better than forcing a common UI paradigm into the two different native tools but your central point about you know, not deviating from the design aesthetic of iOS and how it works, you know, whether you want to use a tab view controller versus a hamburger menu is very valid point and an important design issue to think about.<br><br>[00:06:48] <strong>Leo Dion (Host): </strong>Yeah, that's interesting. I'm just kind of curious going a little bit more into that. What is the reasoning behind having a consistent experience <br><br>[00:06:58] <strong>Rob Kerr (Guest): </strong>UX? Yeah.<br><br>[00:06:59] <strong>Leo Dion (Host): </strong>Because your typical UX person would be like no no no, it should not act exactly the same way on every platform. Is that is that usually like an executive decision that's done despite how it's not the right decision? Or is it a business decision typically to do that. Like I'm just kind of curious about that. <br><br>[00:07:23] <strong>Rob Kerr (Guest): </strong>Yeah, because what I think you just said is you think designers would not want that. I've actually worked for designers that exactly wanted that so I think it depends on the thought leadership behind the app the.<br><br>[00:07:34] Most compelling I think business reason that I've heard is kind of from a support perspective that that an app is going out and then a support department needs to support it. And when a user wants to know well, how do I go into the settings menu? If it isn't the same then they need to know how to support it in both directions.<br><br>[00:07:53] So I think there's some degree of. Validity to that concern but I don't think it should override, you know, the overall user adoption and user satisfaction with the app. So even many iOS apps use hamburger menu is even though that's really not an iOS thing. <br><br>[00:08:08] <strong>Leo Dion (Host): </strong>I don't like hamburger menus <br><br>[00:08:11] <strong>Rob Kerr (Guest): </strong>on iOS<br><br>[00:08:12] you know, but a lot of apps do you use it and you know many Android apps will you know use tab bar instead completely and not even have that flyover menu. So I think though the kind of a point is that that you can do it differently or not do it differently. I don't think the cross platform tools necessarily corner you to have to use a lowest common denominator. But if that's in your intent, it's probably more and more efficient way to do it. <br><br>[00:08:41] <strong>Leo Dion (Host): </strong>Yeah, I could see how that might. I'm okay. If the decision is yeah, it's not a great user experience. We're willing to admit that for budgetary reasons. We we just want to like have a consistent experience. I totally get that but I like that makes total sense.<br><br>[00:08:55] But if it's like actually like no no we're going to make iOS users have this uncomfortable experience because we think it's better. It's like I don't know about that. <br><br>[00:09:06] <strong>Rob Kerr (Guest): </strong>Yeah, well, I would hope someone wouldn't want to like do it in order to give them an uncomfortable experience. <br><br>[00:09:12] <strong>Leo Dion (Host): </strong>Yeah, I don't mean like purposely but just like they actually think that they know the best way to design on an iPhone better than Apple does it's like or vice versa, right?<br><br>[00:09:21] Like that would be an uncomfortable conversation to have yeah, and when we're talking budget. I'll talk to people about the specific subject. There was a great talk last year. I went to in New York given by one of the guys at can't think of his name now Artsy and he talked about transitioning to React Native and how their team transition to React Native and it sounds like that decision was more based on the fact that they already have an existing experience with react.<br><br>[00:09:56] <strong>Rob Kerr (Guest): </strong>All right, <br><br>[00:09:57] <strong>Leo Dion (Host): </strong>and so it seems like when we talk budget, typically we're talking at what and we talked about this in a previous episode on back-end development. Like what your team is already comfortable with is going to be like the healthiest way rather than trying to like necessarily shove Swift or Objective-C in Xcode down their throats if they're not willing to make that sacrifice and training and hiring like it totally makes sense to like just already use what's already existing in your team in those cases. It's a sacrifice obviously because you're not going to get as good of an experience perhaps that specialize in different platforms. But in the end like it might be a way to like save some money is just hey, this team has great cohesion doing react and React Native. Let's just stick with that.<br><br>[00:10:44] <strong>Rob Kerr (Guest): </strong>Yeah, I mean you can't ignore the kind of what resources do you already have what things you're already know how to support if you're building a mobile application to complement a suite of Enterprise, you know other applications and that other team can eventually support the mobile have to because you use similar technology or you know, I mean that that's certainly a benefit and I think there's you know, that is an important factor to consider. So, you know you and I touched on Xamarin earlier and C# - It's XAML. <br><br>[00:11:14] If you use Xamarin forms, you know, it uses Visual Studio, you know, if you already have 50 people in your company that use all that kind of thing every day, then yeah that might make a lot of sense versus building a very small team that you know is specializing in Swift or Objective-C or Java.<br><br>[00:11:32] If you lose one of those folks then you're in a lot of pain because you have to replace them. And I think you if you look across like what cross-platform tools different people advocate is very often the technology, they already know. So, you know web oriented folks will typically advocate, you know, kind of a phonegap or you know, react or ionic because you know, they're familiar with those those tools already.<br><br>[00:11:57] The Microsoft shops probably going to be very interested in Xamarin because it's very C# orientated. Flutter is really gaining a lot of traction from Google and it runs with Dart underneath which which which doesn't really have an installed base some you know, so we'll see where that goes but on some of those other ones, you know, absolutely if you have folks had already have those 80% of the skills. They need to build the app. That might make a lot of sense. <br><br>[00:12:25] <strong>Leo Dion (Host): </strong>What are some of the differences between the different cross-platform solutions because I know some are kind of like basically like your Cordova is essentially taking a bunch of HTML and JavaScript and CSS and building it into an app within a container some like React Native and Xamarin might just take whatever language you prefer and essentially like rebuild it into a actual binary and may include like some sort of library so that I can run what are the main differences between these different cross-platform solutions? <br><br>[00:13:00] <strong>Rob Kerr (Guest): </strong>I think it's an important question because very often most people think about cross-platform or hear about them and think that all these tools are really the same or you know exact peers. And they're really not and I really think it falls into three segments roughly. And there's some blending between the segments a little bit but I think this is a good way to think about it. The first is web technology driven tools in that are primarily using HTML JavaScript and as you said, they're running almost as a local website within a web viewer some container. Cordova and phonegap are the first that did this- they definitely  fall in this camp. Ionic falls in this camp pretty much. It can bridge a little bit to Native but mainly it's running as a web app as a single page web app with any container. And you know these I see, you know, mainly appealing to web development skill folks that you know, they're really good at web.<br><br>[00:13:56] They want to get mobile as fast as they can so this can make a lot of sense and I think it does make a lot of sense for many kinds of apps especially if they are consumption focused like a mobile news reader or magazine website, you know can be a really good fit. <br><br>[00:14:09] Now the second segment I think of is like tools that have some common language for the UI and and then have some way to bridge to native SDKs. And that's kind of the thread here is how close to native sdks are you? How abstracted are you into more of a web environment? And you know, the second one is really a common language and there's some bridge and React Native probably falls into this category because it's using React for the UI, but you can access native sdks through bridges and so on - maybe not as efficient as being fully native, but at least you can you can get there most of the time. Flutter probably is a little bit in this camp as well. It's you know, it's of completely abstracted environment, but you can get to native when you really need to. I think these tools are maybe a little more complex to use because you're sort of have one foot in both camps and debugging can be a challenge and so on but it kind of might be the best of both worlds depending your perspective.<br><br>[00:15:06] And then the third is guy can think of you know, there's a few tools to fit in there. Xamarin is probably one and that's that's where you're using the common language, but actually programming directly to underlying APIs. So in Xamarin you use C# to call the same methods in apis that you would in Swift or Objective-C and it generates native iOS code at the other end. There's some complexity there and so on but I think those three kind of segments.<br><br>[00:15:35] Are the ones that think about you know web driven, bridged, and just native with other languages kind of tools - that's that's why I think they fit. There's some bleed over obviously and some people say well this one's a little bit more in the first then the second that could be true but from a skills and adoption point of view I think that's a good model.  <br><br>[00:15:53] <strong>Leo Dion (Host): </strong>Where does Flutter fit into that is that just basically Dart for calling native apis? <br><br>[00:16:00] <strong>Rob Kerr (Guest): </strong>Flutter is unique because like with Xamarin or no, I think even to some extent React Native. It's your rendering like in Xamarian your rendering a native like UI button in iOS and on Android it's you know, it's rendering a native Android button you're just using C# in that case to do that <br><br>[00:16:19] Flutter is different because it actually is everything you see is drawn by Flutter on a Skia canvas. So that's kind of cool because you know, exactly what you're getting both platforms. It's very fast. And I think it'll go 60 frames per second or something like that.<br><br>[00:16:34] So it's a kind of like Cordova in a way but better but it also does have access to some native sdks as well - not all of them and that team is working on the bridging but it's if it's somewhere in the middle. I think I put a serve in the center camp of something that's common common language and bridging to native to an extent.<br><br>[00:16:55] <strong>Leo Dion (Host): </strong>Cool. So the difference between like React Native in Xamarin is that like React Native has its own set of apis whereas Xamarin is just using like - you still have uiviewcontroller for instance, but it's in C#, correct? <br><br>[00:17:10] <strong>Rob Kerr (Guest): </strong>Yeah, I think that's the right way to think about it as an react to you guys have kind of using a an abstract paradigm react and then it has a bridge to Native culture.<br><br>[00:17:20] So so you can get there whereas, you know examine is really totally native unless you use Xamarin forms but if you Xamarin iOS and Xamarin Android you just using a different language to access the underlying operating system apis. And then Xamarin, you know, the reason you would want from their perspective, the reason you would want to do that is because all that common code like web access and business logic and all that is completely shared. It's on C# and there's just no deviation between platforms. At least that's the concept right. <br><br>[00:17:50] <strong>Leo Dion (Host): </strong>That makes total sense. What out of those three types are out of the platforms that you seen what do you prefer? <br><br>[00:17:58] <strong>Rob Kerr (Guest): </strong>It's really good question. So definitely I tend to gravitate a little bit toward. You know, what's a really good fit for the organization. What's going to be good for long-term TCO and support I do work with a lot of  business customers. I think Xamarin is a really good fit there.<br><br>[00:18:14] I actually like it like working with Xamarin because it works directly with the operating system. So if I have algorithms and Swift that access HealthKit and can do all the things that Health get does I could pretty much Port those. The Xamarin without any changes and it has source-level debugger going at every level which is kind of nice. So I like that platform, it's not that commonly used I guess in you know outside of the business realm. Then outside of that realm I do like Flutter. I like what Flutters doing right now and the support it has behind it. So I'm hopeful that that will continue to grow and get better and React Native is you know fairly common out there and freely use in there. So there's a lot of folks available to work on that technology. I think it's pretty compelling. I haven't done much work with with React Native, but you know Associates that have used in love it, you know kind of sold me that that's a pretty good solution.<br><br>[00:19:07] Probably the ones I avoid a little bit are more the web driven ones. So the phonegap and ionic, you know, I think they're very good and they can have a place but at least the projects I've worked on. Dig more into the weeds with tell using Health Care using Apple pay and so on and so on and and I think the further you get away from the ability to get the Native APIs the less of a good strategic decision that technology is probably going to be.<br><br>[00:19:34] <strong>Leo Dion (Host): </strong>Yeah, and another one I'm thinking of is NativeScript, which that's JavaScript. Yeah, just as well. That's done by the guys at Progress I believe so. <br><br>[00:19:45] <strong>Rob Kerr (Guest): </strong>Yeah it is. Yeah. It's yeah NativeScript is I mean, it is really interesting. It's some. It's even more native than React Native, I guess right but you know that probably its biggest <br><br>[00:19:57] <strong>Leo Dion (Host): </strong>challenge is that the amount <br><br>[00:19:59] <strong>Rob Kerr (Guest): </strong>of folks out there that you the ecosystem.<br><br>[00:20:02] I mean, it's just really not there. Most people probably never heard of it. But and there's so many competitors that I think they're going to have to travel a challenge getting traction, but technically very compelling. <br><br>[00:20:15] <strong>Leo Dion (Host): </strong>I think I hear a lot of ionic and usually if it's a fairly simple app, you don't have to deal with the Native APIs in that case. I know that there's some bridges but not it's not anywhere near as comfortable as working with the other one. <br><br>[00:20:33] <strong>Rob Kerr (Guest): </strong>Yeah, ionic actually worked on a project for a client two or three years ago. And and we did some you know, we were able to get to a lot of native things you can bind, you know at the time Swift was really new so we needed to print some things on Zebra printers which had to be done with Native objective-c and we were able to glue it together. The debugging again was a challenge because you can't necessarily debug that library that that are the framework that you're linking in very easily.<br><br>[00:21:03] So that was a challenge. But ionic, I think what we had trouble most with was kind of controlling the UI a little bit because it's a web-based and and then just generally it's the completely open source volunteer ecosystem. <br><br>[00:21:17] <strong>Leo Dion (Host): </strong>Well, the other thing about ionic is you're locked into angular, whereas if you use something like that, I think you know phonegap and ionic.<br><br>[00:21:25] I think they're the same thing essentially but if you like break it down to like Cordova, so the correct me if I'm wrong but like Cordova is an underlying Apache open source project that will convert web applications to mobile apps right and then ionic is kind of built on top of that and then also brings in angularjs.<br><br>[00:21:47] Is that correct? <br><br>[00:21:48] <strong>Rob Kerr (Guest): </strong>Yeah, pretty much. But you know, I don't necessarily see there's a downside is as much as the reason that you're doing it, <br><br>[00:21:54] right exactly. Yeah, so if you already have an angular team, then it makes total sense to go with ionic. You can go a step lower than that and use Cordova. If for instance your a VueJS team that might make more sense as well.<br><br>[00:22:11] Yeah, I think Cordova is basically running a web app in. You know in a web view with some, you know specific JS, you know CSS files. So it's pretty plain Jane, but all the platforms I think kind of funny categories if you're you know, Ionic, you know is you know has it has its particular framework, you know, if you like reacts with power like React Native if you like dotnet you probably like Xamarin, you know, and so on so it's it's and that's where these projects came from its, you know groups that specialized in those platforms came up with a mobile solution so it's I think part of part of the package. <br><br>[00:22:48] <strong>Leo Dion (Host): </strong>And then I hear a lot of React Native. That's typically the biggest one I hear and then Flutter is kind of the one that's gained a lot of momentum of the last few months and then here in Michigan. We have a lot of C# and Java developers. So it makes total sense where you'll hear Xamarin being used is typically amongst companies that already have like they're either Microsoft shops, or they have a ton of C# developers and make sense for them to go with Xamarin <br><br>[00:23:16] <strong>Rob Kerr (Guest): </strong>Exactly and all of those if you sort of you know, follow the money kind of thing, you know React Native is Facebook, Flutter is Google, Xamarin is Microsoft and then there are a lot of Open Source volunteer Community Driven things you know it out there as well. And I guess you know Native Script has a corporate behind it as well, but it's not really a mega vendor. <br><br>[00:23:35] <strong>Leo Dion (Host): </strong>Right, yep. Exactly. What are some of the biggest challenges or what are some of the points within a working on a project where you were just like guys you're making this much harder than you need to you guys should really consider switching over and transitioning to doing a native app or what are some like code smells or smells within a project that you're like - okay at this point I think you guys should consider opening up xcode learning some Swift because this is not going to work out in the long run. <br><br>[00:24:06] <strong>Rob Kerr (Guest): </strong>Yep that's really good question and it's definitely something to consider because if you're starting a new product that  your likelihood of being able to switch to something else has is low once you have that much sunk cost into it.<br><br>[00:24:19] So and I think it's a it's really good. You know, what are some of the challenges probably the first isn't necessarily feature driven, but but just that if you use a cross platform platform or development tool to develop something, you know, you're not going to be going directly to Apple for support you're not going to be using Apple's apis directly.<br><br>[00:24:39] So you have to kind of think about that a little bit that's kind of obvious. Right? Because the whole idea of cross-platform is your working abstraction layer, but you know, your team does need to have still a pretty good understanding of the underlying operating systems and so on so there's there's somebody still need to do.<br><br>[00:24:55] As far the kind of feature driven [development], I was talking to a client and They said you know, we're thinking cross-platform - here's what we want to do. The red flags I am probably looking for is you know, are you trying to do something that is really really specific to the operating system underneath. So are you trying to use metal on iOS which you might not find any support and most cross platform tools now.<br><br>[00:25:20] Or are you trying to you know do something like earlier we talked about, you know, having a completely different experience on the two platforms. Well, if it is really completely different than you're still going to be writing it twice just in a different framework and you know, does that make sense?<br><br>[00:25:35] Another thing? I kind of look at her think about is how much of this app is you I how much of the app is underneath logic and code and things like that. So if an application is like 90% not the UI then cross-platform may make a lot of sense why I write a lot of business logic and database logic and calculations in two different languages to hit two platforms, you know, maybe it makes more sense to consolidate them.<br><br>[00:26:01] But you know, if the app is primarily, you know, if it's something that is totally UI driven 90% of it is kind of UI stuff and you want that UI to be very different on two platforms. That's like well maybe cross-platform doesn't doesn't make a lot of sense. <br><br>[00:26:18] <strong>Leo Dion (Host): </strong>Yeah. I think those are really good points before we close out. Is there anything else you wanted to mention? <br><br>[00:26:24] <strong>Rob Kerr (Guest): </strong>No, I think that's a pretty good discussion. There's tremendous interest and you probably see it to with you know, being able to ship the both platforms at the same time and you know, but having completely incompatible ecosystems makes that kind of tough.<br><br>[00:26:37] So I think a lot of people are thinking about this and you know, unfortunately or fortunately there's probably six really good choices out there to of technology stacks to use and not not everyone is is right for everybody. So it's a. <br><br>[00:26:51] <strong>Leo Dion (Host): </strong>Yeah, I think a lot of folks go into it thinking it's a shortcut it does help but it really depends on your team and it really isn't as much of a shortcut as people realize just to kind of reiterate what you're talking about here.<br><br>[00:27:05] Like I think the good ones is like if you really want a consistent user experience like you really insist upon it probably cross platform is the way to go. If you want like your releases to be in sync that makes total sense. And then of course if you're going to have an already existing team that is familiar with some sort of language or framework that's going to be used by a cross-platform solution then using it saves you money will help your budget when you first start off. The other thing I was going to say is like if you want to test an idea like you want to just put an app on both platforms to test that specific idea - maybe cross-platform is a great way to do it as well. <br><br>[00:27:44] You talked about the three differences between cross-platform solutions your Cordova based which is essentially a web View and then there's the bridge Solutions like Flutter React Native Native script and then solutions that are strictly language-based if your team is familiar C#, they're probably going to want to go with Xamarin which just basically takes the Swift and objective-c and turns it into C# for your team and just use a platform solution that is something that your team is somewhat familiar with if you already have a react team if you already have a C# team or web dev team that gives you an idea of where to go. But however, the real challenge is if you're going to use a cross-platform solution is that your in end up being dependent on another vendor or another community that is going to add another layer of complexity when it comes to support. So not only are you going to be beholding to Google or Apple? But now you have to be dependent on the react team or Xamarin the folks at Microsoft or the folks at ionic to make sure that they stay up-to-date with whatever changes come to iOS or Android.<br><br>[00:28:50] If you're using a specific API that's special to a operating system such as metal or health kit or just thinking of like Apple pay anything like that. That's very specific to an API that might be good indication that you might actually want to go with Swift and Native. Then if you are expecting to really personalize the UI to different platforms and there's a lot of UI involved it might also be a good indication that you want to go native as opposed to going with a cross-platform solution. You think I covered that pretty well? <br><br>[00:29:28] <strong>Rob Kerr (Guest): </strong>I think so. Yeah, I think and you know, it's kind of a thread that runs through there is a how much how much are you going to write code wise or UI development that can be used in both, you know both platforms. So it's something really to think about but I think that's a good summary, yeah.<br><br>[00:29:43]<strong>Leo Dion (Host): </strong> Rob. Are you available on social media? <br><br>[00:29:46] <strong>Rob Kerr (Guest): </strong>I am you can find me on Twitter @recursive. <br><br>[00:29:53] <strong>Leo Dion (Host): </strong>Awesome. And before we close out, I have one question for you actually it's more like two questions for you. It seems like every guest we ask this question. When you do Native, what do you use to build your user interface? Are you a storyboard or coding person? <br><br>[00:30:07] <strong>Rob Kerr (Guest): </strong>So this is the code in storyboard question.  (laughter) <br><br>[00:30:10] <strong>Leo Dion (Host): </strong>Yeah. Yeah. <br><br>[00:30:11] <strong>Rob Kerr (Guest): </strong>Yeah, I don't think there's a middle ground answer to that other than saying...<br><br>[00:30:15] <strong>Leo Dion (Host): </strong>Well If  you're a coward if you're middle ground, but other than that...  (laughter) <br><br>[00:30:21] <strong>Rob Kerr (Guest): </strong>Well I'm not a coward, I I tend to use storyboards because I find it easier to support down the road kind of, you know, rather than writing a lot of code, but I have done both on the Apple platform. <br><br>[00:30:38] <strong>Leo Dion (Host): </strong>Yeah, I go back and forth on it, I think like if you're on a big team storyboards are really really difficult because you're going to end up with emerging issues.<br><br>[00:30:47] <strong>Rob Kerr (Guest): </strong>Yeah merging issues is you know, it's a big deal for storyboards. It gives a visual declarative thing about what's going on with the app kind of like it but it seems like, you know, we're moving toward more declarative UI on this with SwiftUI is doing  that's what Flutter does with dart and it seems like the winds blowing in that direction.<br><br>[00:31:03] But if I you know, if I have a pretty standardized user user interface, I'll use a storyboard for that. It makes a lot of sense. <br><br>[00:31:09] <strong>Leo Dion (Host): </strong>Yeah, especially when you are first starting off. So yeah Swift UI - I was going to get into it. What do you think of SwiftUI?<br><br>[00:31:16] <strong>Rob Kerr (Guest): </strong>You know, it's a really good direction. It's to be seen but what I loaded up a development Mac with with the new version of Mac OS and installed xcode 11 on there and tried it out and and I really like it. The whole cycle where you In Mobile where you lay out your app screens and you know kind of get it working and then you know compiled build deploy to device and then you know washing repeat the most platforms are trying to deal with that react certainly is React Native as a platform that tries to address that and Flutter to an extent. I think they'll get there.<br><br>[00:31:52] But SwiftUI is aimed right at that and I think the way they're implemented that is is just right and you know, as you mentioned merge conflicts with UIKIt and so on and that's kind of solves that problem because it's just code at that point. Yeah, and I like the to definitely the split pane where you can make changes on the UI as if it was a storyboard and it updates the declarative code on the left side. I think that's really cool.<br><br>[00:32:14] <strong>Leo Dion (Host): </strong>I just hate that you need Catalina in order to really take advantage of it. Other than that, that's fantastic .<br><br>[00:32:22] <strong>Rob Kerr (Guest): </strong>It's temporary thing. It only supports iOS 13, which  means it's really not going to come into its own for, you know, a couple of years probably - it's right  direction. I like that direction. <br><br>[00:32:33] <strong>Leo Dion (Host): </strong>I mean if you're willing for an app to be in the App Store in October and November then I would totally recommend people look at Swift UI for their brand new app if they're willing to wait on it. I don't know like <br><br>[00:32:46] <strong>Rob Kerr (Guest): </strong>it's pretty buggy at the moment. So yeah, it is taking a risk, but certainly if you're starting something absolutely brand-new and you're comfortable only shipping for iOS 13 then sure. Why not? Yeah, <br><br>[00:32:58] <strong>Leo Dion (Host): </strong>that's what I meant. Of course. But yeah, so funny how out of this whole thing people were looking forward to iPad apps on the Mac and marzipan and like out of nowhere comes this like brand new and I love how it's completely severed. My some people aren't going to like it but it's completely severed from Objective-C.<br><br>[00:33:17] It takes advantage of like the whole Swift and Swift DLC stuff and creates a decently healthy way to build UIs because even it going back to the question going between storyboards and coding your own you I like I think a lot of people would, going back to [the] cross-platform  Development discussion, a lot of people like building their UI in HTML and it makes sense like CSS and HTML are just a lot easier to work with and having a declarative way to build your UI using Swift UI.<br><br>[00:33:50] It's a much more comfortable way because like storyboards all that stuff was like it's a black box like you can't go into that XML and figure out how to manually add like a button to user interface using storyboards. It's impossible. And then decode it like I do like the some of the stuff that they've added and last couple of years with constraints, but it's nowhere near as nice as what we've gotten with with declaratively building user interfaces and this is exactly the way user interfaces should be built. It makes total sense. <br><br>[00:34:26] <strong>Rob Kerr (Guest): </strong>A lot of people think so. Yeah. <br><br>[00:34:28] <strong>Leo Dion (Host): </strong>Well, thank you so much for coming on the show, and maybe we'll talk about the stuff again. <br><br>[00:34:34] <strong>Rob Kerr (Guest): </strong>Great. I've enjoyed being here. I appreciate the invitation and great conversation.<br><br>[00:34:38] Thank you. Yep. <br><br>[00:34:39] <strong>Leo Dion (Host): </strong>You're welcome.<p><strong><a rel="payment" title="★ Support this podcast on Patreon ★" href="https://www.patreon.com/empowerappsshow">★ Support this podcast on Patreon ★</a></strong></p>]]>
      </content:encoded>
      <pubDate>Sun, 30 Jun 2019 04:00:00 -0400</pubDate>
      <author>Leo Dion, Principal CEO and Swift Developer at BrightDigit </author>
      <enclosure url="https://chtbl.com/track/51E5/media.transistor.fm/ef6383eb.mp3" length="17228118" type="audio/mpeg"/>
      <itunes:author>Leo Dion, Principal CEO and Swift Developer at BrightDigit </itunes:author>
      <itunes:image href="https://images.transistor.fm/file/transistor/images/show/122/full_1533929410-artwork.jpg"/>
      <itunes:duration>2083</itunes:duration>
      <itunes:summary>In this episode we talk with Rob Kerr (@rekerrsive), mobile development consultant, about cross platform developer tools such as Ionic, React Native, Xamarin, Flutter, and others. We compare them with native Swift development and talk about how Swift UI might change that landscape.</itunes:summary>
      <itunes:subtitle>In this episode we talk with Rob Kerr (@rekerrsive), mobile development consultant, about cross platform developer tools such as Ionic, React Native, Xamarin, Flutter, and others. We compare them with native Swift development and talk about how Swift UI m</itunes:subtitle>
      <itunes:keywords>technology, apple, business, iPhone, Mac, osx, macOS, iPad, Apple Watch</itunes:keywords>
      <itunes:explicit>No</itunes:explicit>
      <googleplay:explicit>No</googleplay:explicit>
    </item>
    <item>
      <title>Test-Driven Development with Joshua Greene and Michael Katz </title>
      <itunes:episode>15</itunes:episode>
      <itunes:title>Test-Driven Development with Joshua Greene and Michael Katz </itunes:title>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:block>No</itunes:block>
      <googleplay:block>No</googleplay:block>
      <guid isPermaLink="false">342c7763-32b7-4c65-8171-e8d2b6784c94</guid>
      <link>https://share.transistor.fm/s/eddb8632</link>
      <description>In this episode we talk with Joshua Greene and Michael Katz, authors of iOS Test Driven Development by Tutorials. In this episode, we talk about:
- Why is test-driven development is important for any dev team?
- How is TDD best employed with iOS development
- What are some exceptions to test-driven development?
</description>
      <content:encoded>
        <![CDATA[<h1>Guests</h1><ul>
<li>
<a href="https://twitter.com/jrg_developer"><strong>Joshua Greene - @jrg_developer</strong></a><strong> - </strong><a href="https://www.raywenderlich.com"><strong>Senior Author for raywenderlich.com</strong></a>
</li>
<li>
<a href="https://twitter.com/themikekatz"><strong>Michael Katz - @themikekatz</strong></a><strong> - </strong><a href="https://www.raywenderlich.com"><strong>Senior Author for raywenderlich.com</strong></a>
</li>
</ul><h1>Book - <a href="https://store.raywenderlich.com/products/ios-test-driven-development">iOS Test Driven Development</a>
</h1><h1>Links</h1><ul>
<li><a href="https://github.com/Quick/Nimble">Nimble</a></li>
<li><a href="https://github.com/Quick/Quick">Quick</a></li>
</ul><h1>Previous Episodes</h1><ul><li><a href="https://share.transistor.fm/s/7247db7e">Episode 14: iOS App Architecutre </a></li></ul><h1>Show Notes</h1><strong>The Components of Test-Driven Development</strong><ul>
<li>Keep Your Iterations Small</li>
<li>Test First </li>
<li>Circular Progress of Testing and Developing Functionality</li>
<li>Avoid Testing other APIs (i.e. Integration Testing)</li>
<li>Use Mock Data for Outside Dependencies</li>
<li>Behavioral Driven Development vs XCTest</li>
</ul><strong>How to Encourage TDD in Your Team and Company</strong><ul>
<li>Make sure Maintainability and Specs are Met</li>
<li>Prevent Regressions with New Features</li>
<li>Regular Code Reviews</li>
<li>Tests Should Be Required Before Deployment</li>
<li>Encourage a Culture of Testing</li>
<li>Slow Add Tests to Projects Missing Them</li>
</ul><strong>Common Mistakes When Doing Test Driven Development</strong><ul>
<li>Following the <em>Golden Path</em>and not testing edge cases and errors</li>
<li>Following Test Coverage too strictly or not enough</li>
<li>Use Multiple Test Targets</li>
<li><strong>Write Tests First</strong></li>
</ul><strong>For Experimenting with New APIs</strong><ul>
<li>Use Spike Solutions to Experiment</li>
<li>Write Temporary Tests</li>
<li>Use Playground to Test Code</li>
</ul><strong>Continuous Integration Tools</strong><ul>
<li>Jenkins</li>
<li>Travis-CI</li>
<li>CircleCI</li>
<li>Xcode Server</li>
<li>Fastlane</li>
</ul><strong>WWDC and TDD</strong><ul>
<li>New Performance Tests</li>
<li>Test Plan for Xcode</li>
<li>SwiftUI, Live Previews, and Modeling</li>
</ul><a href="https://developer.apple.com/videos/play/wwdc2019/413/"><strong>WWDC 2019 - Testing in Xcode </strong></a><h1>Social Media</h1><a href="https://twitter.com/brightdigit"><strong>Twitter - @brightdigit<br></strong></a><a href="http://facebook.com/brightdigit"><strong>Facebook - BrightDigit</strong></a><h1><a href="https://www.instagram.com/brightdigit/"><strong>Brand New Instagram! - @brightdigit</strong></a></h1><h1>Full Transcription</h1><strong>Leo Dion (Host): </strong>So hey guys, how's it going? <br><br>[00:00:01] <strong>Michael Katz (Guest): </strong>Great. How are you?<br><br>[00:00:02] <strong>Leo Dion (Host): </strong>Good good, just been trying to catch up with WWDC. What's your general thoughts so far. <br><br>[00:00:07] <strong>Michael Katz (Guest): </strong>It seems like this is about the biggest one we've had since they introduced Swift. There's just so much stuff. <br><br>[00:00:12] <strong>Leo Dion (Host): </strong>Yeah, that's exactly what I was thinking especially with the UI changes. So have you started investing money to buy a $1000 stand? <br><br>[00:00:20] <strong>Michael Katz (Guest): </strong>Yeah, I wish. Fortunately at my company, we actually do video editing. We have editing bays already have racks of Mac Pros. So I assume that those will get upgraded with the new machines at the fancy monitor so I can go downstairs and drool over them when I'm not actually. It's working on my MacBook. <br><br>[00:00:36] <strong>Leo Dion (Host): </strong>Yeah, I mean that's the thing about these devices. They're not for developers like there for video editing like massive 3d rendering that kind of stuff and big production companies <br><br>[00:00:45] <strong>Joshua Greene (Guest): </strong>Maybe if you're doing like 3D games or something as a developer. I could see it being really worthwhile but for business or Enterprise type apps it may be a little bit of an overkill which is definitely pretty awesome. But day to day maybe not so much. <br><br>[00:00:59] <strong>Leo Dion (Host): </strong>Yeah, exactly. So if people want to tweet at us or we're also at brightdigit on Twitter at brightdigit on Instagram and Facebook. Let us know your thoughts on WWDC and any thoughts you might have about all the new stuff that's coming  out.<br><br>[00:01:15] Guys, so apparently you have a book coming out pretty soon. Is that correct? So go ahead and introduce yourselves to let me know a little bit about this book. <br><br>[00:01:24] <strong>Joshua Greene (Guest): </strong>So my name is Joshua Greene. I am a longtime author for RayWenderlich.com<br><br>[00:01:30] I've done everything from creating tutorials to books to videos. This is a new project that we're putting together to teach test-driven development it's called <em>iOS Test-Driven Development by Tutorials</em> <br><br>[00:01:45] <strong>Michael Katz (Guest): </strong>And I'm Michael Katz and similar story. I've been with Ray Wenderlich for a number of years and also done books tutorials.<br><br>[00:01:53] Spoke at the RW Devcon. Haven't done any screen cast yet, but maybe someday and they are passionate about test-driven development and we both came I think independently to the idea of writing a testing book and editor-in-chief put us together. And here we are most of the way through it.<br><br>[00:02:11] Just getting ready to finally finish it up. <br><br>[00:02:13] <strong>Leo Dion (Host): </strong>So test-driven development, I remember once it was like almost more than half decade ago, probably almost 10 years ago, I went to a conference in Chicago and I think it was Bob Martin who gave a talk on test-driven development the idea being like first you write your test and then you write your code.<br><br>[00:02:33] Is that kind of the gist of it or what are the components of test-driven development? What exactly does that mean? <br><br>[00:02:39] <strong>Joshua Greene (Guest): </strong>Yeah, definitely writing tests first is definitely a big part of it. Keeping iterations small. I think test-driven development is all about, you know, writing one small thing you write a small test to implement something that you need to get implemented.<br><br>[00:02:54] You show the test actually doesn't pass you implement. Whatever code is required to get it the pass and then you verify it passes. And you just repeat this process over and over so that when you finally, you know, got your app out not only have you got all the features written you've got all of the tests that you're going to need alongside it but it's not like you just write all the tests in advance. It's literally a small step by a small step is kind of what makes it different and special. <br><br>[00:03:20] <strong>Michael Katz (Guest): </strong>It's a circle you just go over and over again at a little test and yet add some code to fix that test and you test the next piece and you add the code for that and so on so you're always in lockstep. <br><br>[00:03:31] <strong>Leo Dion (Host): </strong>So the problem I have had with test-driven development and iOS is some of the stuff that is pertaining to like the UI or perhaps like test-driven development, sometimes you have different screen sizes, obviously, you might have to deal with something like core data or networking. How do you overcome those challenges when you're trying to do test-driven development?<br><br>[00:03:57] <strong>Michael Katz (Guest): </strong>I think we think about using TDD. Is that it really forces you to think about what your code is doing? And so if you want to make sure that your code is testable and you're starting out with no code. You're going to write your code in a way that is so if you have a dependency on something external to the system like a database or an API or screen, you'll want to write your code, you know, where you have a model. For instance any test the models all the business logic and the data logic and so on and then you can add the UI on top of that and then use a different type of testing like UI tests to handle making sure that the UI is correct, but that way you're certain that your business logic and state is consistent and complete before you even get there.<br><br>[00:04:36] <strong>Joshua Greene (Guest): </strong>With TDD, even if you're following TDD from the get-go there. It Is not to say that you have to test everything per say. For example, if you're going to be caught by another their way like at the compiler is going to throw an error if you actually hit an error while you're doing TDD that counts as a failed test <br><br>[00:04:54] with the UI portion, I typically look at it as if it's something I can configure in interface Builder, I don't, you know, not necessarily going to test that too heavy in terms of TDD because it's something I can see on screen and might mention there's other tests that I can use if I really want to put test in place for UI testing and so.<br><br>[00:05:14] TDD is really about you know, structuring your code in such a way that it is testable putting in protocols instead of talking directly to a database for like Mike says, you know talking to models that are structured in such a way that you can actually put test where you get the biggest bang for your buck as far as testing goes.<br><br>[00:05:30] <strong>Leo Dion (Host): </strong>So it sounds to me like we're talking here about kind of this is similar exactly to what we talked about in our last episode. When we talked about architecture and the fact that you need to architect your app around models, and it sounds like you're basically talking about what specially when it comes to Swift, you know, doing protocol oriented programming and using mocks in your testing as opposed to directly connecting with things like user interface or your database or your network. Is that what I'm hearing?<br><br>[00:06:00] <strong>Michael Katz (Guest): </strong>Exactly? In the book. I have a chapter where we're building at a fitness app and instead of connecting to Core Motion we basically build a protocol around it so we can Mock and stub data and act as if these things were happening live, but they're actually just being faked by the tests.<br><br>[00:06:17] And that's the type of thing you would use for a pretty much any kind of Hardware or network or UI that you can do in your code. So we separate the logic and the pieces that are about the app that are unique from the things that are handled by the operating system. <br><br>[00:06:29] <strong>Leo Dion (Host): </strong>Yeah, that's awesome. And I think that's one of the things I really like about TDD is that not only is it a great way to make sure your code actually works in all cases but it also encourages healthy architecture in the end because you're allowing for different things to be plugged in like I need a fake core motion or health kit or core data or whatever. I can fake it in my test so that way when I test the actual application like you said those are different tests, they're not tdd necessarily. <br><br>[00:07:01] <strong>Michael Katz (Guest): </strong>It's particularly true when you're testing error condition. So if you have a logic in your code that handles detecting when a call is dropped and then when you reconnect to restart something in this kind of hard to test especially in a CI situation where you're building and testing your app on a server that's plugged into gigabit Ethernet.<br><br>[00:07:20] So by using TDD enrollment you've already separated out that networking layer. So you can just Supply errors and different combinations and ordering of conditions to test out that your app is going to handle those appropriately even if they're very difficult to test it manually. <br><br>[00:07:34] <strong>Joshua Greene (Guest): </strong>Even if you're starting from a point where it so you don't have a completely new application.<br><br>[00:07:39] It's not to say that you can you know, not introduced EDD later on, you know, a lot of these same principles of you want to talk through something else. Even if you directly coupled yourself to talking to a networking calls or to core data or whatever, you know external API is. You're talking to that directly.<br><br>[00:07:57] You can break those dependencies and you know move your architecture in the right way, even after the app is already, you know launched or had a few versions out. We actually have some chapters in the book that go into details about taking a legacy based app and moving it towards TDD. So. I'd say that tdd is a great start if you're just kicking off an app, but even if you're not you can still use and consider TDD just you know in sure you're writing those tests first and again, you know, just making sure that you've got the correct coverage and bang for the buck as far as testing goes.<br><br>[00:08:28] <strong>Michael Katz (Guest): </strong>Yeah, you can start writing test at any time in this way. So even if you have an app and even if you have tests that you've written sort of after the fact to validate your behavior when you write new code you can start doing TDD at any point. <br><br>[00:08:40] <strong>Leo Dion (Host): </strong>So what are some challenges that people typically face when it comes to developing like in Xcode for iOS that's different from say like your typical vue.js developer or PHP or python?<br><br>[00:08:57] Do you guys typically use the standard packages like the XC test stuff that comes with xcode and iOS, or do you use your own custom packages for mocking or what are some challenges that you've seen people face specifically in iOS.<br><br>[00:09:12] <strong>Michael Katz (Guest): </strong>I  think Xcode default is he test case is a little bit cumbersome is very much based on the old Xunit or Junit type testing which is gosh has to be 20 years old at this point. Yeah. I think it's out of the 90s where it was a long time ago. <br><br>[00:09:28] <strong>Leo Dion (Host): </strong>It was a long time ago. <br><br>[00:09:29] <strong>Michael Katz (Guest): </strong>So my company we actually use a form of what we call behavioral driven testing. So it's more descriptive. We use of Frameworks called Quick and Nimble. Which is a layer on top of XC test, so you still run the test and xcode and you get the same reports out that you do but it's a different API and XCtest so it makes it you know easier to read the test understand but it also because it's a layer on top is slower than using actually test, directly so it's the trade-off there. <br><br>[00:09:59] <strong>Joshua Greene (Guest): </strong>I'm gonna have to disagree with you a little bit my in that I would say - yes Quick and Nimble is fantastic as far as making things more descriptive and so forth. But to me like it's more syntactical flavoring if you will then it is a strict requirement <br><br>[00:10:14] XCTest very much so used to be you had to have something in addition to it. You had to have some way to do like asynchronous testing the very first version of XCTest didn't really even provide a way to set up any sort of expectations. I'd say today though, if you really want to and a lot of my day-to-day stuff, I typically unless there's a strong reason why I like you're saying unless I need to do it and some sort of behavior descriptive way that I want to actually set upfront i don't necessarily opt for going to something else always just from the get-go. You can very much so use XCTest right out of the box and it is testing completes - well as complete as you can get with Swift and really having true mock support, but you can basically do everything with XCTest that you can do with Quick and Nimble.<br><br>[00:10:59] It's just like you said, maybe it's a little bit more verbose or maybe there's a little bit that you might do differently versus some of these BDD type Frameworks that give you some nice syntax.<br><br>[00:11:10] <strong>Leo Dion (Host): </strong>I've worked with like mocha for like nodejs and some JavaScript stuff. I think that's behavioral driven, but it sounds to me like Quick and Nimble gives you that like syntactical sugar in a good way to like explain what each test actually does.<br><br>[00:11:25] Where as XCTest doesn't give you that but it does give you the basic logic and API for doing just logical tests. Which is more or less what TDD is really driving at. Is that correct? <br><br>[00:11:37] <strong>Joshua Greene (Guest): </strong>Yeah, I'd say the XCTest doesn't give you the naming syntaxes or so forth or you know, like the nice thing about BDD and really the main difference, you know, but on the other end of the things I'm close to the plain vanilla here than Mike it sounds like. <br><br>[00:11:49] The nice thing about the BDD Frameworks like Quick and Nimble is it will provide you the ability to say okay here's a descriptive string describing what I'm actually trying to test here. You can do the same thing using method signatures and that's actually what we show in the book there.<br><br>[00:12:03] [That] is if you named your test correctly, you know describing what you're doing describing what is actually being tested in the expected outcome. You can get a lot of the same benefits from the just a vanilla XCTest. But like Mike said it's you know more so by naming conventions that you set up less so directly supported by XCTest itself.<br><br>[00:12:23] <strong>Leo Dion (Host): </strong>So I want to jump a little bit more into TDD and talk about some of the terminology and some of the stuff that's involved. So, we talked a little bit about like mocking what exactly is mocking and what's it used for when it comes to test driven development. If there's any other terms, I'm forgetting that are components of test driven development let me know. <br><br>[00:12:45] <strong>Michael Katz (Guest): </strong>Yeah, so. When you're running tests, there's a whole Suite of objects that are commonly called test doubles where basically you have an object. That's just for testing that parallels production code [or] main app code. <br><br>[00:13:03] So a mock is an object that behaves like the code. So for instance you have like a mock network connection or like an nsurl session. And if you supply a command to that like low data, your mock is responsible for handing back some set of fake data that you supplied to the test knows ahead of time what's going to happen and it's going to succeed or not with mocks in particular it is to verify that certain methods or behaviors happen along with that. So if you call we go back to the mock data URL idea that you would verify that the data was returned correctly or if an error was made if you set it to make an error that the error callback gets called and so on. You can also verify that certain methods are only called once or twice.<br><br>[00:13:49] So if you have a tertiary object further down so that when you save an object to a database you want to make sure that you're not saving that same thing twice so there's no duplication in the code. You can verify that using a mock by adding methods to count the number of times a method is called and so on. I 'm not sure that was clear but maybe Josh can help here.<br><br>[00:14:06] <strong>Joshua Greene (Guest): </strong>I agree with what you're saying there Mike the only sort of difference in my mind as far as Mocks vs. a test double there. A test double may not provide like verification that behavior like you verify that a sort of method was called.<br><br>[00:14:22] It may just accept those methods and just fill in as a dummy, you know, the simplest way to make just like a test double in my mind would be you know subclass something out or conform to a protocol and then implement nothing. And those are basically the two options that you have in Swift is you either implement a protocol to create a mock and then you can you know, just pass that to either be an initializer or you know setting it as a property.<br><br>[00:14:46] Or you can subclass something else and again, you know pass it in but one way or another you have to be able to insert yourself in this hierarchy of getting these calls. When creating a mock there we're actually validating whatever happens happens in you know, maybe the correct order or maybe it's that it happens the correct count whatever you're trying to actually accomplish at the time there we're not just filling, you know, just a dummy requirement.<br><br>[00:15:10] But with that said, sometimes we could create a mock it may be that the initializer requires you to have some sort of other object, but you don't really care you're going to intercept calls and inbetween you might just create something. That's just an empty object. And that's what I call like a test double dummy to me.<br><br>[00:15:25] So I guess in a way my point is the mocks are a special type of test double that provides verification. <br><br>[00:15:31] <strong>Leo Dion (Host): </strong>So basically like for instance, I have a protocol or a mock of what a network called would be guy just like create a mock that pretends to do the call and then have like a Boolean property says like is called and just set it to true and then that way I can verify that that network call has been made.<br><br>[00:15:48] Is that kind of what we're talking about? <br><br>[00:15:50] <strong>Joshua Greene (Guest): </strong>Yeah, then the simplest thing would be holding onto a boolean and just saying that it was actually called. But you know, especially networking. You're likely going to need to return something. Right?  <br><br>[00:16:01] <strong>Leo Dion (Host): </strong>Right exactly. So then you return some sort of like mock data based on that network call of some sort.<br><br>[00:16:07] <strong>Joshua Greene (Guest): </strong>Exactly and with the mocks or that test double is you could actually have like with a real networking API you got to go hit a server. It's going to take however long to connect to that get data parse it return it that you've got the full stack there right. Versus with the mock you can immediately like asynchronously pass something back or if you want to turn it in for you know, take it from an asynchronous to synchronous call.<br><br>[00:16:29] You can do that with the mark. So you eliminate having to talk to anything real then actually using a mock. It makes your test much much more faster and much more consistent as far as what you expect to happen. Given certain criteria, you can set up the criteria. <br><br>[00:16:44] <strong>Michael Katz (Guest): </strong>Yeah, absolutely. <br><br>[00:16:45] <strong>Leo Dion (Host): </strong>Are there any libraries or Frameworks that you would recommend to help create those mocks or do you just pretty much implement whatever protocol is going to pretend to do like networking or database or whatever it is?<br><br>[00:16:58] <strong>Joshua Greene (Guest): </strong>For me, I guess the sort of nicety that Objective-C had but Swift is actively moving away from this is the ability to actually have mocked that are true mocks and that you say all right i want to mock this object and it magically happens for you using things like OC mock was a very popular framework that allows you to do this in Objective C. <br><br>[00:17:20] This isn't possible in Swift, because the Swift team actively wants to move things from the runtime to compile time and for production code that makes a lot of sense because anything that you can move to compile time, you can catch an error at compile time you throw an error it doesn't build, you know, the developer has to fix that.<br><br>[00:17:38] If something gets all the way through runtime, you likely have a runtime crash. So they're really trying to get rid of those runtime crashes. Unfortunately, that makes it basically impossible to do what OC mock was doing with just pure Swift because there's nothing to you know, put yourself in between as far as a runtime that you can actually intercept messages there.<br><br>[00:17:57] Instead, you basically only have two choices you either conform to a protocol and implement all the methods there or you take whatever real object is and subclass that and just override whatever behavior such as you know, what you're talking about maybe you capture a boolean instead of whatever the superclass - the real object would have been doing.<br><br>[00:18:17] Now with that said you could definitely do those by hand. You have no choice as far as doing this at compile time. You have to compile something so you can write it by hand or there are a few niceties out there like Sourcery for example is a nice tool that allows you to write code. Do it if I hear you say here's a template that I want to use anytime that I see this protocol, you know, that may be conformed some auto-generating or something Sourcery can write that for you.<br><br>[00:18:42] So one way or another it has to be compiled time, but there are tools out there to help with some of you know, the harder bits of that or the annoying bits or boiler plate bits.<br><br>[00:18:50] <strong>Leo Dion (Host): </strong>I've just started playing around with Sourcery. Sourcery is amazing what you could do with it. Yeah. Usually what I end up doing is just implementing that protocol in creating my own mock in the test Library.<br><br>[00:19:00] That's essentially what I do because like you said you Don't have that ability that Dynamic runtime ability to just like create something on the fly like you can with Objective C. <br><br>[00:19:10] So what are some other tips or tricks you have when it comes to like TDD besides mocking trying to think if there's anything else that I think is a major component when it comes to TDD but mocking is a big one and if you have a healthy architecture then I think you're good with mocking.<br><br>[00:19:29] I guess we'll jump into like what are some ways you can encourage TDD in your team like what are some ways that like somebody who was higher up like a CTO or a manager can make sure that we're getting the tests that we need and that code is actually being tested and  written in a way that it is testable.<br><br>[00:19:50] <strong>Michael Katz (Guest): </strong>There are two things especially if you're talking to a CTO that they like to hear is that maintainability and scalability and making sure that you have a complete working set of tests allows the team to be more efficient and add features faster in the future.<br><br>[00:20:05] So. You know that you can add something without worrying that you're going to break existing behavior, especially as the app gets more complicated over time we want to make sure that as people come and go in the organization or just as you forget because you're doing a million different things that there's some requirement that doesn't get lost because it was never really written down in a spec somewhere but there's a test for it <br><br>[00:20:26] <strong>Joshua Greene (Guest): </strong>Yep, definitely maintainability is a win factor if you will as far as not having test versus having test. Also, prevention of regressions, you know Mike is kind of get up there to if you don't have any tests not only is it something that it may be that nobody on the team understands how it is because tests form documentation and maybe that later on you introduce bugs that you fixed in V1 yeah, that's a sad thing to actually see.<br><br>[00:20:53] The wins though are definitely those lines. As far as how to get your team to do it though. I'd say first and foremost, especially if a team of any sort of no more than just a couple developers you should be promoting code reviews and in the code reviews if I you know, see somebody on my team and they put out a code review that doesn't have any unit tests I'm immediately rejecting it and it has to have tests in order to even be considered to get into production.<br><br>[00:21:21] How do you know if it works without tests? So there is sort of a you know, a philosophy of you must do testing, but you can obviously write unit tests without following TDD. I'd say as far as if you want to get your team to do tdd and you know bring up this test first mentality and get the benefits that TDD. Provides with, you know you write tests for as you're going to get better coverage and typically things will be designed any more testable way versus trying to do that after the fact I'd say the first and foremost your team needs to know how to do it.<br><br>[00:21:52] If your team doesn't know test-driven development or know and just have any experience in that area. It's hard to say go and do test-driven development with that said, you know Mike and I you know part of the reason for writing this book was we looked at the community and said, you know iOS community knows about unit testing knows, you know about these things to some extent but we don't think there is a strong grasp for how TDD works. So that was a strong part of why we're actually putting this book together. <br><br>[00:22:20] So I'd say check out, you know things like art book check out the raywenderlich.com for you know, where you can go to get these materials to help get your team up to speed but you know, once they're up to speed keep the bar high make sure that there's something in place like code reviews to make sure that it's actually happening <br><br>[00:22:35] <strong>Michael Katz (Guest): </strong>When I've rolled it out on teams, usually what I do is I write a feature in with the team there so that we can serve like a pair programming or four-person five-person programming to see the process and go through it because it can be a little strange if you're not used to doing it a little slow in the first few days until you get the hang but once you do it, it's just like, you know the second nature because it's just this iterative step. <br><br>[00:22:59] So having someone that can can walk through and hold hands a little bit also makes it easy to make that transition. I also have a culture of testing that really wants this and is willing to allow developers the ability to take it on. <br><br>[00:23:13] <strong>Joshua Greene (Guest): </strong>I'd say as far as things that prevented him from going to this especially if the apps been around forever. If you've got an app and it's got you know several hundred or thousands or more classes in it just saying, all right, you've got to do this cycle where you build and compile every 30 seconds or are you know faster than that. It may take several minutes to compile the full app let alone run all the tests, right? <br><br>[00:23:36] You do have to do this in a way where one thing we are actually going to release a chapter on this in the book even is that you need design not only the core app in a way that it can be testable but there's nothing wrong with actually saying you can pull out a module and so you've got a feature that's implemented just in a module and all of the code for what it's doing is within that module any sort of externalities to its using this third party API or maybe even a different piece of your core application you can put a protocol in between. <br><br>[00:24:05] So breaking things up in a way that okay. Here's this small bit here. That's a modulo a different piece that you accomplished has a different goal or something else. That's a different module. So you go from this huge monolithic app to alright a set of libraries or frameworks, whatever you're often used based on your use cases that can be compiled to really quickly - you can run the test against them really quickly and you know can be changed pretty much independently without affecting the rest of the code base. That's fantastic. That's the you know, code that isn't tightly coupled anymore. It's Loosely coupled to the rest of the system. It's testable. It's something that can scale, you know as much as you need it to. <br><br>[00:24:42] <strong>Michael Katz (Guest): </strong>One of the things that was a game-changer for me and doing this with a existing large app was just accepting that it was okay to do TDD for just a new code and any file that was their existing did not go through that level of rigor and acceptance as it is and then in the book also we described how to like slowly add tests for the things that were there before so you can mix and match TDD even though what works best in doing it, you know straight up fresh you can add it into your process slowly and not have to to write, you know, three thousands tests before you can start writing that code because usually you're under some deadline to get something out there.<br><br>[00:25:22] <strong>Leo Dion (Host): </strong>Yeah. I think that's a big part about introducing anything new to a project. I'm thinking about it this week with SwiftUI like when they introduce Swift at you shouldn't go in and rewrite your whole project to be in Swift. If it's an Objective-C. You shouldn't, you know rip out every storyboard and convert everything to SwiftUI for a thousand reasons and I think just with tdd like you shouldn't just go in and start writing tests for all of your existing code.<br><br>[00:25:46] Like I think it's just easier to slowly introduce it as you write new features and naturally over time. It will develop that like, most of your code will end up being test driven in the end. <br><br>[00:25:56] <strong>Joshua Greene (Guest): </strong>Definitely, you don't need to just jump into here and go right to the deep end. You can start by just adding it like Mike said for new code only or identify hey, here's this core part of the app. We really need to make sure that this works or we need to make some changes around this. How can we make sure we're not going to break in the process? There's nothing that says you can't put in test place there. As you need them and identify them you don't have to go back and just add I actually be against this at my teens come and said we want to introduce TDD.<br><br>[00:26:26] I'm going to add tests throughout the app for I can chip it in new features. No, that's not a good thing to do. It's probably going to be something that you're going to waste time with that. So adding them slowly over time, especially for the very big apps may actually be not only the best choice, but maybe the only choice if you actually want to, you know, continue moving forward with delivering and, you know creating new features at the same time.<br><br>[00:26:48] <strong>Leo Dion (Host): </strong>So what are some other mistakes you think either with teams that are getting started with test-driven development or just teams that are doing thinking that they're doing test-driven development but actually, they're not. What are some common mistakes that teams and developers make when they're doing TDD.<br><br>[00:27:04] <strong>Michael Katz (Guest): </strong>So I think you know one of the mistakes is only covering the happy path or golden path through the code. So you want to make sure that you're testing the edge cases and different combinations of parameters. And if you find that your function has, you know, 4200, you know different combinations of input and that's kind of a code smell there. It may be an indication to break things up into smaller pieces. <br><br>[00:27:30] <strong>Leo Dion (Host): </strong>How do you create enough test data so that you know, you're testing as many cases as possible. Like let's say you have a function that takes in addition like does addition does that mean that I need to test every addition problem possible? What would be a great way to like break that down? <br><br>[00:27:45] <strong>Michael Katz (Guest): </strong>With math, you've got your basic, you know, making sure that you have you cover zeros in a negative values values at the max, you know max float, max int those type of things when you're doing it. Those are probably more academic. I think most apps are in the putting JSON into a table sort.<br><br>[00:28:03] So for their you know, your bounds or more, you know, did you get back an empty array to have text you know for a field that's 6 megabytes when you're expecting just a sentence, you know those type of things. It's probably a good thing. I get help somewhere. That's like common things to look out for for that.<br><br>[00:28:21] If you have code like an if statement or branch or you know, I do catch those are pretty good indicators that you should have a test at least covers that so you can use the test coverage as a way of least making sure that you've executing the code. <br><br>[00:28:34] <strong>Leo Dion (Host): </strong>Yeah. That's what it sounds like is like you're basically talking about test coverage which if I understand correctly is like basically making sure that every line of code. Xcode does it actually I don't know about you guys but it seems to do a decent job as far as the test coverage instrumentation. But like it'll actually tell you if you've covered every if branch and or switch case in every line of code and it gives you a percentage that's seems pretty reasonable.<br><br>[00:28:59] <strong>Michael Katz (Guest): </strong>Yeah, and that's a good start. It won't cover the out-of-bounds issues or overflows underflows the errors with formatting and things like that because you're still running that code so you can. End of what the function is trying to do as well, but it just covers a good way to start.<br><br>[00:29:14] The tricky thing we've run into with test coverage those we have multiple test targets and [with] Xcode I haven't found a good way to sort of sum up the coverage across multiple test targets and maybe the new test plans handles that. <br><br>[00:29:27] <strong>Leo Dion (Host): </strong>What do you mean by test targets just briefly? <br><br>[00:29:30] <strong>Michael Katz (Guest): </strong>So just like you can have multiple targets you can build Frameworks within a project, multiple apps. You can build multiple test targets so you can group your tests based upon you can have test that just cover networking or databases or test the cover each framework and a test suite and in your scheme, you can specify that when you run the test action which test targets get run and so we've broken up our app into many different libraries and each library has its own test target so we can either run all the suites or if we're just modifying code and one of the Frameworks we just run the tests when you're doing a local development. <br><br>[00:30:07] <strong>Joshua Greene (Guest): </strong>That's a good reason to you know, as far as why coverage isn't the end-all be-all story. So it may not be you know, especially in Mike's case there because he has the multiple targets. It isn't actually a true story in that they could be that you've got two targets and they've each got 50%/50% do you have a hundred percent coverage?<br><br>[00:30:25] Is there any overlap between the two of them? It's difficult to say right? So I'd say another sort of common errors, especially as far as management goes is you know giving too much emphasis to test coverage. Test coverage should be something you look at, you know, if you have zero percent versus 80% Obviously I'm going to say oh 80% is probably covering more than you know, the closer you get to the zero, but it's not the most important metric if you said as a manager I'm going to say a hundred percent of you know, the code must be covered by tests. I don't think that's a good goal. <br><br>[00:30:58] You know, it doesn't tell you actually, you know very much for what that is. All it indicates is a particular line of code was executed. You know, was it executed with the right inputs?<br><br>[00:31:07] Was it executed with all the edge cases? Like Mike is talking about. I don't know. So my point is use it as a starting point. But that's not the only thing you should consider you got to look at, you know are the cases that are the edge cases are the normal flows are all you know, all of the entire picture is what you should actually be considering <br><br>[00:31:26] The nice thing about doing tdd, by the way instead of instead of writing these after the fact and adding the unit test on after you've got all the if else has or switches or whatever your code is. Tdd says in order to add new functionality after I did the test first. So, TDD for the most part is going to be more likely to get you in a case where you've covered all of these edge cases. Now in certain times, especially with things like the out of bounds, you might miss something right and you might miss you know, here's this one weird edge case we didn't think about and you know, we accidentally wrote code that either car forms correctly that's a win or you know misses this thing without actually having to test in place. That's okay even after you do TDD or you know, you have test if you identify you're missing a test add a test. Nothing that says you can always go back and you know add more where you need. But you know knowing up front you got most of everything. That's what tdd, you know provides you a stronger guarantee of than just adding test willy-nilly.<br><br>[00:32:24]<strong>Marker<br></strong><br>[00:32:24] <strong>Leo Dion (Host): </strong>One question I have when I am right starting to write like an app is sometimes I need to like explore a particular API and just to make sure I have the functionality of that API down before I've even gotten to a point to understand what to test .<br><br>[00:32:42] So for instance you're talking like Core Motion or  something like HealthKit. I need to understand how HealthKit expects me to get the data back. So I end up actually writing the code before I've even written the test. How do you explore tdd when you're like working with a brand new API that you've never even worked with?<br><br>[00:33:03] <strong>Joshua Greene (Guest): </strong>For me, there's nothing wrong with doing a spike solution. So I've never used an API before how good is my code actually going to be the first go around that, you know, I'm actually touching or using this thing. Maybe it's okay, but probably not great. Right I can go and explore this in a test app and compiling just a few classes is going to be way quicker than compiling my entire code base and just play with it.<br><br>[00:33:27] You know, maybe n after I'm done I can look back and say well this isn't actually too bad and then I might actually rewrite whatever I did in a TDD fashion and you know improve it from there or I might say, oh this code is I mean, at least I learned what I was trying to learn but is actually pretty off o it's not going in my case.<br><br>[00:33:45] I can entirely throw away a spike that takes me just an hour a couple hours to do and go back and then you know implement it in a correct TDD fashion. That's you know, one way the other way is if you do have some notion of what it does and how it's supposed to work. You can write tests in advance that has the, you know, just the behavior of how the thing works that you're trying to interact with things like Core Motion might be harder because it's actually doing asyncronous things or requiring you to move around in the real world for those sorts of bits. They are, you know, it may be that you can't do a lot of the testing upfront but other sorts of APIs like maybe making REST-ful calls. You can wait on a REST-ful call and you know, accept that I'm just going to write these tests as a temporary thing to see what it returns.<br><br>[00:34:31] There's nothing wrong with doing that and you know just using as experimentation. So for me if I'm touching a new thing. Those are my go to either use a spike solution that I may or may not keep and if I do keep I'm gonna have to write tests for it in a TDD fashion or just write tests that are temporary tests that are for exploratory only and throw them away after I'm done because they're not actually useful or that might be useful for learning but they're not useful for keeping in my project forever.<br><br>[00:34:57] <strong>Leo Dion (Host): </strong>It's almost like a rewrite like you basically explore the solution right and that kind of does the behavior more or less and then go through and then rewrite it with a little bit more architecture and tests within it. Is that what I'm hearing? <br><br>[00:35:10] <strong>Joshua Greene (Guest): </strong>You never used it before right so if you've never used an API, you're not going to know how it works or what's best to do with it.<br><br>[00:35:16] What's not to do? Your first solution probably isn't going to be great. So a lot of times it's worthwhile to throw out whatever you're doing because it's more of a learning thing than it is anything that's going to truly be worthwhile to put in production <br><br>[00:35:29] <strong>Michael Katz (Guest): </strong>100% for me. One of the things that we have in our workspace is we have a couple of playgrounds where we actually import the local frameworks for our project. So if we wanted to like test how something new interacts with the code, we've already built we have that ready to go. And so you can spend some time in the playground adding a code calling a new API seeing how that goes. Obviously it doesn't really work for Hardware dependent things but for learning Core Location or you know something with SQL some like that there's definitely work there.<br><br>[00:36:00] <strong>Leo Dion (Host): </strong>Is there anything else you wanted to talk about when it comes to test driven development before I ask more about WWDC?<br><br>[00:36:07] <strong>Michael Katz (Guest): </strong>I think it's becoming more and more industry standard especially and I'm sure it's been in the server-side world for a long time. But in terms of the app world, I know I've had conversations with my executives and they start talking about it in a meeting and it usually takes a couple of years before they learn about whatever the cool new thing is.<br><br>[00:36:27] I think going forward we're going to be living in a world where this is more natural and each year Xcode gets a little bit better in terms of supporting the test, especially in terms of test running and test performance. One thing we do really touch on is how you some kind of continuous integration going which I think is it's not essential because TDD is just a methodology but in practice if you have a server that's always running these tests it makes it easier to catch things and make sure that there are issues with merges or multiple developers working on something not everyone may run all the tests before they submit. <br><br>[00:37:01] <strong>Leo Dion (Host): </strong>Yeah, let's talk a little bit about continuous integration. What have you done as far as that's concerned? Like I've done like open source projects on GitHub and I pretty much run Travis CI for doing my you know, simple essentially running my tests and testing out on different operating systems and different devices.<br><br>[00:37:21] What are some ways that you've done continuous integration? How have you seen benefits from that.<br><br>[00:37:25] <strong>Michael Katz (Guest): </strong>We use Jenkins. So we have a local server that actually we have I don't know how many Mac Mini nodes that run our tests and we use is a product called FastLane, which I think is pretty common in the iOS world.<br><br>[00:37:39] It's kind of like the. It sits on top of xcode build and allows you to basically specify the configuration for building and testing and you can run multiple tests and upload iTunes connect and things like that as part of the service but the important thing there is we have probably about 50 Engineers that contribute to our code base and so it's essential to make sure that what we have is always in good working order.<br><br>[00:38:04] But if you're working at a small team or you're working by yourself Travis or Circle CI are good solutions. Xcode server is what Apple keeps pushing. I haven't seen anyone use that in practice, but it has all the Integrations with Xcode so if you're able to use it and you're just building an iOS or macOS app and I think it's going to work out pretty well for you because it knows all about Esco tests and code coverage and things like that. <br><br>[00:38:30] <strong>Leo Dion (Host): </strong>Yeah, I've worked with xcode server. I've actually set up a virtual machine to run whatever the feud like, I'll probably set up one in a week or so and using Catalina and then put Xcode server on it. It's pretty decent like there's a lot to it some tweaking and things that you have to consider when you set up your project. But yeah, it works pretty decent. <br><br>[00:38:48] <strong>Joshua Greene (Guest): </strong>Yeah, so I basically used all of them myself and I'd say given the choice between using nothing or picking at random even right the picking at random is gonna be better than using nothing at all. Especially, you know, the more engineers you have the bigger bang you actually get for wanting to use continuous integration and sure at some point it's just strictly required frankly.<br><br>[00:39:10] You know, like my team is pretty large, but if you have maybe one or two developers. Especially if you're following TDD, I don't know they're strictly required for for that size per se because you do want to be constantly just running all over the test. Right? But once you reach a certain point where you have to ensure, okay, the projects is just so large or you got so many engineers that you really need to have some safeguards and checks in place other than just you know, Cowboy. Everybody agrees this is the right way to do it. Continuous integration definitely is a requirement. You know and Xcode server is a good one will be you know, especially if you have a Mac Mini or something around or haven't done it with the Virtual Machine although the now I want to try so that's a good suggestion but it's an easy thing. <br><br>[00:39:52] <strong>Leo Dion (Host): </strong>Especially if you're doing anything or if you're going to be trying new stuff, you probably want to put Catalina on a VM instead of running it on your main machine that's living on the edge. If you want to do that <br><br>[00:40:02] <strong>Joshua Greene (Guest): </strong>The Mac minis are still pretty cheap so our group uses just a small fleet of Mac minis as well there, but the cheaper route is going the VM for sure. So I guess maybe parallel or something depending on how you're running it and I suppose maybe have to buy the parallelization software. I don't know. <br><br>[00:40:20] <strong>Leo Dion (Host): </strong>Yeah, great guys. Thank you so much for coming on the show before we close out. You want to talk a little bit about your book again. <br><br>[00:40:28] <strong>Michael Katz (Guest): </strong>It's an iOS test-driven development by tutorials available now at raywenderlich.com we have an early access that has the first third of the book and the whole book should be out in the fall. It covers the whole TDD from starting from nothing. We have a whole big piece networking because there's almost every app has that and It's tricky to test we have chapters on how to work with a big legacy app especially where legacy means no tests or insufficient testing.<br><br>[00:41:00] It goes through each of these things step by step. So you follow along. So unlike other books that may give a more theoretical approach emerges say here's what your code should look like. This is very step by step you follow along going through adding the tests adding the test targets, the whole shebang.<br><br>[00:41:17] <strong>Joshua Greene (Guest): </strong>I'd say we've done the hard work for you going through the Apple apis and you know have a very experienced developers that you know Mike and I've used this for several years. Mike has used this for several years here. You don't want to learn all this stuff by yourself. It'll take longer. It'll be harder to do if you want to get up to speed and get running quickly.<br><br>[00:41:36] It's the best way just get the book save yourself some time. Save yourself some sanity happened to not go through those Apple API to yourself and get running quickly and  get up to speed quickly. <br><br>[00:41:47] <strong>Leo Dion (Host): </strong>Yeah, that's fantastic. I'm really looking forward to take a look at this book and just learning some new ways to do TDD when it comes to Xcode and iOS.<br><br>[00:41:57] Before we close out, do you guys have any thoughts on some of the new stuff from WWDC and how it pertains to test driven development? <br><br>[00:42:06] <strong>Michael Katz (Guest): </strong>Unfortunately, it's about six hours from the what's new in testing in Xcode. So what I've seen so far as just been what they've covered in the what's new in Xcode and the State of the Union, but it looks like that there's some new methods for.<br><br>[00:42:21] We've had the measuring blocks before that measure the time your test takes I know it looks like you can also measure memory usage, disk usage, and a bunch of other things which is really great. They're not really like for test-driven development. But when you're building reliability tests and performance tests, and with those are going to be pretty handy and then there's this new thing called test plans which basically.<br><br>[00:42:42] Takes all the management of tests from the scheme into a separate top-level object in your project and you can rerun your tests against multiple configurations. So you can run all your tests in English and then run all the tests again in French or whatever in one click. They also have four different test ordering and different runtime checks and all that so it takes one manual step out of the loop, but I wouldn't necessarily think it's super revolutionary. What do you think Josh? <br><br>[00:43:10] <strong>Joshua Greene (Guest): </strong>I'm totally with you as far as the new features. They look pretty cool for Xcode goes. I also wanted to point out that with the SwiftUI they've really gone very much so protocol oriented development.<br><br>[00:43:22] That's great news for things like testing and test driven development here anytime you can put in a protocol in place you can insert a mock very easily into whatever set up it is so I'm very excited to see how they've really architected SwiftUI and it looks like just testing is going to be a lot easier compared to some of the previous solutions where you've got concrete class and just figuring out how you're going to mock that out, you know via subclass or whatnot may have been very difficult with pure UIKit.<br><br>[00:43:51] It looks like SwiftUI is gonna help us quite a bit in the testing realm. So I'm very excited to dive into it and learn everything about you know all the cool stuff that they've done and cool stuff to make developers lives easier with testing. <br><br>[00:44:04] <strong>Leo Dion (Host): </strong>You're talking about the difference between like UIViewController, which is this class.<br><br>[00:44:08] You have to subclass as opposed to like the SwiftUI View protocol which you can pretty much mock up any way you want to right? <br><br>[00:44:15] <strong>Joshua Greene (Guest): </strong>Exactly yeah, the whole UIViewController thing, there's so much concrete stuff in that it's difficult to truly create great mocks with it. I mean you can, you know, create a mock by subclassing uiviewcontroller, right.<br><br>[00:44:28] But had that been a protocol, I mean you can combine protocols so much more easily combined functionality using protocol oriented development. But creating mocks the same thing, you can just conform to that Mark and just Implement whatever message you actually care about and it's just much more elegant solution a much more, you know architecture friendly solution going with the protocol then something concrete.<br><br>[00:44:51] So it's a very good job on Apple's part and you know it's my take on it so. I haven't gone to see all of the defaults implementations of stuff they give you but you know, hopefully it's saying and you know, from what I have seen it looks very well done. <br><br>[00:45:04] <strong>Michael Katz (Guest): </strong>One of those things with SwiftUI is there really is from sample code encouraging people to build out separate model classes, which also makes it easier to test.<br><br>[00:45:13] <strong>Leo Dion (Host): </strong>You're talking like the previews <br><br>[00:45:15] <strong>Michael Katz (Guest): </strong>Yeah with the previews and you can have being able to put multiple previews in the assistant.<br><br>[00:45:20] I think I'll make it great for testing not really testing but just visualizing the different conditions before you even get to the point of completing your code, but the at state you can have a separate model class be bound to your view as you to put that logic of loading data and changing data and so on outside of the view of other people couple and their view controllers the setting of The View State and then the model state so it's exciting. <br><br>[00:45:45] <strong>Joshua Greene (Guest): </strong>It looks like they're kind of pushing Mike component-based development too you know, I've seen like so many developers where you need a custom UI tap controller or something, right. So you go and instead of right and something your own which may be in the right solution you go and you try to reuse Apple's and then you're trying to hack internal methods and so forth and it's just hard to do with all the Swift you I think they provided a same base and said look you need new components. You can create something. I'm excited for testing because the idea being you could split those off into their own library. Here's this component that I need or set of components that I need and just pull them in as you need and ensure that they're tested really well. So again, it just looks really well done. So the team did a really good job as far as everything I've seen so far. <br><br>[00:46:25] <strong>Leo Dion (Host): </strong>Well, thank you so much guys for coming on the program if folks want to get ahold of you. What's the best way?<br><br>[00:46:31] <strong>Joshua Greene (Guest): </strong>Sure so if you have questions about the book, we actually have a forum on raywenderlich.com. We actively monitor that as authors of the book.<br><br>[00:46:41] So if you have questions ask them there and we will actually answer you for anything that you've got. If you want to reach us personally jrgdeveloper@gmail.com by email or Twitter @grg_developer <br><br>[00:46:53] <strong>Michael Katz (Guest): </strong>and I'm @themikekatz on Twitter <br><br>[00:46:56] <strong>Leo Dion (Host): </strong>well, thank you so much for coming on and maybe we'll talk again later about Swift UI and how that's going to improve test-driven development.<p><strong><a rel="payment" title="★ Support this podcast on Patreon ★" href="https://www.patreon.com/empowerappsshow">★ Support this podcast on Patreon ★</a></strong></p>]]>
      </content:encoded>
      <pubDate>Sun, 16 Jun 2019 00:00:00 -0400</pubDate>
      <author>Leo Dion, Principal CEO and Swift Developer at BrightDigit </author>
      <enclosure url="https://chtbl.com/track/51E5/media.transistor.fm/a18c0801.mp3" length="21018143" type="audio/mpeg"/>
      <itunes:author>Leo Dion, Principal CEO and Swift Developer at BrightDigit </itunes:author>
      <itunes:image href="https://images.transistor.fm/file/transistor/images/show/122/full_1533929410-artwork.jpg"/>
      <itunes:duration>2824</itunes:duration>
      <itunes:summary>In this episode we talk with Joshua Greene and Michael Katz, authors of iOS Test Driven Development by Tutorials. In this episode, we talk about:
- Why is test-driven development is important for any dev team?
- How is TDD best employed with iOS development
- What are some exceptions to test-driven development?
</itunes:summary>
      <itunes:subtitle>In this episode we talk with Joshua Greene and Michael Katz, authors of iOS Test Driven Development by Tutorials. In this episode, we talk about:
- Why is test-driven development is important for any dev team?
- How is TDD best employed with iOS develop</itunes:subtitle>
      <itunes:keywords>technology, apple, business, iPhone, Mac, osx, macOS, iPad, Apple Watch</itunes:keywords>
      <itunes:explicit>No</itunes:explicit>
      <googleplay:explicit>No</googleplay:explicit>
    </item>
    <item>
      <title>iOS App Architecture with René Cacheaux and Josh Berlin</title>
      <itunes:episode>14</itunes:episode>
      <itunes:title>iOS App Architecture with René Cacheaux and Josh Berlin</itunes:title>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:block>No</itunes:block>
      <googleplay:block>No</googleplay:block>
      <guid isPermaLink="false">85894c31-1766-4456-9dac-2d276654ca10</guid>
      <link>https://share.transistor.fm/s/7247db7e</link>
      <description>In this episode, we talk with René Cacheaux and Josh Berlin, authors of Advanced iOS App Architecture. In this episode, we talk about: how a company can foster healthy iOS Architectures with their iOS developers
and what makes good architectures.</description>
      <content:encoded>
        <![CDATA[<h1>Guests</h1><ul>
<li><a href="https://twitter.com/jab2109"><strong>Josh Berlin - @jab2109</strong></a></li>
<li><a href="https://twitter.com/rcachatx?lang=en"><strong>René Cacheaux - @RCachATX</strong></a></li>
</ul><h1>Book - <a href="https://store.raywenderlich.com/products/advanced-ios-app-architecture">Advanced iOS App Architecture</a>
</h1><h1>Links</h1><ul>
<li><a href="https://github.com/Swinject/Swinject">Swinject</a></li>
<li><a href="https://github.com/ReactiveX/RxSwift">RxSwift</a></li>
<li><a href="https://www.youtube.com/watch?v=OD_yHH_R7qo">Advanced Unidirectional Architecture with Rene Cacheaux - Live Tutorial Session - RWDevCon 2018</a></li>
<li><a href="https://github.com/alcatraz/Alcatraz">Alcatraz RIP</a></li>
<li><a href="https://developer.apple.com/documentation/xcodekit/creating_a_source_editor_extension">Xcode Extensions</a></li>
</ul><h1>Previous Episodes</h1><ul>
<li><a href="https://share.transistor.fm/s/3ee56c45">Episode 7: Apple 2019</a></li>
<li><a href="https://share.transistor.fm/s/ffcb9fc1">Episode 8: Cloud and Backend Services</a></li>
<li><a href="https://share.transistor.fm/s/bcf9bb21">Episode 12: iOS Developer Interviews with Alex Bush</a></li>
</ul><h1>Show Notes</h1><strong>Challenges with Architecture in iOS Application Development</strong><ul>
<li>Dealing with the lack of guidance from Apple</li>
<li>Slow <a href="https://www.scruminc.com/velocity/">team velocity</a> caused By large volumes of code</li>
<li>Architecture is important when the team is large enough to benefit</li>
</ul> One day when the team grows more, you’re going to potentially have more problems.<br>Josh Berlin<ul>
<li>The need to slow down and establish an architecture in an app</li>
<li>constant communication and early meeting to discuss patterns and practices (i.e. Architecture)</li>
<li>How team dynamic affects the need for leadership</li>
</ul><strong>Applying Patterns to iOS Application Architecture </strong><ul>
<li>
<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/DevPedia-CocoaCore/MVC.html">MVC</a> vs Other Patterns such as <a href="https://github.com/ReactiveX/RxSwift">RxSwift</a>
</li>
<li>How design patterns naturally develop</li>
<li>Using third party libraries</li>
<li>The importance of team DNA</li>
<li>The importance of <a href="https://en.wikipedia.org/wiki/Dependency_injection">dependency injection</a>
</li>
<li>Tooling - iOS and Swift vs Android and Kotlin</li>
<li>The problems with Storyboards and having healthy architecture</li>
</ul><strong>WWDC Hopes and Dreams</strong><a href="https://twitter.com/jab2109"><em>Josh Berlin - @jab2109</em></a><ul><li>Dark Theme (iOS)</li></ul><a href="https://twitter.com/rcachatx?lang=en">René Cacheaux - @RCachATX</a><ul>
<li>Marzipan</li>
<li><a href="https://gist.github.com/lattner/31ed37682ef1576b16bca1432ea9f782">Swift Concurrency Primitives</a></li>
</ul><a href="https://twitter.com/leogdion"><em>Leo Dion - @leogdion</em></a><ul>
<li>Xcode Improvements</li>
<li>More Exposure for Services and <a href="https://share.transistor.fm/s/ffcb9fc1">Server Side Swift</a>
</li>
<li><a href="https://swift.org/package-manager/">Swift Package Manager</a></li>
<li>More Developer Tools</li>
</ul>What happened to <a href="https://github.com/alcatraz/Alcatraz">Alcatraz</a> and <a href="https://developer.apple.com/documentation/xcodekit/creating_a_source_editor_extension">Xcode Extensions</a>?<h1>Social Media</h1><a href="https://twitter.com/brightdigit"><strong>Twitter - @brightdigit<br></strong></a><a href="http://facebook.com/brightdigit"><strong>Facebook - BrightDigit</strong></a><h1><a href="https://www.instagram.com/brightdigit/"><strong>Brand New Instagram! - @brightdigit</strong></a></h1><br><h1>Transcript</h1><strong>Leo Dion (Host): </strong>[00:00:00] Hello, welcome to another episode of EmpowerApps Show today. We have with us René Cacheaux and Josh Berlin. Guys, thanks for coming on. <br><br><strong>René Cacheaux (Guest): </strong>[00:00:08] Thanks for having us. <br><br><strong>Josh Berlin (Guest): </strong>[00:00:09] Yeah.<br><br><strong>Leo Dion (Host): </strong>[00:00:09] So I've heard a lot of issues that companies have with architecture especially architecture with iOS apps and I know you guys have a book coming out as part of the Ray Wenderlich series - IOS app architecture. So this is something I'm really interested [in]. Maybe if you can kind of define the problems you've seen a lot of companies run into when it comes to architecting a successful mobile app, especially in iOS. <br><br><strong>René Cacheaux (Guest): </strong>[00:00:40] Yeah, one of the biggest challenges with iOS development is that there's really no strong opinion from Apple. So everyone's really kind of left to roll their own patterns. The biggest issues that I've seen is just slow in-team velocity, because we read a lot more code than we write. Everytime that we go into a code base to add a new feature, fix a bug, or something - the more tightly coupled all the pieces of your app are [and] the more you have to read to kind of understand all the things that you need to understand to make a safe change without breaking something. And so, kind of architecture really helps speed up your team because if you can kind of use the right patterns and break things up into no easy to reason about chunks. It's much much easier to find where you need to make the change and have confidence that you are not going to break something. So that's what I would say kind of like the main points on that.<br><br><strong>Josh Berlin (Guest): </strong>[00:01:39] Yeah and another thing is like a lot of apps that are built usually start with maybe like one person or a small team and  that developer has an opinion about how to architect the app and as a team grows and the product org wants more changes [it] becomes a lot harder to make those changes if the team isn't on board with one type of architecture and everyone is going to have their own opinion. It's going to be a lot easier to make these changes. If everyone agrees on one architecture and knows where to our find everything, everything is documented because one day when the team grows more, you know, you're going to potentially have more problems - like René was saying finding things in the code base. When the app is small it's not as big of a deal but when it grows it becomes a lot more challenging, so it's good to get these architectural patterns in early on and have everyone on board.<br><br><strong>Leo Dion (Host): </strong>[00:02:36] Maybe talk a little bit about your background and how did you guys get into iOS development? <br><br><strong>René Cacheaux (Guest): </strong>[00:02:40] So I got into it back in around 2008. I was doing a bunch of kind of web Java server face, you know internal it development and my wife had bought an iPhone and was kind of really trying to get me on board with the Apple ecosystem. Back then I was kind of Microsoft guy. You know, I was like, I'll try developing for this it would be interesting and I just got hooked honestly like. Working with like very abstract things kind of in the cloud and kind of in the background versus working on something that you can kind of feel and touch and look and show your friends kind of a really really cool thing. That's how I got into it. <br><br><strong>Leo Dion (Host): </strong>[00:03:17] How about you Josh? <br><br><strong>Josh Berlin (Guest): </strong>[00:03:18] Yeah. So in college, it was like maybe 10 years ago and iOS first came out. No one was really teaching this in school and I wanted a fitness tracker. So I built one for myself and ended up getting a job at a company building business products for Windows. They wanted to Android and iOS app and somehow I got the job. I'm in a building iOS apps ever since then. <br><br><strong>Leo Dion (Host): </strong>[00:03:43] It's funny. So how big are the teams that you've worked with? <br><br><strong>René Cacheaux (Guest): </strong>[00:03:46] All kinds of ranges. I mean Josh and I used to work at a consultancy called Mutual Mobile. The kind of a big project that we work together on were kind of establish all this architecture stuff. We had a team about six iOS and about six Android but you know in that agency we had other projects that were like two on each platform - so anywhere between two and six on each platform when we were in which the mobile <br><br><strong>Leo Dion (Host): </strong>[00:04:10] It seems like one of the big things I'm hearing is as more and more code gets written there's almost use the term interesting use in terms of velocity and it is a specific term obviously the agile world, but I can understand what you mean you basically mean speed of the project and its movement but I would almost say like when you get more and more code. It becomes more and more difficult to manage and then on top of it. There's like an inertia there. The bigger it gets the heavier it gets and the harder it is to move it. It seems to me like what you're saying is like good architecture makes it much quicker and much easier to add more and more components to an app. Is that correct? <br><br><strong>René Cacheaux (Guest): </strong>[00:04:49] Yeah, the weird part about it though is to get to the point where you get those benefits. You do have to kind of slow down a little bit. And that's the part that most organizations struggle with is that they want that high-velocity upfront on day zero and you just can't get that. If you don't spend the time to work together as a team and really figure out the patterns that everyone's on board with and really kind of experiment a little bit and kind of lock it in. That's one thing that, the project that I worked with Josh on. You know, the first couple months it was a pretty slow process. I mean we had everyone in every code review. We experimented with the patterns that we were using and we were tweaking them and whatnot. And so at the very beginning, it really wasn't a high-velocity project probably slower than average. But then about three or four months into it, we started moving really really fast and we had a big deadline because this project was for a big brand, for the World Cup and we needed it by certain day and it was a pretty large scope project. And by the end of it the last about three four months of it, I mean we were moving super fast. Everyone was able to build features pretty quickly. I know Josh if you want to expand on any of that stuff. <br><br><strong>Josh Berlin (Guest): </strong>[00:06:05] I think we were pretty lucky to have those two to three months to really nail down the architecture we liked and to implement an architecture that would allow us after that like initial ramp-up period to build new features super super fast and not break everything because If we didn't have those first two months and we just started like writing code like building new features. I don't even know like everything probably would have crumbled because we didn't have a good foundation. So I think it's super important. Like maybe you don't need two to three months, but maybe even two to three weeks when you start a new project to really nail down the architecture and figure out how you're going to be able to build features quickly later on and test them.<br><br><strong>Leo Dion (Host): </strong>[00:06:48] Do you think part of it is making sure somebody is there to enforce consistency or do you need like an architecture role set up for a team or what are ways that you can like foster that within a company?<br><br><strong>Josh Berlin (Guest): </strong>[00:07:01] I don't think you need necessarily an architecture role, but I think that having meetings at the early stages of products about architecture is very important <br><br><strong>Leo Dion (Host): </strong>[00:07:13] And you're talking like highly technical meetings, right?<br><br><strong>Josh Berlin (Guest): </strong>[00:07:15] Yes, very technical like a lot of diagrams like class diagrams how everything is going to fit together and like coming up with some patterns. So I don't think you need necessarily like someone who's an architect on the project. I mean it definitely would help but I think like just a team of four or five people could have these meetings and figure this stuff out early on.<br><br><strong>Leo Dion (Host): </strong>[00:07:34] Do you need somebody to call the shots at all?<br><br><strong>Josh Berlin (Guest): </strong>[00:07:37] I mean I think it's probably better if you have someone driving this and everyone just kind of like tuning their plan, but I don't think it's completely necessary. I mean as long as everyone and I think what's more important is everyone's in agreement and everyone feels that they can have input and they're not just like doing what this one person says.<br><br><strong>Leo Dion (Host): </strong>[00:07:58] Yeah. I've been in situations like that where there's somebody who pretty much is it ordering everybody what to do as far as architecture? And yeah, it can be really difficult to be in situations like that.<br><br><strong>René Cacheaux (Guest): </strong>[00:08:08] I think the DNA of the team has a lot to do with it. I've been on very different kinds of teams and in teams we have folks that are very like self-motivated. You don't really need someone calling the shots and other teams. I've been on their folks that you know, maybe you want some more guidance and so for those are actually wanting someone to call the shots. So I think it really depends on kind of the personality and makeup of each team. But it definitely helps to have at least someone driving and at least the best way it's worked I think is making sure that whoever is driving is very open-minded and is more interested in having decisions being made less than pushing their personal agenda what they personally think is the best architecture.<br><br><strong>Leo Dion (Host): </strong>[00:08:51] I really like that. It's a really good point. So maybe you guys can get into a little bit of the nitty-gritty what are like the different styles or different patterns that people can implement especially when it comes to iOS apps and architecture. <br><br><strong>René Cacheaux (Guest): </strong>[00:09:06] So there's three main styles that we've kind of categorized most of the patterns into. The more traditional work all the MV patterns, which are like MVC and MVP and MVVM. <br><br><strong>Leo Dion (Host): </strong>[00:09:16] And so like Apple, obviously, they really push MVC. <br><br><strong>René Cacheaux (Guest): </strong>[00:09:20] Yes.<br><br><strong>Leo Dion (Host): </strong>[00:09:21] If there's any pattern that they push usually MVC is one of their oldest and most steadfast patterns<br><br><strong>René Cacheaux (Guest): </strong>[00:09:27] They push it a lot. You know, UIKit [and] Cocoa Touch is designed around that pattern. And so that's the pattern that you will fight the least with when you're working with cocoa touch. It's a good pattern and there's a lot of materials out their on folks that are trying to kind of demystify all the negative kind of vibes around. You see because you can do MVC very well. I think that's actually the main thing that we learned Josh and I working together is that it's not so much a matter of which pattern you use its how well you put it to practice and you can like take any pattern and do a horrible job of applying it. You can take any pattern and do a great job of applying it. Like Dave Delong who used to work at Apple. He's a big proponent of MVC has a lot of cool articles out there on hey MVC is not so bad you just, you know decompose your view controllers into smart controllers and you'll be fine. You don't have to do this whole in MVP thing to fix those problems. <br><br><strong>Josh Berlin (Guest): </strong>[00:10:19] Yeah, like everyone hates on MVC but like I think a lot of it is just like how you implement it. It's not so much that in VC is a bad pattern is just like kind of like a broad thing and there's a lot of ways to do it poorly and a lot of ways do it well.<br><br><strong>Leo Dion (Host): </strong>[00:10:33] Yeah, we had Alex Bush on who does contract work for Uber and his big complaint was how MVC gets unwieldy with really really really large projects. And that's kind of what I've heard. I use MVC. I don't have really large projects that I feel uncomfortable still implementing it but I think one of the things I've seen especially novice developers do is they'll take a pattern like a specific design pattern and just use it to use it without understanding why they use it. Most of the time, design patterns, I feel like they end up growing out of an it like just based on my experience. I've experienced enough that patterns just a naturally develop in your code if you're already using a lot of other things like making sure that things only do one thing. I forgot what that's called or, you know having a healthy use of like protocols or interfaces that automatically creates healthy patterns that follow patterns that we've seen in various books and stuff. <br><br><strong>René Cacheaux (Guest): </strong>[00:11:33] Yeah, I experienced that exact same kind of sequence of events where like I first learned about design patterns and it was like a kid in a candy store. I was like, I want to use as many of these as I can and then it kind of dies down and then when you just start trying to solve the problems that are in front of you it's like you said that you'll end up using those patterns but not because you said oh I want to use the Observer pattern. It's more because oh you have these external signals coming from the outside coming into the view controller and you want to decouple the view controller from that - let me build an observer for that. <br><br><strong>Leo Dion (Host): </strong>[00:12:05] Yeah, and then you realize wait a second. This is an observer pattern. It's like how they naturally grow out of your code. <br><br><strong>René Cacheaux (Guest): </strong>[00:12:11] Yeah. Exactly. <br><br><strong>Josh Berlin (Guest): </strong>[00:12:12] Yeah. <br><br><strong>Leo Dion (Host): </strong>[00:12:12] What other patterns do you see used throughout iOS? <br><br><strong>Josh Berlin (Guest): </strong>[00:12:17] Yeah. I think they'll like the reactive pattern has been super hot lately.<br><br><strong>Leo Dion (Host): </strong>[00:12:21] Yes. <br><br><strong>Josh Berlin (Guest): </strong>[00:12:22] Maybe it's not the best. Thing to do on iOS like to write all this reactive code actually at the company. I work for now when I started a year and a few months ago the app was using a lot of RX Swift. <br><br><strong>Leo Dion (Host): </strong>[00:12:34] And RX Swift is hot right now <br><br><strong>Josh Berlin (Guest): </strong>[00:12:36] It's very hot. It's very hot. And when I first started I was I know RX left and I know like how to write it but it's still like sometimes when you look at a new project with Rx Swift you're kind of just like it's hard to wrap your head around what's going on. It's kind of funny because now a year later we have no RX Swift in the project. We've moved completely away from reactive programming and I think that's more of like, it's just easier to understand sometimes when the whole team doesn't know our RX Swift. It's like well do we want to continue down this path teach everyone this new style this like new trendy hot style or you want to move to something more of like an MVC pattern where everyone's more familiar and it's maybe more readable for everybody. <br><br><strong>Leo Dion (Host): </strong>[00:13:18] I also feel like I don't like bringing in third-party libraries like necessarily fight against the grain of I'm not against that pattern specific. But if you're like, let's say for instance, you're doing react like Facebook. React JavaScript stuff, right? Okay, at least that follows that pattern you're not fighting against the grain because that's what the whole thing is set up for but iOS like you're fighting against Apple and their push for MVC and okay if that's what you want to do. That's fine. But if after you know WWDC things though, work out that way like you're dependent on the React Swift team to like keep up with it, which that's up to you. That's a risk you're have to be willing to take<br><br><strong>René Cacheaux (Guest): </strong>[00:13:56] Again. Like I think that's where the team DNA kind of comes in and that's why I think that it's bad advice to say here's the one architecture that you should always use. It's really about looking at who you're working with because there's some folks that are really into that stuff. And so I've been in environments both very reactive in both not and. Direct trainer bring a reactive into a non reactive environment is really hard is really really hard. Like Josh said it's almost not worth it. The other thing I think that kind of popped in my mind while we're discussing this stuff was that I would bring in third-party libraries one of the things that I kind of don't like about RX whiffed is that it's a really big library and if you really think about the common use cases, you're probably only using about maybe 60% of the library maybe 50% So you're only using a portion of it, but you're paying all the binary costs in the weight that it brings in. I really wish they could break it down into like a core version of it or not, but. Bringing third party dependencies can be pretty bad or pretty heavy on your app. <br><br><strong>Leo Dion (Host): </strong>[00:14:57] Yeah, I kind of agree. So anything else you want to talk about as far as different styles. I know like dependency injection has been big, protocol oriented programming especially important in the Swift realm.<br><br><strong>René Cacheaux (Guest): </strong>[00:15:11] Yeah, I mean that's Dependency Injection is kind of cool because it's kind of a universal concept that we've been able to apply to all the different patterns. So I think of Dependency Injection as kind of like the foundation of the architecture where you can put patterns on top of it and if there's one thing that you want to focus on getting a right, I think especially if you're trying to build for a large team or large set of teams dependency injections is really important to get and the thing there is Josh and I've done this several different ways as we were learning the pattern and using it in different environments and different teams different companies. We started writing everything by hand because with Dependency Injection, there are Frameworks and libraries that kind of help you follow the pattern and that's typically where everyone goes to is oh, let me find a library or framework that helps with dependency injection. We found that using those libraries hurts more than helps. We found that handwriting all your dependency injection containers is actually the easiest way to write code that's easy to understand. It's a little more painful. It's a little bit more boilerplate a little bit more boring work, but on the other side of that you get a code base that's much easier to read and understand and trace through that's my advice I would give to any iOS developer is sure like look at the frameworks and play around with them and use them at the end of the day. I would recommend starting with handwriting stuff. The key thing there is. To make sure you don't put everything in one container, you know break it up down into multiple containers. But if you do that, you'll find that it's much easier to manage or do you agree with that Josh? <br><br><strong>Josh Berlin (Guest): </strong>[00:16:41] Yeah hundred percent. I mean, I think you're going to do one thing to make your app architecture better. It's like. Use dependency injection and like René was saying D.I. Can go from very simple to very very very complicated. <br><br><strong>Leo Dion (Host): </strong>[00:16:55] I want to break down dependency injection because some folks might not know what exactly that means. I'm gonna try at what I do. So I learned dependency injection at my previous employer? It was like this is amazing. Now this allows for unit testing, easy plugins and stuff. We had talked before the recording about how like I used to be a C# developer interview. Castle Windsor for dependency injection, which is great because Castle Windsor, it can do all the reflections so I can like look up whatever the default implementation of a specific interfaces and automatically do that for you but then if you want to like use mocks, you can use mocks to unit test as well. And I miss some of that ability to do reflection, automate some of the ability to plug in certain classes. So the way I've done dependency injection is kind of employing the protocol oriented way of creating a protocol for almost everything and then having specific components. Like for instance I have a class that needs I think that turns a wheel. So I have a protocol for turning a wheel and then I'll have a specific implementation of that. And then that way the constructor for that thing that takes in the thing that turns the wheel can take in anything that turns the wheel it doesn't matter but then I have a default implementation that I use an app and then in my unit test I might have a mock one just to see you know that it works regardless of what gets plugged in. Is that kind of what we're talking about here? <br><br><strong>René Cacheaux (Guest): </strong>[00:18:19] Yeah, and we're talking about also like the resolution of these things. So like when you say okay, I want to create this object and this object has a dependency on three other objects that may be a conform to specific protocol how that instruction happens how the assembly of the dependency graph happens. That's where tools like swinge act and other kind of dependency injection frameworks help you out. But the thing that we found is that those tools use what's called runtime resolution. So when you say I want this object, like let's say I want this view controller and it depends on this networking thingy. And this database thingy when you say hey give me this view controller. It does the resolution at runtime it rather than compile time. So if for some reason you don't register how to create a network thingy or a database thingy, you won't find out until you run the app, which is kind of a more dangerous way of doing it. Whereas if you just handwrite your dependency containers that. Know how to create a view controller with it network thingy and database thingy. You'll find out at compile time. If you're not able to create a database object conforming this protocol and injecting into the constructor it just you know, we should won't compile which is great for a really big app where you have lots of different protocols and services and objects and a large dependency graph. You don't want to depend on having to run through all the runtime logic to expose any kind of missing dependencies there so.<br><br><strong>Leo Dion (Host): </strong>[00:19:44] Yeah, that's what I feel like has been the big roadblock for me is the lack of like decent resolution frameworks to plug in. So I just end up, you know hard-coding in the app and taking defaults and things like that.<br><br><strong>René Cacheaux (Guest): </strong>[00:19:57] Yeah, and that's exactly how we found it to be the most helpful. Yep. <br><br><strong>Josh Berlin (Guest): </strong>[00:20:00] I mean even doing it that way like you're still getting all the benefits of dependency injection where your Constructors take in interfaces like protocols and these classes become testable. Even though you're not using a framework or still getting all the benefits of DI doing it yourself by hand.<br><br><strong>Leo Dion (Host): </strong>[00:20:18] Exactly. And then you know, when you do a unit test you can mock it you're not dependent on that specifically so you guys have had experience what other languages have you had experience developing. Sounds like René you've done some Java stuff. <br><br><strong>René Cacheaux (Guest): </strong>[00:20:30] Yeah, Java and JavaScript. I've done Kotlin, Objective-C, and Swift. Those are the main ones. <br><br><strong>Josh Berlin (Guest): </strong>[00:20:39] A couple years ago. I spent some time doing a reactive element the JavaScript. <br><br><strong>Leo Dion (Host): </strong>[00:20:45] Okay. <br><br><strong>Josh Berlin (Guest): </strong>[00:20:45] Yeah, I've done some Java before a little bit of Kotlin. <br><br><strong>Leo Dion (Host): </strong>[00:20:49] What have you found as what's unique as far as IOS app architecture? Would have been unique benefits that unique challenges that you've seen, you know with that and with the dev tools in general.<br><br><strong>René Cacheaux (Guest): </strong>[00:21:02] That's good question. There's a lot of thoughts there that are running through my mind. So one of the things that I think is challenging is that Apple even though they do push MVC quite heavily and cocoa touch does kind of you know is designed with MVC in my they don't seem to have a very strong opinion about it at least not around tooling and things like that. Whereas like in the Android side Google's really into architecture these days and they're putting out like libraries that are all about just architecture. It kind of helped folks, you know, architect their apps. And so I think the platform having an opinion really helps because it allows people to kind of rally around that set of patterns or that sort of thing and build tooling libraries that kind of just work with it and like an IOS and Android you don't have to use those things, right, but if you want to move. It's a good default. Whereas an iOS we really don't have that. So that's I think a challenge. <br><br><strong>Leo Dion (Host): </strong>[00:21:55] It's funny you mention that because I'm doing a talk on multi-threaded like asynchronous development. I'm preparing for it. And one of the big libraries for Swift to do that is actually done by Google. Yeah, even though we have like Swift NIO by Apple, Google is even providing libraries for Swift developers. <br><br><strong>René Cacheaux (Guest): </strong>[00:22:14] Yeah, and I guess Swift is a huge a challenge right? Because it's a great language. It's moving so slowly. I mean you can pair it with something like Kotlin. We just have huge gaps in Swift like concurrency primitives that are not there and I'm calling you have things like her routines and things like that. It's just, you know Collins moving a lot faster than Swift. And so when you're doing both Android and iOS today's a weird time to be doing both because there's a lot lacking or not on the iOS side. It used to be the other way around.<br><br><strong>Leo Dion (Host): </strong>[00:22:41] Yeah. I mean it almost seems like with Swift they've slowed down because they've placed a high priority on like ABI stability. I think now that they've gotten over that hurdle. It'll be interesting to see and we'll get into that like what they might come up with as far as development tools for iOS and maybe updates to Swift as a language. How about as far as like Xcode devtools? It seems like we're going in the same direction where it's just like Xcode. It's painful to do Swift development on sometimes like I'm glad we have some refactoring stuff but just like autocomplete sometimes it works. Sometimes it doesn't very cryptic messages from the compiler when we just aren't doing our generic protocols the right way that it wants us to. What other stuff have you run into?<br><br><strong>Josh Berlin (Guest): </strong>[00:23:28] The error messages are kind of a tough. I think it's another reason to just make your apps as simple as possible. That's why I like sometimes using third-party libraries just makes all the error messages worse and it's harder to find bugs <br><br><strong>Leo Dion (Host): </strong>[00:23:42] It fixes one problem, but crazy three more. <br><br><strong>Josh Berlin (Guest): </strong>[00:23:44] Yeah. So like maybe you have like a really cool architecture and like you have one way data flow, you know, everything works properly, but when something breaks, it might be a lot harder to fix versus if you go a simple around simple architecture, you're kind of setting yourself up for success later on. So think like like Xcode has come a long way in the last 10 years, but you still have to fight it sometimes for sure. <br><br><strong>René Cacheaux (Guest): </strong>[00:24:09] It's definitely creaking any like the fact that they had a kind of rebuild the build system underneath it completely. I mean it really needs it have an overhaul. Yeah. <br><br><strong>Josh Berlin (Guest): </strong>[00:24:19] Yeah build times are pretty high.<br><br><strong>Leo Dion (Host): </strong>[00:24:21] It's not as bad as iTunes, but still it needs help. <br><br><strong>Josh Berlin (Guest): </strong>[00:24:24] And the thing is like Google's just continuously improving their IDs and it kind of like makes me want to start doing more Android development not like I love iOS like that's my number one. It is I think interesting because they're doing so much with architecture and their build system is amazing. Right? So iOS developers can learn a lot from the Android platform. <br><br><strong>Leo Dion (Host): </strong>[00:24:46] Yeah, it's amazing to see like there are some really good tools out there that third parties have built like I'm just thinking I like Fastlane and see what you will about Cocoapods or Carthage, but they're essentially filling in the gap that Apple hasn't provide like hopefully Swift Package Management can fill a lot of that Gap like with dependencies, but still it's nice to see that at least there's a community out there filling in the gaps  that apple hasn't filled, right?<br><br><strong>René Cacheaux (Guest): </strong>[00:25:13] It's strange though because you know apple is such a large organization with so much money. You know, I feel like if they really wanted to solve these problems. They probably could do a pretty good job and they are doing things like they acquired BuddyBuild and so we'll see what happens with that. But I still feel like there's so much more that they could do in terms of helping developers in the environments that they are in today because a lot of the tooling that Apple builds. Apple doesn't use themselves things like Interface Builder isn't that widely used I think in apple and so what happens is a lot of the stuff that Apple builds is not really tailored for large organizations or large teams building large apps. And so that's where the community has to kind of jump in and fill those gaps which you know, the community has a really good job of it. I feel like apple could do even better job of it given all the resources that they have, Hopefully <br><br><strong>Leo Dion (Host): </strong>[00:26:03] You speak about interface Builder. So let's get into it like especially with architecture. How do you deal with managing your UI, but keeping a healthy architecture. I'm a storyboard guy, but I'm by no means somebody who's going to like shove it down anybody's throat. I totally get how painful it can be especially working on a team when you have like merging you have to deal with some crap like that. But what are your recommendations or your personal styling?<br><br><strong>René Cacheaux (Guest): </strong>[00:26:33] I would not recommend anyone use interface Builder especially in large teams. <br><br><strong>Leo Dion (Host): </strong>[00:26:37] Yes. <br><br><strong>René Cacheaux (Guest): </strong>[00:26:38] That's one of the strong opinions that I do have is mostly because with interface Builder. You don't have a source of Truth everything that you put in your storyboard or your nib file is subject to change by the code underneath it. And so when you're looking at the story board itself in your kind of tweaking the layouts and you're taking the constraints and stuff like that. There's nothing stopping the code underneath the completely changing that and so when there's bugs and stuff, sometimes it's really hard to figure out the root cause because you can't just look at the storyboard. That's not enough. You have to go to storyboard and you have to look at the code. So that's one of the things that Apple could fix that. The other thing around is if you use a storyboard still kind of the way that Apple suggest you use them with segues and stuff like that. We do end up coupling all your view controllers together and there are kind of acts around it to make it less so but they're still pretty hacky. The simplest example is just a navigation stack, right, you know, you have a navigation controller and you have your presenting like, you know a list of things and you tap on an item with segues you're going to have to instantiate the next view controller in that first view controller. Now your tightly coupling those two things. If you needed to reorganize the navigation path, you're gonna have to go in to touch all the view controllers and kind of remove things around. So those are like a couple of big things I would say there's other ones but they're the ones that up my mind <br><br><strong>Josh Berlin (Guest): </strong>[00:27:54] Also like Auto layout code is not that hard to write by hand. I think the initial ramp up time is pretty high. It takes a little bit to learn how to build constraints by hand.<br><br><strong>Leo Dion (Host): </strong>[00:28:05] You're talking about like the visual format language?<br><br><strong>Josh Berlin (Guest): </strong>[00:28:08] I'm just talking about like all the helper methods that Apple provides to create constraints and like constrained one view to another one in code <br><br><strong>Leo Dion (Host): </strong>[00:28:16] Interesting. Okay. <br><br><strong>René Cacheaux (Guest): </strong>[00:28:17] Yeah. They added like a new anchor API that makes it way easier <br><br><strong>Josh Berlin (Guest): </strong>[00:28:20] So nice. Yeah and like you can write it some helper methods around that stuff reading this in your view classes is really nice and it's really easy to look at a view and see how everything's laid out in code and the other thing is like simple views in Interface Builder. Maybe it's easier to build those using like like a storyboard or seeing the views like laid out on screen versus encode but once you start doing like animations and changing constraints that stuff is so much easier to write in code. <br><br><strong>René Cacheaux (Guest): </strong>[00:28:51] One thing you mention there Josh is I think a lot of folks don't use this enough where you can totally subclass uiview and do all your styling and layout in there as opposed to in a view controller. I still see a tons of you controllers with times of layout and styling code. I think that's one of the biggest complaints about not doing your UI and code is like, oh it blows my view controllers in your dad's all this layout and style code into my view controllers. And so. You know what I usually say is. Okay. Well, that's fine. Just subclass your route uiview do it all in there and that really nicely separates the viewcontroller kind of controlling logic from like the UI and a styling logic. <br><br><strong>Leo Dion (Host): </strong>[00:29:27] Yeah that goes back to the whole point about having healthy app architecture. Your view should not be in the controller like drawing your view should be in your view. That's what it's there for. <br><br><strong>René Cacheaux (Guest): </strong>[00:29:35] Exactly. <br><br><strong>Leo Dion (Host): </strong>[00:29:37] Cool. Well, thanks guys for coming on. So do you want to talk a little bit about your book that's coming out? <br><br><strong>René Cacheaux (Guest): </strong>[00:29:42] Yeah, definitely. So it's been lots of effort getting this book out. We've been working on it for I think about three years now, we're super excited about it. We really wanted to write something that was extremely pragmatic and something that would tackle all the real world scenarios of architecture. I think I've read a bunch of different architecture books that have come out and they're very theoretical they usually have very simple example code and so what we decided to do is to try to build out as much of a real app as we could possibly do and so what we did is we built basically an app that's kind of like an Uber app, but it's kind of fun. It's a kangaroos pick you up, so it's called Koober. And so yeah, you can hail a kangaroo <br><br><strong>Leo Dion (Host): </strong>[00:30:26] I started watching your YouTube video. You did a presentation on it, about Koober I loved it. Yeah, and I'll post a link to that as well.<br><br><strong>René Cacheaux (Guest): </strong>[00:30:33] It was a lot of fun. We based it off of Uber. So we built as much of Uber as we possibly could and so we had to tackle some hard problems. We couldn't shy away from things like navigation. Or things like authentication tokens and authentication stuff. And so we tackled all of those things. So because of that we didn't cover that many architectures. I think we cover three but we cover them pretty deeply and so yeah, I mean that's a couple of things I'm excited about actually probably the thing I'm most excited about is Josh and I are working together last, you know, six or so years. We kind of came up with her own kind of architecture and the last chapter of the book kind of covers that and we're pretty excited about it. Hopefully the community will have a good response to it. And I'm sure Josh has lots of thoughts on it. <br><br><strong>Josh Berlin (Guest): </strong>[00:31:20] I'm excited to hear what people think about  elements. It's an architecture that we created a Mutual Mobile  a long time ago, and we really try to provide a set of useful. Architecture patterns that people can like pick and choose which ones they like and yeah, we're pretty excited to see what people think of that. <br><br><strong>Leo Dion (Host): </strong>[00:31:39] Awesome. The name of the book is Advanced IOS app architecture and you can find out right at Ray Wenderlich's site. I'll provide the link in the notes just to plug our podcast. We are at brightdigit on Twitter as well as Facebook and I just started Instagram so you should definitely check that out. And before we close out guys, I wanted to ask you maybe your top three or top two things. You're most looking forward to at WWDC this year.<br><br><strong>Josh Berlin (Guest): </strong>[00:32:07] I know my number one. Definitely the Dark theme and I'm really excited to see what they do with seeming because that's something I've been working on at work lately is building a theming for our app and there's a lot of like third party theme libraries that are available right now. And I'm excited to see how Apple is going to do this.<br><br><strong>Leo Dion (Host): </strong>[00:32:29] Yeah, I'm excited about that too. <br><br><strong>René Cacheaux (Guest): </strong>[00:32:31] Oh boy. I have things that I want that I don't think are going to happen if this is gonna happen if they're cool. Obviously, I did. My number one. Most realistic was Marzipan. Just seeing what that looks like. I think I'm most interested in seeing how much of the macOS stuff is exposed like things like Safari extensions and stuff like that. Things that I would like to have that probably I think might not happen. I'd love for them to present concurrency primitives for. Something like co-routines would be so awesome. It would be really really cool <br><br><strong>Leo Dion (Host): </strong>[00:33:02] I feel like that if they're gonna announce it like a Swift is open source. That's the thing. I'm thinking about Swift is open source. So if they're going to announce that they would announce it. I think that's gonna be a Swift 6 or 5.3 or 5.2 thing. I think is definitely on the radar but I doubt we're going to hear about it at WWDC. But yeah, I totally agree. We need a async await. We need some of that stuff. <br><br><strong>René Cacheaux (Guest): </strong>[00:33:24] So you never know but yeah, I don't expect it. Yeah, those are my two. <br><br><strong>Leo Dion (Host): </strong>[00:33:28] Yeah. I was just going to say going back. Like I wish they'd fix our Xcode. I wish they'd get some of that stuff fixed. I think Swift Package Manager should be integrated into Xcode and it shouldn't be so difficult. I've become a big fan of some of the server side stuff. I'd like to at least have some sort of plug. For like Swift NIO and all the different Vapor and all the Kitura and all those projects because I think they're missing a lot of that push that Apple could give it. I'm really interested to see and I've done an episode on it as Apple has moved more into services if we're going to see Apple do anything for developers when it comes to services. Are we going to see more robust like CloudKit or integration with that because we have Firebase right Firebase is elephant in the room. Like where's Apple and this. So anything else guys before we close out? <br><br><strong>René Cacheaux (Guest): </strong>[00:34:18] The only I would say is you reminded me of something what happened to Xcode Extensions, like nothing like it was gonna go somewhere. It wouldn't go anywhere yet. <br><br><strong>Leo Dion (Host): </strong>[00:34:26] Yeah. Yeah exactly <br><br><strong>Josh Berlin (Guest): </strong>[00:34:28] Alcatraz thing. Yeah. I've hardly ever used anything some cool stuff on there though. <br><br><strong>Leo Dion (Host): </strong>[00:34:33] And it seems like that stuff is really more developer tools. Just more robust developer tools. That's all I'm asking for but I am interested in Marzipan and how that's going to work out. I've done some mac development and it's not that bad but there's a lot of old old <br><br><strong>René Cacheaux (Guest): </strong>[00:34:47] it's painful. <br><br><strong>Leo Dion (Host): </strong>[00:34:49] It's old. That's my problem with it. It's very Objective-C focused. And so I think Marzipan will breathe some fresh air. But my worry is that we're going to get kind of how. Lot of lazy companies but take their iPhone apps and just make them really big on the iPad. I have a feeling it's going to be the same on the Mac, unfortunately. Yeah, cool where can folks get a hold of you as far as on social media. <br><br><strong>René Cacheaux (Guest): </strong>[00:35:14] I'm on Twitter. My handle is at rcacheatx. That's where I primarily am. <br><br><strong>Josh Berlin (Guest): </strong>[00:35:21] My Twitter handle is at jab2109<br><br><strong>Leo Dion (Host): </strong>[00:35:25] So guys. Thanks again for coming on the show. It's been fantastic, and I would love to have you go again talking more about architecture and how it can help teams work out and expressing. Thanks, Leo.<br><br><br><br><p><strong><a rel="payment" title="★ Support this podcast on Patreon ★" href="https://www.patreon.com/empowerappsshow">★ Support this podcast on Patreon ★</a></strong></p>]]>
      </content:encoded>
      <pubDate>Sun, 02 Jun 2019 00:00:00 -0400</pubDate>
      <author>Leo Dion, Principal CEO and Swift Developer at BrightDigit </author>
      <enclosure url="https://chtbl.com/track/51E5/media.transistor.fm/e7236362.mp3" length="15292549" type="audio/mpeg"/>
      <itunes:author>Leo Dion, Principal CEO and Swift Developer at BrightDigit </itunes:author>
      <itunes:image href="https://images.transistor.fm/file/transistor/images/show/122/full_1533929410-artwork.jpg"/>
      <itunes:duration>2137</itunes:duration>
      <itunes:summary>In this episode, we talk with René Cacheaux and Josh Berlin, authors of Advanced iOS App Architecture. In this episode, we talk about: how a company can foster healthy iOS Architectures with their iOS developers
and what makes good architectures.</itunes:summary>
      <itunes:subtitle>In this episode, we talk with René Cacheaux and Josh Berlin, authors of Advanced iOS App Architecture. In this episode, we talk about: how a company can foster healthy iOS Architectures with their iOS developers
and what makes good architectures.</itunes:subtitle>
      <itunes:keywords>technology, apple, business, iPhone, Mac, osx, macOS, iPad, Apple Watch</itunes:keywords>
      <itunes:explicit>No</itunes:explicit>
      <googleplay:explicit>No</googleplay:explicit>
    </item>
    <item>
      <title>Apple and Video with Paul J Schmidt</title>
      <itunes:episode>13</itunes:episode>
      <itunes:title>Apple and Video with Paul J Schmidt</itunes:title>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:block>No</itunes:block>
      <googleplay:block>No</googleplay:block>
      <guid isPermaLink="false">82b1b336-4d0c-4e3a-b246-d689ef03c126</guid>
      <link>https://share.transistor.fm/s/6321c757</link>
      <description>In this episode, we talk with Paul J Schmidt, Creative Video Strategist for Uno Deuce Multimedia. In this episode, we talk about:
- Apple’s positioning in the streaming market, 
- Get started with Video using iPhones, iPads, and Macs
- Running a video production company
</description>
      <content:encoded>
        <![CDATA[<h1>UnoDeuce Multimedia and Storytelling</h1><ul>
<li><a href="https://www.unodeuce.com">UnoDeuce Multimedia</a></li>
<li><a href="https://www.youtube.com/user/1dpmultimedia?feature=results_main">Youtube</a></li>
<li><a href="https://www.instagram.com/unodeucemedia/">Instagram</a></li>
<li><a href="https://twitter.com/unodeucemedia">Twitter</a></li>
<li><a href="https://www.facebook.com/UnoDeuceMultimedia">Facebook</a></li>
</ul><h1>Previous Episodes</h1><ul><li><a href="https://share.transistor.fm/s/3ee56c45">Apple 2019 - Apple and Service</a></li></ul><h1><a href="https://www.youtube.com/watch?v=TZmBoMZFC8g">March 25th Event</a></h1><ul>
<li>Other Services<ul>
<li><a href="https://www.apple.com/apple-arcade/">Apple Arcade</a></li>
<li><a href="https://www.apple.com/apple-card/">Apple Card</a></li>
<li><a href="https://www.apple.com/apple-news/">Apple News</a></li>
<li><a href="https://www.apple.com/apple-music/">Apple Music</a></li>
</ul>
</li>
<li>How is Apple positioning itself compared with other Streaming Services?<ul>
<li><a href="https://www.apple.com/tv/">Apple TV</a></li>
<li><a href="https://www.apple.com/apple-tv-plus/">Apple TV+</a></li>
<li><a href="https://www.amazon.com/Amazon-Video/b/ref=sv_atv_logo?node=2858778011&amp;ie=UTF8">Amazon Prime </a></li>
<li><a href="https://www.netflix.com">Netflix</a></li>
<li><a href="https://preview.disneyplus.com">Disney+</a></li>
<li><a href="https://exponent.fm/episode-169-family-friendly-disney/">Exponent Episode - Family-Friendly Disney</a></li>
<li><a href="https://www.hulu.com/welcome">Hulu</a></li>
</ul>
</li>
</ul><h1>How to start telling stories with video now</h1><ul>
<li><a href="https://www.filmicpro.com">Filmic Pro</a></li>
<li><a href="https://www.apple.com/clips/">Clips</a></li>
<li><a href="https://www.apple.com/imovie/">iMovie</a></li>
<li>Recording with an iPhone</li>
<li>Editing with an iPad</li>
<li>
<a href="https://www.apple.com/imac/">iMac</a> vs <a href="https://www.apple.com/imac-pro/">iMac Pro</a> for Video</li>
<li>HD vs <a href="https://en.wikipedia.org/wiki/4K_resolution">4K</a>
</li>
<li><a href="https://en.wikipedia.org/wiki/Wide-gamut_RGB_color_space">High Color Gamut</a></li>
<li><a href="https://www.apple.com/final-cut-pro/">Final Cut Pro</a></li>
<li><a href="https://www.apple.com/mac-mini/">Mac Mini</a></li>
</ul><h1>Running IT in an Apple Run Business</h1><ul><li><a href="https://www.dropbox.com">Dropbox</a></li></ul><strong>Archiving and Hard Drives </strong><ul>
<li><a href="https://www.lacie.com">Lacie</a></li>
<li><a href="https://www.westerndigital.com">Western Digital</a></li>
<li><a href="https://www.backblaze.com/blog/hard-drive-stats-for-2018/">BackBlaze Hard Drive Stats For 2018</a></li>
</ul><h1>Lansing Marketing Hackers</h1><ul>
<li><a href="https://www.meetup.com/Lansing-Marketing-Hackers/">Lansing Marketing Hackers Meetup</a></li>
<li><a href="https://www.youtube.com/watch?v=QrgWN6zEQtA">Learning a New <em>Skill</em> with Alexa with Paul J Schmidt</a></li>
</ul><h1>WWDC</h1><ul>
<li><em>New Mac Pro?</em></li>
<li><em>Pro App Updates</em></li>
</ul><p><strong><a rel="payment" title="★ Support this podcast on Patreon ★" href="https://www.patreon.com/empowerappsshow">★ Support this podcast on Patreon ★</a></strong></p>]]>
      </content:encoded>
      <pubDate>Sun, 19 May 2019 01:00:00 -0400</pubDate>
      <author>Leo Dion, Principal CEO and Swift Developer at BrightDigit </author>
      <enclosure url="https://chtbl.com/track/51E5/media.transistor.fm/98e57497.mp3" length="16546780" type="audio/mpeg"/>
      <itunes:author>Leo Dion, Principal CEO and Swift Developer at BrightDigit </itunes:author>
      <itunes:image href="https://images.transistor.fm/file/transistor/images/show/122/full_1533929410-artwork.jpg"/>
      <itunes:duration>2452</itunes:duration>
      <itunes:summary>In this episode, we talk with Paul J Schmidt, Creative Video Strategist for Uno Deuce Multimedia. In this episode, we talk about:
- Apple’s positioning in the streaming market, 
- Get started with Video using iPhones, iPads, and Macs
- Running a video production company
</itunes:summary>
      <itunes:subtitle>In this episode, we talk with Paul J Schmidt, Creative Video Strategist for Uno Deuce Multimedia. In this episode, we talk about:
- Apple’s positioning in the streaming market, 
- Get started with Video using iPhones, iPads, and Macs
- Running a video </itunes:subtitle>
      <itunes:keywords>technology, apple, business, iPhone, Mac, osx, macOS, iPad, Apple Watch</itunes:keywords>
      <itunes:explicit>No</itunes:explicit>
      <googleplay:explicit>No</googleplay:explicit>
    </item>
    <item>
      <title>iOS Developer Interviews with Alex Bush</title>
      <itunes:episode>12</itunes:episode>
      <itunes:title>iOS Developer Interviews with Alex Bush</itunes:title>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:block>No</itunes:block>
      <googleplay:block>No</googleplay:block>
      <guid isPermaLink="false">e281a900-9acd-4f1a-81e5-d2eeb8cd9b51</guid>
      <link>https://share.transistor.fm/s/bcf9bb21</link>
      <description>In this episode we talk with Alex Bush (@alex_v_bush), Author of @iosinterviewgd and co-host of @insideiosdev. Alex talks about the process of interviewing potential iOS developers, what are some questions employers should ask, and what makes an iOS developer different from other developer positions.</description>
      <content:encoded>
        <![CDATA[<h1>Alex's Links</h1><a href="https://twitter.com/alex_v_bush"><strong>On Twitter @alex_v_bush</strong></a><br><a href="http://iosinterviewguide.com/"><strong>iOS Interview Guide</strong></a><strong> </strong><a href="http://insideiosdev.com/"><strong>Inside iOS Dev Podcast</strong></a><h1>Previous Episodes</h1><a href="https://share.transistor.fm/s/ffcb9fc1"><strong>Episode 8 - Cloud and Backend Services For Apps</strong></a><h1>What makes interviewing iOS Developers special?</h1><ul>
<li>Apple Design Patterns<ul>
<li><a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/DevPedia-CocoaCore/MVC.html">Model-View-Controller</a></li>
<li><a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/DevPedia-CocoaCore/Delegation.html">Delegation Pattern</a></li>
<li><a href="https://developer.apple.com/videos/play/wwdc2015/408/">Protocol Oriented Programming</a></li>
</ul>
</li>
<li>Special Background and Knowledge in Frameworks: <em>UIKit, HealthKit, AVFoundation, WatchKit, etc...</em>
</li>
</ul><h1>Common mistakes employers make interviewing iOS candidates</h1><ul>
<li>Not understanding their own app<ul><li>Hiring a consultant to help estimate and understand what iOS knowledge is nessecary</li></ul>
</li>
<li>Not understanding the phase their app and whether general iOS developers are needed as opposed to iOS developers with specialties</li>
<li>Algorithms and Optimization Interview Questions</li>
</ul><h1>Interview Questions about building a UI in iOS</h1><ul>
<li>Finding out whether the applicant understands the pros and cons of various methods: <em>Storyboards, Coding, etc...</em>
</li>
<li>Make sure they are willing to work with the team</li>
</ul><h1>Common mistakes iOS developer applicants and candidates make</h1><ul>
<li>Not having broad knowledge of various solutions an app may need: <em>Data Storage, Networking, UI...</em>
</li>
<li><a href="https://share.transistor.fm/s/ffcb9fc1">Some Backend Knowledge</a></li>
</ul><h1>Full Transcription</h1><strong>Leo Dion (Host): </strong>Hey Alex<br><br>[00:00:01] <strong>Alex Bush (Guest): </strong>Hey Leo <br><br>[00:00:01] <strong>Leo Dion (Host): </strong>how are you doing, sir? <br><br>[00:00:02] <strong>Alex Bush (Guest): </strong>Great. How are you doing? <br><br>[00:00:04] <strong>Leo Dion (Host): </strong>Fantastic glad to have Alex Bush on from IOS interview guide and inside iOS Dev podcast. If you are interested in iOS development, you should definitely check his podcast out. Alex, what are you up to right now? <br><br>[00:00:21] <strong>Alex Bush (Guest): </strong>I am sort of getting up to speed after Microconf and vacation.<br><br>[00:00:27] <strong>Leo Dion (Host): </strong>I hear you. I'm in the same boat microconf and peers and vacation and starting a new contract. So I know where you're coming from. <br><br>[00:00:35] <strong>Alex Bush (Guest): </strong>Right and yeah, and I'm Contracting as well iOS so doing that getting up to speed on that  <br><br>[00:00:42] <strong>Leo Dion (Host): </strong>Who are you working with right now? <br><br>[00:00:43] <strong>Alex Bush (Guest): </strong>Currently with Uber. Yeah, Silicon Valley, you know all the companies, around probably be looking for another gig soon enough. <br><br>[00:00:53] <strong>Leo Dion (Host): </strong>Yeah. If you are interested in architecture, definitely check Alex's podcast out like your specialty really is in helping iOS developers get jobs and specifically the interview process, correct. <br><br>[00:01:11] <strong>Alex Bush (Guest): </strong>Yes, that's sort of been my aim my focus lately last couple of years. Yeah, I wrote a book as you mentioned on the topic helping iOS developers get jobs right prep for interviews. <br><br>[00:01:26] <strong>Leo Dion (Host): </strong>Okay. So if you're like a company hiring iOS developers, what are some things that make interviewing a potential iOS Developer different from - I guess the biggest thing is web developers, right? So what makes it different from hiring your standard web developer. <br><br>[00:01:45] <strong>Alex Bush (Guest): </strong>That's a good question and it's sort of how the whole book thing and helping iOS devs interview started. I was at the time at a different consultancy helping them hire people for their iOS project. And as I was interviewing sort of same things will come up and I would kind of jot some notes take some notes on what to ask what to remember you get to ask and probe as I interview people and in general sort of when you interview, let's say a web developer or just a software developer right you go for a broader software topics, right?<br><br>[00:02:30] Roughly speaking algorithms and then design patterns and architectures, right but overall for software not specific for iOS and I think that's what's different when you're interviewing and hiring iOS people. The one thing is to in the sort of web world and specifically backend world in my opinion.<br><br>[00:02:52] You can hire a generalist and they can adapt. Quick enough I guess but in the iOS world it's very crucial to for for developers to really know very well the the frameworks that they work with and I think that's the main biggest difference when you're interviewing iOS people to sort of aim at that and assess their knowledge not just overall software development knowledge, but specifically iOS development.<br><br>[00:03:23] <strong>Leo Dion (Host): </strong>But I guess like you like it comes to mind because it drives almost everything maybe we'll particulars about UI kit are you thinking people should really know about <br><br>[00:03:34] <strong>Alex Bush (Guest): </strong>it also depends right? Like if you're hiring for just I guess you don't have a heavy UI animation or performance concerns for your project or your app.<br><br>[00:03:46] Then you don't really need a specialist. Who knows. Low-level details some of that right but sometimes for example social networking apps or apps that have social networking aspect of some kind they struggle with scrolling performance. Right? Let's say you have a some sort of a Instagram like feed with pictures infinitives feed that you can scroll and it's dynamically size, right if that's a crucial part of your app.<br><br>[00:04:14] It's important to make the performance buttery smooth right and not every developer. Like this is what in regards of UIKit what you want to dig and assess more in that case <br><br>[00:04:26] <strong>Leo Dion (Host): </strong>Okay, <br><br>[00:04:27] <strong>Alex Bush (Guest): </strong>rather than just overall. You know, what is MVC? Right right. <br><br>[00:04:32] <strong>Leo Dion (Host): </strong>So maybe we should clarify the audience like UI kit is the basic framework for the user interface on iOS. So if you're going to do any. Simple menus tables with navigation UI kit is the bread and butter of that and then like Apple kind of they teach an MVC pattern or model view controller, which I think correct me if I'm wrong like every developer who does iOS development should know that in an interview correct.<br><br>[00:05:00] <strong>Alex Bush (Guest): </strong>That is correct. Although I would say these days that's a prerequisite to Simply develop for iOS, but to be sort of hired for position. You should know more than that. At least be aware. Right?  <br><br>[00:05:16] <strong>Leo Dion (Host): </strong>I agree. I think that's the very basics what are some other things you should know about <br><br>[00:05:20] <strong>Alex Bush (Guest): </strong>what comes to mind the core apple design patterns, like key-value observation, delegation, Singleton, protocol oriented programming as they call it.<br><br>[00:05:31] <strong>Leo Dion (Host): </strong>Yes. Yeah, <br><br>[00:05:32] <strong>Alex Bush (Guest): </strong>which is basically coding for interfaces. <br><br>[00:05:35] <strong>Leo Dion (Host): </strong>Yes, essentially. <br><br>[00:05:37] <strong>Alex Bush (Guest): </strong>So yeah those things. And I think on top of it you need to know the most common components and tools that you would use such as networking. Right? How does an NSURLSession work? Yes and how you would not block the main thread as you perform in a networking requests so that the UI doesn't freeze things like that.<br><br>[00:06:01] <strong>Leo Dion (Host): </strong>Yeah. So let's break some of those down so like protocol oriented programming. Why would an employer care that a developer knows protocol oriented programming. <br><br>[00:06:12] <strong>Alex Bush (Guest): </strong>So in this specific thing is, you know, a typical developer answer right or developer or consultant answer depends like of course, but let's say if you're building something more than just an MVP one of throw away MVP to just validate your idea. Then what you're building needs to live through multiple iterations of development, right and protocol oriented programming is let's just say an approach to development coding that would facilitate extracting abstractions in your code and then later for other developers to build on top of and use <br><br>[00:06:56] <strong>Leo Dion (Host): </strong>I think it is like, you know, they toss to use the word protocol. The word interface is used in a lot of other programming languages, but the way I think about it is a protocol is like a contract. It says that this object will do these things and it agrees upon it and that just allows a lot of developers to know - okay, I need to like these are the requirements that it needs. This is what I'm testing for that this object actually will do that to me is like one of the benefits of that and if a developer you hire knows that. They may not know the term protocol oriented programming especially if they're from another language, but the idea of like this interface first. This protocol first design just introduces so much more convenience has and makes it easier for testing for architecture and things like that. I think that's kind of what you're getting at, right? <br><br>[00:07:47] <strong>Alex Bush (Guest): </strong>Yeah. That's a way better way to put it - contract essentially and that will help you structure your code in a way that its building blocks right as an example of that. You could if you don't do protocol oriented or interface oriented to few will development approach you and let's say your app needs to have some offline mode right where you store data offline and when there is network connection it still displays something to the user you could in a naive approach without protocol oriented programming would be to just hard code that and save that in memory- let's say in your view controller, right. But then later when the next developer comes to iterate on that and make some changes to persist that actually to disk so that the app displays that data even after its killed not just in offline mode then if you don't do protocol oriented programming then for the next developers it's harder to figure out how it was originally done but if you do protocol oriented, you have a clear interface and let's say a storage interface or protocol and then the next developer  clearly sees - oh, okay. So I just adopt the storage protocol for my new thing that not just saves in memory, but also saves to disk the data I want to have offline something like that.<br><br>[00:09:15] <strong>Leo Dion (Host): </strong>Yeah totally makes sense. Because if you allow that agility of any developer coming in and changing how something is done, but the important thing is that that object does what it says it does. And then like yeah, I think your point about like URL sessions, networking ,and understanding how that works with the UI is so important because then you get into like some threading stuff, background threads ,and Global thread, the main thread  and all that as well. Because the last thing you want in an app is a crappy UI that freezes on your because it's trying to pull data from the internet.<br><br>[00:09:48] <strong>Alex Bush (Guest): </strong>Right? I would say if we're talking about interviewing iOS developers right for your project or your company the advice I would give - sometimes you need Specialists, right? So what we talked about is sort of general overall what every iOS Developer is supposed to know but sometimes you need a specialist. Let's say your app is heavy on video right? Then likely you need AVFoundation expert that would be another framework. AVFoundation is Apple's framework that helps you work with audio and video. <br><br>[00:10:26] <strong>Leo Dion (Host): </strong>Another one I can think of is like HealthKit if you're doing anything in the health or Fitness space like you're going to need to know something like that <br><br>[00:10:32] <strong>Alex Bush (Guest): </strong>or let's say you are app connects to Bluetooth peripherals or devices, right? You need someone with BLEframework experience. So that's not necessarily your typical developer like such as myself. I don't know neither of those things, right? I worked with a AVFoundation maybe twice in my life, but that's not something I'm interested in so I didn't specialize in that. But some other other devs did and they like it. And then again right when you interview I don't know. Let's say you putting together a team of three maybe you need two general iOS devs" but then one specialist in AVFoundation, so keep that in mind, right then we are interview process should be focused more on. Oh do they know AVFoundation? They might be lacking in well roughly speaking is an example knowledge of storage and how to store and persistence that we just talked about. But they're really really really good at doing video stuff. That's what you need maybe.<br><br>[00:11:34] <strong>Leo Dion (Host): </strong>I think it's a really good point because like that's one of the struggles I see with like the iPhone is a lot of apps kind of do the same thing over and over again.<br><br>[00:11:43] There's so much potential out there with all the different Frameworks and a lot of businesses don't know how to take advantage of those Frameworks and then they don't know how to find the expertise in that area. Like I've done work with HealthKit, you know going to the Apple watch of worked with WatchKit.<br><br>[00:12:02] So I totally understand how those are really really deep Frameworks and there's a lot to know in those areas. <br><br>[00:12:11] <strong>Alex Bush (Guest): </strong>I think that that's the challenge for an employer right [or] for a company if you're not. I think if you're not a developer or a specific iOS developer yourself, it might be hard to define what do I even need? Right? I just want this app to look good and again, maybe show videos, right? <br><br>[00:12:31] Probably that's where you would want to hire maybe for a shorter period of time like for a few hours or days more experienced developers, more senior developer, maybe architect would take a look at your project and your idea , your proposal whatever you have and give you a well - I guess list of Frameworks involves potentially. <br><br>[00:12:53] <strong>Leo Dion (Host): </strong>Yeah, it's almost like you need like a consultant to come on and 99% of people don't know about all these Frameworks. They know - I'm going to do video or I want to track people's heart rate. The frameworks are completely outside of people's knowledge and rightfully so. That's where you might - I know I want to target iPhone. Like okay. I need a consult come in and tell me how much work does this involve and what expertise I'm looking for? And I think that would be very helpful to a lot of business owners and a lot of CTOs who are just looking for somebody to come in and kind of give them an idea of what needs to be done.<br><br>[00:13:32] <strong>Alex Bush (Guest): </strong>Yeah, I remember when I was running my small agency, small consultancy. We had usually two people including myself working on projects, but occasionally we would actually get outside help of an iOS expert in a particular framework. I believe our case was BLE, Bluetooth. Neither of us knew how to work with it. It was kind of complex and we were on a crunch time. So we hired someone for I believe like a week to just get us up to speed on how it works. And the pitfalls and then from there we took the prototype code and just improve that. <br><br>[00:14:14] <strong>Leo Dion (Host): </strong>Yeah, you know it makes me think of like when I have work done on the house. Like we had like the basement finished a couple of years ago like we brought somebody to come in. <br><br>[00:14:25] They had a specific person that did plumbing, a specific person that did electrical, a specific person that did drywall. And I think like that's something to keep in mind with some of these Frameworks is like, you know you what you need is like some consultant coming in to manage that and be able to like help figure out: okay what you actually need when you interview an iOS Developer. <br><br>[00:14:48] <strong>Alex Bush (Guest): </strong>I think the challenge comes, unlike in the web world, those specialties are clearly defined. I think at least [that's] my impression. And it's easy for example to find a Stripe expert for PHP or something but a bit harder for iOS right like a payment expert Apple Pay or something for iOS. I personally haven't seen many of those. <br><br>[00:15:14] <strong>Leo Dion (Host): </strong>Yeah, yeah. <br><br>[00:15:15] <strong>Alex Bush (Guest): </strong>But again, if you know that if that's what you need at least in your interview process those are the questions you want to be asking: how does that work? Can you walk me through it explained the whole system over. All right, and then maybe minutiae details -  something like that. <br><br>[00:15:31] <strong>Leo Dion (Host): </strong>I think the other thing is [and] I think this is with finding [all] developers who can learn because you know, you may not know until you get into it, you know, but okay, there are common patterns. Like you said, the delegation pattern that Apple uses that is used throughout every framework and being able to kind of go with the flow with whatever the team is and being able to learn new things.<br><br>[00:15:54] <strong>Alex Bush (Guest): </strong>Right. Well, yeah, I guess as you said that's a general software developer trait, if you will.<br><br>[00:16:01] <strong>Leo Dion (Host): </strong>Right, it's not necessarily iOS specific.<br><br>[00:16:05] <strong>Alex Bush (Guest): </strong>Right. And that's actually an interesting thing that an observation i've had over the last four years sort of. You want more of that of the general software knowledge and experience down the road as your app grows basically. And by app growth i mean the amount of code and number of people working on it.<br><br>[00:16:29] So roughly speaking just to simplify, Uber today doesn't need anyone just a general iOS dev who knows MVC. There is a way more complex architecture there that allows hundreds of people to more than a hundred people working in the same app at the same time.<br><br>[00:16:50] That's where it just doesn't cut it anymore. Right? So we need someone more advanced and architecture. For example. <br><br>[00:16:58] <strong>Leo Dion (Host): </strong>Yeah exactly. What are some stories or what are some things you've seen happen during the interview process that companies have completely failed at or the traps they fall into <br><br>[00:17:12] <strong>Alex Bush (Guest): </strong>my personal favorite, although not everyone agrees with me or rather not favored, but the opposite of favorite - companies asking all the algorithmic questions.<br><br>[00:17:24] <strong>Leo Dion (Host): </strong>Mmm <br><br>[00:17:25] <strong>Alex Bush (Guest): </strong>and all the - I mean, I'm joking. No one else did, but all the bubbles sorts of the world, right? <br><br>[00:17:32] <strong>Leo Dion (Host): </strong>Yes. <br><br>[00:17:33] <strong>Alex Bush (Guest): </strong>In the iOS world specifically, that does not make much sense because again unlike with back-end web world to be productive your general software knowledge, I mean it's necessary yes, but it's not as crucial.<br><br>[00:17:50] To be more productive you need to know more of iOS rather than more of general software algorithms. because unlike the backend we don't deploy multiple server instances to scale and propagate route balancing all of that stuff right and have a great algorithm for that. <br><br>[00:18:10] <strong>Leo Dion (Host): </strong>Yeah. I think that there's a divide between software that's written for performance and software that's running for maintenance. I think that differentiation is it made sometimes so that during the interview process you're going to ask. How do you write the fastest bubble sort? I think like unless you're doing machine learning or like high intense graphics where you're actually managing memory and CPU and that kind of stuff for the most part you want to write code that is easily maintainable.<br><br>[00:18:41] And that's where things like protocol oriented programming becomes important or like knowing the different patterns. And I think that -yeah, I totally agree with you a hundred percent. I've done interviews with like I think I did an interview with Amazon. They'll ask you all sorts of like oh, how do you sort this? How do you do a tree like this blah blah blah? And I like all I wanted to ask was wait. Do I have to relocate to take this position? Because I'm not moving it was like why are you wasting my time asking me these questions when like you haven't even like answered basic questions about whether I'm going to want to take the job if I know how to do it and it was this like, yeah...<br><br>[00:19:20] <strong>Alex Bush (Guest): </strong>Every time I hear those questions on interviews my question and response: oh, is that what I'm going to be doing at work if you actually like offer me the job. <br><br>[00:19:30] <strong>Leo Dion (Host): </strong>Yeah.<br><br>[00:19:30] <strong>Alex Bush (Guest): </strong>But the answer is no, right 99% of the time so<br><br>[00:19:34] <strong>Leo Dion (Host): </strong>You write code for maintenance and then 90 percent of companies, [if] the code is slow they either buy a bunch more CPUs and memory and then you know on top of it like you just want the code to be maintainable because there's already 52 libraries that do bubble sort better than any amount of optimization you can do so I totally agree with you. I'm glad you brought that point up. <br><br>[00:19:57] <strong>Alex Bush (Guest): </strong>Right. Yeah, as you said your code is 10 times more likely to change rather than to be slow on iOS so you optimize for that as you interview the people who can make it easier to change rather than faster. <br><br>[00:20:13] <strong>Leo Dion (Host): </strong>Yeah. I think it's a really really great point. Maintainability [and] testability are much more important than optimizing for speed or the best  - what is it? - like O^n or O^n squared algorithm? <br><br>[00:20:25] <strong>Alex Bush (Guest): </strong>Yeah that. <br><br>[00:20:26] <strong>Leo Dion (Host): </strong>So question that I wanted to bring up was - I wanted to go back to this - but developing UI on iOS. There's a lot of people who have a hundred opinions about the best way to maintain a UI in a code base. <br><br>[00:20:45] <strong>Alex Bush (Guest): </strong>I do too by the way. <br><br>[00:20:46] <strong>Leo Dion (Host): </strong>Yeah, I bet you did. So we have like storyboards which is the way xcode and Apple probably wants us to do it. You could write UI by code. In the interview process, what is the best way without getting too opinionated as the interviewee. What is the best way to ask those questions to know whether someone might be a good fit? Does that make sense? Because I don't want to get into like a storyboard versus code your own UI debate.<br><br>[00:21:17] But I'm more want to know like if you're interviewing somebody how do you know that they know how to build a good UI and work with your team. Does that make sense? <br><br>[00:21:27] <strong>Alex Bush (Guest): </strong>It does and I think the best way to gauge that is to look at the work they've done already right? Do they have a well-polished UI app in their portfolio, right or list of companies or projects they've worked on. And personally what I would do, right? I don't know if that's the right approach. But if I interview, I would want to know if regardless of what the person prefers or you prefer, right? Do they prefer storyboards or they prefer writing everything in code? I want for them to tell me the pros and cons of each option.<br><br>[00:22:08] And when to use each option that way, I will you know, hopefully hear from them that they know taht there are trade-offs for one approaching another. And at some point it breaks down right or in some cases it doesn't make sense. And specifically I'm talking about let's say storyboards don't  breakdown on scale when you have I don't know more than 20 people let's get working on that app. But then it doesn't make sense to do it right away as your one or two people team. <br><br>[00:22:42] <strong>Leo Dion (Host): </strong>Yes. <br><br>[00:22:43] <strong>Alex Bush (Guest): </strong>Something like that, right at least some reasoning like that because if they don't have it and the answer is oh, I just been doing storyboards all the time because Apple said so that is not a good answer.<br><br>[00:22:54] That means they don't think why they do it. That means the likely it's going to be difficult for them to adapt or impossible even when the scale grows to more than 20 people and then storyboards don't work anymore. <br><br>[00:23:07] <strong>Leo Dion (Host): </strong>Yep. I think it's a really good point. I think this goes with all interview questions. I mean there is right or wrong answers, but it's more are they reasoning this out well.<br><br>[00:23:16] <strong>Alex Bush (Guest): </strong>Right yeah.<br><br>[00:23:17] <strong>Leo Dion (Host): </strong>Do they understand the basics because yeah, I agree with you completely. It's like, okay. Do you know why you're doing what you're doing? And are you aware of other ways and then how do you work with large teams especially when you're building UI if you want to do storyboard or if you want to code it. Like what are some pitfalls? I think that's a really great point. <br><br>[00:23:39] <strong>Alex Bush (Guest): </strong>Another thing sort of related to that comes to mind. It's my personal opinion though. But still it's an observation over the years. The other thing you kind of want to gauge as how much do they agree or not agree... That's not the right word. But how much do they follow what Apple says - and you do need to follow what Apple says most of the time right? But again, are you still aware of the trade-offs? <br><br>[00:24:08] <strong>Leo Dion (Host): </strong>Can you give an example of a apple guideline? <br><br>[00:24:11] <strong>Alex Bush (Guest): </strong>It's the overall model view controller thing?  The reason they push it on us all these years and still don't stop.<br><br>[00:24:21] It's an easier design pattern to start with and build a simple app with and that fits their the goals of the company. Apple is a company once more apps. Yes. They want a better quality apps. What they want more is more apps and much more developers coding for their platform. So that's why they're pushing MVC if you want a better quality app or a bigger app, you can't really use MVC but they never say is that right?<br><br>[00:24:50] They always sort of skew it the other way or if you're not doing MVC you're doing it wrong. That's just as a you know, general from the software architecture perspective. That's not the right answer. Unfortunately Apple keep saying that right and a lot of people still think: Apple is right because it's Apple.<br><br>[00:25:11] <strong>Leo Dion (Host): </strong>Yeah, I think that like, it's also hard to change the ship when it's moving in a specific direction. I wouldn't be surprised if Apple like recommends other UI patterns, but for 99% of developers like they're not going to know. Like if you're already experienced enough you know to look for other patterns anyways. But yeah, I agree like if you're starting off being an iOS developer, you should definitely know MVC is a prerequisite if you know other patterns, I think that's definitely even a greater skill to have during an interview.<br><br>[00:25:44] <strong>Alex Bush (Guest): </strong>Trying to say the same thing if they tell you: oh use MVC because Apple said so then maybe a follow-up question from you should be all but why MVC is good, in what scenarios and what cases? <br><br>[00:25:58] <strong>Leo Dion (Host): </strong>It says a lot for a developer to not like fight going upstream because like you want to go with what Apple already recommends because when version 2 or version 3 of whatever you're working on is based on an Apple framework changes like at least you're ready for when those upgrades and updates happen. As opposed to fighting Upstream with your own custom thing and then finding out like oh it's not compatible anymore because Apple's changed the API. <br><br>[00:26:24] <strong>Alex Bush (Guest): </strong>Yeah, that's true. It's a balance to strike, right?<br><br>[00:26:29] <strong>Leo Dion (Host): </strong>Yeah <br><br>[00:26:30] <strong>Alex Bush (Guest): </strong>On the one hand your working and building an IOS app because you wanted to run on iOS platform, but on the other hand you're actually, building an app right that is your own thing with your own business logic and you don't want it to be too tightly couple it to specific iOS Apple stuff right?<br><br>[00:26:53] but then again, you still run it there. So you kind of have to in some cases that's what it's about. <br><br>[00:26:58] <strong>Leo Dion (Host): </strong>Yeah, and I think it goes back to what we were saying earlier is like if their reasoning is good and they have solid reasons, you know that they're knowledgeable in that space and they can learn and adapt to your team.<br><br>[00:27:09] So the other thing I wanted to ask is what are some pitfalls that people who are interviewed constantly run into when they are being interviewed, <br><br>[00:27:20] <strong>Alex Bush (Guest): </strong>huh? I think I would say basically, I think what I see a lot of developers when they're interviewed the mistake they make is they know only a certain subset of iOS Frameworks, right and the concerns and IOS app has but they don't know others this sort of overall the full circle of it. Specifically they might know how to do UI stuff and networking but they never done any storage or architecture for business logic right? Or doing very little of it and they don't pay attention. Again as we talked about it if you're interviewing for an UI heavy position. Maybe that's good enough, right? You really know your UI stuff very well and low-level details of it and likely then you'd be asked those questions in the interview and you probably pass right.<br><br>[00:28:18] But just in general as you apply right most of the time you kind of need to know more of overall rather than specifics because like let's say you Leo, you and I we team up and you know build an app and it's e-commerce with some social networking feed - let's say right some hybrid of Instagram and Amazon.<br><br>[00:28:42] So to build that you and I can code but let's say we need two more people to help us because timelines. <br><br>[00:28:50] So for that when we will interview people we would ask. Oh, yes. Do you know how to do UI work and networking but also we would want to know: oh, do you know how to do offline and storage stuff right?<br><br>[00:29:07] Because again,  maybe our app needs to persist something offline for reasons. And also on top of it a little bit of a I call it business logic, I guess business logic / architecture / design patterns as with we again talked about it something beyond MVC right at least a little bit. Do you know MVVM and MVP and in what cases to use those and maybe other design patterns like a Factory and Command write something like that?<br><br>[00:29:39] So I think that's the mistake a lot of iOS devs make. They just prep for UIKit UI stuff and networking. They never look into storage all the ways. You can store things on iOS like file storage core data key value storage all of those. <br><br>[00:29:57] <strong>Leo Dion (Host): </strong>Yep, <br><br>[00:29:58] <strong>Alex Bush (Guest): </strong>and they don't look a bit beyond at least a little bit beyond MVC and those design patterns and architecture.<br><br>[00:30:05] <strong>Leo Dion (Host): </strong>Do you think you could just like as iOS developer? You just pick up one framework? And just be like, okay today I'm going to use like core data and then get really knowledgeable about Core Data for this particular app. And then that gives them at least one framework that they can bring to an interview and speak about <br><br>[00:30:23] <strong>Alex Bush (Guest): </strong>In a way, yes, it's possible. Each one of those you can go very deep right but at least I think what I recommend focusing on maybe not even a specific framework but a concern an app has.<br><br>[00:30:42] <strong>Leo Dion (Host): </strong>So like you talked about like storage like you don't have to know particularly like core data, but like okay be able to bring to the company that is interviewing you different ways of doing storage and the pluses are pros and cons of each one.<br><br>[00:30:57] <strong>Alex Bush (Guest): </strong>Precisely. Yeah, because you can implement it with core data or realm or whatever else is out there. Right? I don't even know. But when you and I interview people we would want to know that they're aware of that concern and how to sort of overall approach on how to solve it and what it does rather than the details of how to do it because that's what they'll figure out on a job.<br><br>[00:31:22] <strong>Leo Dion (Host): </strong>Yes. <br><br>[00:31:23] <strong>Alex Bush (Guest): </strong>So that. I would say there are four big concerns, right? That's the UI, networking, storage, and business logic. So that's the pitfalls I think for interview is not knowing those four overall. <br><br>[00:31:39] <strong>Leo Dion (Host): </strong>I think it's a really good point is yeah, a lot of people can just obsess over UIKit in the very basics of you.<br><br>[00:31:45] I can't without knowing, you know that to build an app. You need to store data somewhere. If you need to call the web you need to do notifications. For instance. That's a whole elephant that we haven't even gotten to but I think it's a really good point. Is there anything else you wanted to talk about? As far as for people who are doing interviewing other iOS developers.<br><br>[00:32:09] <strong>Alex Bush (Guest): </strong>One more thing for interviewees. I guess that's not more or less for interviewers. You will get a lot of points on your interview if you're actually know a little bit of a back-end. Maybe not how to code it but at least how it works, right because as an iOS dev, you likely constantly will need to work with back-end people <br><br>[00:32:31] <strong>Leo Dion (Host): </strong>so maybe like the basics of what a rest API or GraphQL back end should do okay <br><br>[00:32:38] <strong>Alex Bush (Guest): </strong>and how to establish those contracts. What are the best practices there ... Things like that.<br><br>[00:32:44] <strong>Leo Dion (Host): </strong>Yeah. It's a really good point. I'm just surprised at how many iOS developers don't know anything about the back end. <br><br>[00:32:50] <strong>Alex Bush (Guest): </strong>Yes, it sort of makes sense to a degree they're specializing in iOS right there not those general software developers, but still it helps to know and in a lot of cases.<br><br>[00:33:04] The API design the backend API design will be driven by the front end people which means iOS people right? <br><br>[00:33:13] Yep. <br><br>[00:33:13] So the more knowledgeable you are maybe that applies more to sort of architect if you have a team, but if you're solo person you need to know that. As you mentioned it like at least know what restful is best practices there with my experience in one of the companies I worked at.<br><br>[00:33:31] That got out of hand so bad that we were sending 5 megabytes payloads of JSON down with each request to iOS and then parsing that took forever on the older devices like iPhone 4. Yeah, so they had to do client-side hacks to parse only lazily portions of the JSON and the rest on demand, so that is something that as an iOS developer, you should stop before it even comes to it.<br><br>[00:34:04] You need to be aware of what's going on with their API right that you're consuming and are they are you guys as a team keep shopping more data in it and not deprecating and migrating and having versions or something like that. <br><br>[00:34:18] <strong>Leo Dion (Host): </strong>Yeah, it's wow. Five big Json files. <br><br>[00:34:22] <strong>Alex Bush (Guest): </strong>I know right? <br><br>[00:34:24] <strong>Leo Dion (Host): </strong>Well, thank you so much for coming on the podcast and talking about this.<br><br>[00:34:28] I think there's a lot of companies that have no idea and just need help interviewing and finding iOS devs and it can be a real challenge. I know I know it's hard just recruiting people let alone interviewing them. <br><br>[00:34:41] <strong>Alex Bush (Guest): </strong>Right? Yeah. Yeah my pleasure and again, you know, it's been a passion of mine on the other side right help iOS devs to get jobs, but I understand the pain and that's where I originally came from the pain of how do I access and know that the person I'm hiring is actually knows what they're doing and everything that you know, they need <br><br>[00:35:05] <strong>Leo Dion (Host): </strong>so if you're someone who's looking for an iOS job. How does your book help them or tell me a little bit about the book and how it guides iOS developers in the interview process. <br><br>[00:35:18] <strong>Alex Bush (Guest): </strong>Overall. The book actually does what we talked about is those four areas of concern. Like UI, networking, storage, and business logic it gives you an overview of all those options that you have in each area of concern right like back to the storage option.<br><br>[00:35:37] Oh you can press store things in memory or you can store them key value storage right in as user default. So you can store things in files or it database like core data and so on. So it gives you this overview right without going into deep into details of how they work like specifically core data or something like that.<br><br>[00:35:59] But at least it tells you: oh here are the options that you have and in some scenarios you you want to use this or another option. That's what the book talks about. It kind of perhaps you overall. If you want to dig deeper, you can go ahead and research on specific topics. But yeah that overview was lacking before I wrote the book. So that's why I decided to do that <br><br>[00:36:23] <strong>Leo Dion (Host): </strong>Awesome. So where can I find the book at?<br><br>[00:36:26] <strong>Alex Bush (Guest): </strong>Its iOSinterviewguide.com <br><br>[00:36:28] <strong>Leo Dion (Host): </strong>awesome and then your podcast is insideiOSdevs.com, correct? <br><br>[00:36:32] <strong>Alex Bush (Guest): </strong>Yep. <br><br>[00:36:33] What do you talk about on that podcast specifically?<br><br>[00:36:36] So this podcast is for developers and we talked mostly I guess architecture and design questions sort of higher level, you know, everything beyond MVC.<br><br>[00:36:46] <strong>Leo Dion (Host): </strong>Okay. Awesome, so you can be found on Twitter at?<br><br>[00:36:53] <strong>Alex Bush (Guest): </strong>@alex_v_bush<br><br>[00:36:55] <strong>Leo Dion (Host): </strong>Awesome that'll be all in the show notes. And then you can find this podcast we are on brightdigit so @brightdigit on Twitter also you can find my website brightdigit.com for more info about the services that brightdigit offers when it comes to iOS development. Alexm again. Thank you for coming on. <br><br>[00:37:16] <strong>Alex Bush (Guest): </strong>Thank you for inviting me on.<br><br>[00:37:18] <strong>Leo Dion (Host): </strong>Welcome, and we will talk to you later. Bye.<br><br><br><br><p><strong><a rel="payment" title="★ Support this podcast on Patreon ★" href="https://www.patreon.com/empowerappsshow">★ Support this podcast on Patreon ★</a></strong></p>]]>
      </content:encoded>
      <pubDate>Sun, 05 May 2019 00:05:00 -0400</pubDate>
      <author>Leo Dion, Principal CEO and Swift Developer at BrightDigit </author>
      <enclosure url="https://chtbl.com/track/51E5/media.transistor.fm/36e5889a.mp3" length="17671042" type="audio/mpeg"/>
      <itunes:author>Leo Dion, Principal CEO and Swift Developer at BrightDigit </itunes:author>
      <itunes:image href="https://images.transistor.fm/file/transistor/images/show/122/full_1533929410-artwork.jpg"/>
      <itunes:duration>2242</itunes:duration>
      <itunes:summary>In this episode we talk with Alex Bush (@alex_v_bush), Author of @iosinterviewgd and co-host of @insideiosdev. Alex talks about the process of interviewing potential iOS developers, what are some questions employers should ask, and what makes an iOS developer different from other developer positions.</itunes:summary>
      <itunes:subtitle>In this episode we talk with Alex Bush (@alex_v_bush), Author of @iosinterviewgd and co-host of @insideiosdev. Alex talks about the process of interviewing potential iOS developers, what are some questions employers should ask, and what makes an iOS devel</itunes:subtitle>
      <itunes:keywords>hiring developers, iOS, UIKit, iO</itunes:keywords>
      <itunes:explicit>No</itunes:explicit>
      <googleplay:explicit>No</googleplay:explicit>
    </item>
    <item>
      <title>External Developers with Jaim Zuber</title>
      <itunes:episode>11</itunes:episode>
      <itunes:title>External Developers with Jaim Zuber</itunes:title>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:block>No</itunes:block>
      <googleplay:block>No</googleplay:block>
      <guid isPermaLink="false">7d695594-25b8-4958-bc05-1c132630a6e2</guid>
      <link>https://share.transistor.fm/s/d746d2ff</link>
      <description>In this episode, we talk with Jaim Zuber of Sharp Five Software of what companies should know when hiring an outside contract developer.</description>
      <content:encoded>
        <![CDATA[<strong>Previous Episode</strong><ul><li>
<a href="https://share.transistor.fm/s/00603d96">Episode 6 - Project Estimation</a> </li></ul><h1>Guest: Jaim Zuber of Sharp Five Software </h1><a href="https://sharpfivesoftware.com">Sharp Five Software</a><a href="https://jaimzuber.com">Jaim Zuber Blog</a><h1>March 25 Apple Event</h1><ul>
<li>Not following Apple Events </li>
<li>Cable Cutters</li>
<li>New Macs</li>
</ul><h1>What does that mean working with external developers?</h1><ul>
<li>Types of Developers</li>
<li>Employees vs. Consultants</li>
<li>Mobile Developer vs. iOS Developer</li>
<li>Types of Consultants</li>
</ul><h1>What is the best way to know you have a good developer?</h1><ul>
<li>How about “cheaper” developers?</li>
<li>What are other gotchas with developers?</li>
</ul>Follow Jaim at <a href="https://jaimzuber.com">jaimzuber.com</a><br><br><br><br><p><strong><a rel="payment" title="★ Support this podcast on Patreon ★" href="https://www.patreon.com/empowerappsshow">★ Support this podcast on Patreon ★</a></strong></p>]]>
      </content:encoded>
      <pubDate>Sat, 20 Apr 2019 23:40:00 -0400</pubDate>
      <author>Leo Dion, Principal CEO and Swift Developer at BrightDigit </author>
      <enclosure url="https://chtbl.com/track/51E5/media.transistor.fm/41c8a2a5.mp3" length="11987559" type="audio/mpeg"/>
      <itunes:author>Leo Dion, Principal CEO and Swift Developer at BrightDigit </itunes:author>
      <itunes:image href="https://images.transistor.fm/file/transistor/images/show/122/full_1533929410-artwork.jpg"/>
      <itunes:duration>1622</itunes:duration>
      <itunes:summary>In this episode, we talk with Jaim Zuber of Sharp Five Software of what companies should know when hiring an outside contract developer.</itunes:summary>
      <itunes:subtitle>In this episode, we talk with Jaim Zuber of Sharp Five Software of what companies should know when hiring an outside contract developer.</itunes:subtitle>
      <itunes:keywords>developers, iOS, team management, consulting, hiring</itunes:keywords>
      <itunes:explicit>No</itunes:explicit>
      <googleplay:explicit>No</googleplay:explicit>
    </item>
    <item>
      <title>Business and IT Applications</title>
      <itunes:episode>10</itunes:episode>
      <itunes:title>Business and IT Applications</itunes:title>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:block>No</itunes:block>
      <googleplay:block>No</googleplay:block>
      <guid isPermaLink="false">00fa1b28-82fa-474a-9f98-868c98c02406</guid>
      <link>https://share.transistor.fm/s/a19efbf9</link>
      <description>In this episode, Leo goes over some of the apps for the Mac, iPad, and iPhone which are used to create, organize or manage for businesses. These include apps for creating video and audio work, managing your social media on the go, dealing with accounting and financials, scheduling meetings and managing communication.</description>
      <content:encoded>
        <![CDATA[<h1>Previous Episodes</h1><ul><li><a href="https://share.transistor.fm/s/a34307ee">Episode 9 - iPad Apps for Businesses and Pros</a></li></ul><h1>Reddit Threads</h1><ul>
<li><a href="https://www.reddit.com/r/macsysadmin/comments/av17s3/business_owners_and_admins_what_are_some_mac_apps/">r/macsysadmin</a></li>
<li><a href="https://www.reddit.com/r/osx/comments/av2tbd/business_owners_what_are_some_mac_apps_that_youd/">r/osx</a></li>
<li><a href="https://www.reddit.com/r/apple/comments/av11nr/business_owners_what_are_some_mac_or_ios_apps/">r/apple</a></li>
</ul><h1>Database Collaboration Tool</h1><ul>
<li>
<a href="https://airtable.com/invite/r/bhvkyqHU?ref=empowerapps">Airtable</a> </li>
<li>
<a href="https://www.filemaker.com?ref=empowerapps">FileMaker</a> </li>
<li><a href="https://ninoxdb.de/en/">Ninox</a></li>
</ul><h1>Managing Devices</h1><ul>
<li>
<a href="https://www.jamf.com?ref=empowerapps">JAMF</a> - Manage Multiple Mac, iPads, and iPhones</li>
<li>
<a href="https://www.reddit.com/r/macsysadmin?ref=empowerapps">More Details</a> </li>
</ul><h1>Managing Software and Disk</h1><ul>
<li>
<a href="http://cl.ly/ehYa?ref=empowerapps">DaisyDisk</a> - Manage and Visualize Disk Space</li>
<li>
<a href="https://brew.sh">Homebrew</a> - Command Line Application Package Installer</li>
</ul><h1>Creative Apps</h1><ul>
<li>
<a href="https://www.adobe.com?ref=empowerapps">Adobe Creative Cloud</a> - Includes Photoshop, Illustration, Audition, Premier and more...</li>
<li>
<a href="https://ulysses.app?ref=empowerapps">Ulysses</a> - Distraction Free Writing App</li>
<li>
<a href="https://www.filmicpro.com?ref=empowerapps">FiLMiC Pro</a> - Professional Video Recording App</li>
<li>
<a href="https://itunes.apple.com/us/app/filmic-remote/id661488661?ref=empowerapps">FiLMiC Remote</a> - Companion App for FiLMiC Pro</li>
</ul><h1>Marketing Apps </h1><ul>
<li>
<a href="https://buffer.com?ref=empowerapps">Buffer</a> - Manage Social Media Queues</li>
<li>
<a href="https://itunes.apple.com/us/app/facebook-pages-manager/id514643583?mt=8&amp;ref=empowerapps">Facebook Page</a> - Manage Your Facebook Page</li>
<li>
<a href="https://itunes.apple.com/us/app/google-analytics/id881599038?mt=8&amp;ref=empowerapps">Google Analytics</a> - Visual Your Analytics from your Phone</li>
<li>
<a href="https://itunes.apple.com/us/app/wordpress/id335703880?mt=8&amp;ref=empowerapps">Wordpress</a> - Post to and Edit Your Website</li>
<li>
<a href="http://eepurl.com/bYTdu5?ref=empowerapps">MailChimp</a> - Manage your Email List and Campaigns</li>
<li>
<a href="https://zoom.us">Zoom</a> - Conference Calling App</li>
</ul><h1>Communication and Todo Apps</h1><ul>
<li>
<a href="https://fullcontact.com/a/NKPG99?ref=empowerapps">FullContact</a> - Manage Multiple Different Address Books</li>
<li>
<a href="https://slack.com?ref=empowerapps">Slack</a> - Chat Application</li>
<li>
<a href="https://doodle.com?ref=empowerapps">Doodle</a> - Setup Polls, especially for Meetings</li>
<li>
<a href="https://todoist.com/r/leo_dion_figxjc?ref=empowerapps">Todoist</a> - Todo app, pro version includes sharing of tasks</li>
</ul><h1>Finances Apps</h1><ul>
<li>
<a href="https://www.referquickbooks.com/s/Leo012?ref=empowerapps">Quickbooks</a> - Business Accounting</li>
<li>
<a href="https://dl.tglapp.com/genius-scan?ref=empowerapps">Genius Scan</a> - Scan Documents From Your Phone</li>
<li>
<a href="http://ssqt.co/mQdF0Oy?ref=empowerapps">Receipt Bank</a> - Scan Receipts and Hook up to your Quickbooks</li>
<li>
<a href="https://www.expensify.com?ref=empowerapps">Expensify</a> - Scan Expense Receipts and Hook up to your Quickbooks</li>
<li>
<a href="https://www.waveapps.com?ref=empowerapps">Wave</a> - Business Accounting</li>
<li>
<a href="https://www.paypal.com">Paypal</a> - Transfer Money</li>
</ul>Music by <a href="https://icons8.com/music/author/bimbotronic">Bimbotronic</a> from <a href="https://icons8.com/music">Fugue</a><br><p><strong><a rel="payment" title="★ Support this podcast on Patreon ★" href="https://www.patreon.com/empowerappsshow">★ Support this podcast on Patreon ★</a></strong></p>]]>
      </content:encoded>
      <pubDate>Sat, 09 Mar 2019 23:55:00 -0500</pubDate>
      <author>Leo Dion, Principal CEO and Swift Developer at BrightDigit </author>
      <enclosure url="https://chtbl.com/track/51E5/media.transistor.fm/c12e8283.mp3" length="8697188" type="audio/mpeg"/>
      <itunes:author>Leo Dion, Principal CEO and Swift Developer at BrightDigit </itunes:author>
      <itunes:image href="https://images.transistor.fm/file/transistor/images/show/122/full_1533929410-artwork.jpg"/>
      <itunes:duration>1081</itunes:duration>
      <itunes:summary>In this episode, Leo goes over some of the apps for the Mac, iPad, and iPhone which are used to create, organize or manage for businesses. These include apps for creating video and audio work, managing your social media on the go, dealing with accounting and financials, scheduling meetings and managing communication.</itunes:summary>
      <itunes:subtitle>In this episode, Leo goes over some of the apps for the Mac, iPad, and iPhone which are used to create, organize or manage for businesses. These include apps for creating video and audio work, managing your social media on the go, dealing with accounting </itunes:subtitle>
      <itunes:keywords>technology, apple, business, iPhone, Mac, osx, macOS, iPad, Apple Watch</itunes:keywords>
      <itunes:explicit>No</itunes:explicit>
      <googleplay:explicit>No</googleplay:explicit>
    </item>
    <item>
      <title>iPad Apps for Businesses and Pros</title>
      <itunes:episode>9</itunes:episode>
      <itunes:title>iPad Apps for Businesses and Pros</itunes:title>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:block>No</itunes:block>
      <googleplay:block>No</googleplay:block>
      <guid isPermaLink="false">51a2bd67-8c24-431c-86db-671f6be05a04</guid>
      <link>https://share.transistor.fm/s/a34307ee</link>
      <description>With the possibility of new iPad apps out in March, Leo talks about the status of business and professional apps on the iPad. How has it expanded? What are its limitation both in development and monetization? What are some ways to deliver professional and business applications for the iPad?</description>
      <content:encoded>
        <![CDATA[<h1><strong>Apple March Event</strong></h1><ul>
<li><a href="https://share.transistor.fm/s/3ee56c45"><strong>Apple makes moves towards services (Previous Episode - Apple in 2019)</strong></a></li>
<li><a href="https://www.imore.com/apple-march-2019-event-preview"><strong>Apple March 2019 Special Event Preview</strong></a></li>
<li>New <em>Non-Pro </em>iPads and iPad Minis coming out</li>
</ul><h1><strong>History of the iPad </strong></h1><ul>
<li>Is the iPad Still Transitioning Similar to SmartPhones and Notebook Computers did? </li>
<li>Leo's iPad Journey</li>
<li>What makes iPad and iOS work well </li>
<li>What’s the difference between Professional and Business Apps?</li>
</ul><h1><strong>Limitations of the iPad </strong></h1><h1>Hardware Limitations </h1><ul>
<li>Battery Life </li>
<li>Connectors </li>
<li>External Drive Support</li>
<li>Files Management</li>
</ul><h1>UI Issues</h1><ul>
<li>Touch vs Keyboard and Mouse</li>
<li>FaceID and TouchID</li>
<li>Managing Apps and Split Screen</li>
<li>Responsive Web Sites</li>
</ul><h1>App Store Monetization </h1><ul>
<li>Ads</li>
<li>Flat price</li>
<li>In-App Purchases</li>
<li>Subscriptions</li>
<li>Where is Group Licensing?</li>
</ul><h1><strong>Enterprise Licenses </strong></h1><ul>
<li><a href="https://support.apple.com/en-us/HT204460_"><strong>How Enterprise Licensing Works (Apple Support Page)</strong></a></li>
<li>What is Enterprise Licensing For</li>
<li>
<a href="https://www.recode.net/2019/1/30/18203231/apple-banning-facebook-research-app"><strong>How did Facebook abuse Enterprise Licensing? (Recode Article)</strong></a><strong> </strong>
</li>
</ul><h1><br></h1><br><br><p><strong><a rel="payment" title="★ Support this podcast on Patreon ★" href="https://www.patreon.com/empowerappsshow">★ Support this podcast on Patreon ★</a></strong></p>]]>
      </content:encoded>
      <pubDate>Sun, 24 Feb 2019 01:05:00 -0500</pubDate>
      <author>Leo Dion, Principal CEO and Swift Developer at BrightDigit </author>
      <enclosure url="https://chtbl.com/track/51E5/media.transistor.fm/72de1676.mp3" length="15878200" type="audio/mpeg"/>
      <itunes:author>Leo Dion, Principal CEO and Swift Developer at BrightDigit </itunes:author>
      <itunes:image href="https://images.transistor.fm/file/transistor/images/show/122/full_1533929410-artwork.jpg"/>
      <itunes:duration>1979</itunes:duration>
      <itunes:summary>With the possibility of new iPad apps out in March, Leo talks about the status of business and professional apps on the iPad. How has it expanded? What are its limitation both in development and monetization? What are some ways to deliver professional and business applications for the iPad?</itunes:summary>
      <itunes:subtitle>With the possibility of new iPad apps out in March, Leo talks about the status of business and professional apps on the iPad. How has it expanded? What are its limitation both in development and monetization? What are some ways to deliver professional and</itunes:subtitle>
      <itunes:keywords>iPad, FaceBook, Enterprise, App Store, In-App Purchases, </itunes:keywords>
      <itunes:explicit>No</itunes:explicit>
      <googleplay:explicit>No</googleplay:explicit>
    </item>
    <item>
      <title>Cloud and Backend Services For Apps</title>
      <itunes:episode>8</itunes:episode>
      <itunes:title>Cloud and Backend Services For Apps</itunes:title>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:block>No</itunes:block>
      <googleplay:block>No</googleplay:block>
      <guid isPermaLink="false">ccc45750-1ab9-44f2-a91e-509fe889ff7d</guid>
      <link>https://share.transistor.fm/s/ffcb9fc1</link>
      <description>In this episode, Leo talks different backend technologies to use when building an iOS app or any other Apple device: when you need a cloud service, running on your own server, cloudkit, firebase, and more...</description>
      <content:encoded>
        <![CDATA[<h1>Previous Episodes</h1><ul>
<li><a href="https://share.transistor.fm/s/3ee56c45">Episode 7 - Apple 2019</a></li>
<li><a href="https://share.transistor.fm/s/00603d96">Episode 6 - Project Estimation Episode</a></li>
</ul><h1>Define Whether You Do Need Cloud or Backend Services</h1><strong>You Do Not Need If…</strong><ul>
<li>Privacy-Sensitive Data</li>
<li>No Cloud Backups Needed</li>
<li>Already Storing Using a Third Party APIs</li>
<li>Example App Developed by <a href="https://brightdigit.com/">BrightDigit</a> - <a href="http://cegeniusnurses.com/">CE Genius</a>
</li>
</ul><strong>You Do Need If..</strong><ul>
<li>Multiple Devices In Sync </li>
<li>Cloud Backups Nessecary</li>
<li>Example App Developed by <a href="http://www.shinyfrog.net/">Shiny Frog</a> - <a href="https://bear.app/">Bear</a>
</li>
</ul><h1>What To Consider When Deciding How To Store Data?</h1><ul>
<li>MVP vs Enterprise<ul><li>What is an MVP? Most Viable Product</li></ul>
</li>
<li>Start With the User - <a href="https://share.transistor.fm/s/00603d96">Project Estimation Episode</a>
</li>
<li>What Devices Does the App Support?</li>
<li>How Complex is the Data and Queries?</li>
<li>Are Outside Jobs Needed? <ul><li>Such as Cron Jobs, Backups, Push Notifications, etc…</li></ul>
</li>
<li>Consider Prices - Bandwidth and Storage</li>
<li>Consider Developer Team’s Comfort Level</li>
<li>Develop Abstracting User Experience From Data Layer</li>
</ul><h1>Build a Custom Web App</h1><strong>Virtual Machine Options</strong><ul>
<li><a href="https://aws.amazon.com/ec2/">Amazon EC2</a></li>
<li><a href="https://www.linode.com/?r=97e09acbd5d304d87dadef749491d245e71c74e7">Linode</a></li>
<li><a href="https://m.do.co/c/255904441a32">Digital Ocean</a></li>
</ul><strong>Web App Options</strong><ul>
<li><a href="https://kubernetes.io/">Kubernetes</a></li>
<li><a href="https://www.docker.com/">Docker</a></li>
<li><a href="https://www.heroku.com/">Heroku</a></li>
</ul><strong>Database Options</strong><ul>
<li><a href="https://www.mysql.com/">MySQL</a></li>
<li><a href="https://mariadb.org/">MariaDB</a></li>
<li><a href="https://www.postgresql.org/">PostgreSQL</a></li>
<li><a href="https://www.mongodb.com/">MongoDB</a></li>
<li><a href="https://redis.io/">Redis</a></li>
</ul><strong>Programming Options</strong><ul>
<li><a href="http://php.net/">PHP</a></li>
<li><a href="https://nodejs.org/en/">Node.js</a></li>
<li>
<a href="https://docs.microsoft.com/en-us/dotnet/csharp/">C#</a>and <a href="https://dotnet.microsoft.com/apps/aspnet/apis">ASP.NET Web APIs</a>
</li>
<li><a href="https://www.ruby-lang.org/en/">Ruby</a></li>
<li><a href="https://elixir-lang.org/">Elixir</a></li>
</ul><strong>Swift Options</strong><ul>
<li>
<a href="https://vapor.codes/">Vapor</a> -<a href="https://learningswift.brightdigit.com/vapor-swift-backend-review/?utm_medium=web&amp;utm_source=empower-apps-show"> Review</a>
</li>
<li><a href="https://www.kitura.io/">Kitura</a></li>
<li><a href="https://perfect.org/">Perfect</a></li>
</ul><strong>Server Software Options</strong><ul>
<li><a href="https://www.iis.net/">IIS</a></li>
<li><a href="https://www.nginx.com/">Nginx</a></li>
<li><a href="https://httpd.apache.org/">Apache</a></li>
</ul><strong>Other Software Considerations</strong><ul>
<li><a href="https://www.cloudflare.com/">Cloudflare</a></li>
<li><a href="https://newrelic.com/">New Relic</a></li>
<li><a href="http://supervisord.org/">Supervisor</a></li>
</ul><h1>Mobile Backend As A Service</h1><ul>
<li><a href="https://www.sashido.io/">Parse</a></li>
<li>CloudKit</li>
<li>Firebase<ul>
<li>Using Multiple Services </li>
<li>
<a href="https://restfulapi.net/">REST API</a> vs <a href="https://graphql.org/">GraphQL</a>
</li>
</ul>
</li>
</ul>Music by <a href="https://icons8.com/music/author/roman-bulakhov">Roman Bulakhov</a> from <a href="https://icons8.com/music">Fugue</a><br><br><h1>Full Transcript</h1>[00:00:00] <strong>Erik Gillespie (Host): </strong>Hi Leo, it's me. Again. <br><br>[00:00:01] <strong>Leo Dion (Host): </strong>Hey, Eric. Glad to have you on to help host this episode. So today we're going to talk about back-end and cloud services for your IOS app. And I think first we should talk about when you should need a back-end or cloud service because I don't think it's needed in every absolute case when it comes to an IOS app or any mobile app.<br><br>[00:00:25] <strong>Erik Gillespie (Host): </strong>Yeah, I'm really curious to hear what your ideas are on this. <br><br>[00:00:27] <strong>Leo Dion (Host): </strong>So one thing to consider is there's a lot you can get away with without even doing cloud services. The thing with an IOS app is if you're storing your data in something that is like iCloud or in a lot of cases people really don't need the cloud to store their data. They can just sort on their phone itself. I think often times when we think about building an app that's something to think about is like do you really need this stored in the cloud and if you maybe can provide a manual mechanism to backup the data into some sort of iCloud storage as a file that saves a lot of trouble and saves you a lot of time and money quite frankly when you're building your mobile app. And then that way you don't really need a cloud service or a back-end service in a lot of cases. <br><br>[00:01:15] <strong>Erik Gillespie (Host): </strong>What are some situations where you think it's okay to go with a back-end service or on the flip side choose to only or mostly store things directly on your users phones. <br><br>[00:01:27] <strong>Leo Dion (Host): </strong>I think anything that's privacy sensitive. I think you should definitely just store on the phone locally because that's a whole other headache you having to deal with if you're worried about that stuff being stored in the cloud and if it's very simple stuff if it's things that they just need on their phone and if they lose it, it's not the end of the world I think it's totally legitimate to only store that stuff on the phone. Also, if you're using any third party apis in other words. Like let's say you're using Twitter or YouTube or some other API where you're not really storing data. Data that's being stored is essentially being stored in this third party structure than it's not really necessary because you can just use that third party API as your database in many ways.<br><br>[00:02:06] I'll just tell you one case I built an app for nurses and doctors to do continuing education for their career and all that data was just stored in core data, which is essentially a SQL lite database abstraction layer. And so all that stuff was sort of essentially in SQL and it was all sort of locally and there was just a simple option. They don't have the budget for it. They didn't have the timeline for it either. So the simple way we did it is we just have a manual backup process that you can run and it essentially creates a zip file of this data stored as a Json or JavaScript object notation file. And so if they wanted to back up they can just sort it in iCloud and if they ever wanted to restore it they can always restore it back on their iPhone. Where I think a back-end service and a cloud service is really helpful is if you're going to have it available on multiple devices .So for instance I'm a big user of Bear, which is an awesome note taking app that's available on all Apple devices and they use kind of combination iCloud and CloudKit they store their stuff in the back end and then that way if I pull up my notes on a Mac or on my iPad or my iPhone. I always have it accessible because it's all stored in the cloud. I think that's where something like a back-end service is really useful. <br><br>[00:03:19] <strong>Erik Gillespie (Host): </strong>Like when you need to synchronize data across multiple devices <br><br>[00:03:22] <strong>Leo Dion (Host): </strong>Exactly. Yep. So I think that's really where it's really nessecary. As we get into this we'll talk about complexity of like data in any sort of like back-end stuff for notifications ,things like that, that's where we really are going to want to look at having a stuff stored in the cloud somehow <br><br>[00:03:37] <strong>Erik Gillespie (Host): </strong>gotcha. So what are some things to consider when you decide that you do need back-end storage?<br><br>[00:03:42] <strong>Leo Dion (Host): </strong>One thing to consider is timeline and budget and specifically what is the purpose of this app? Is this just a simple MVP or is it more of a long-term app that needs to be well architected when I first starts off? Because if it's an MVP, use something that you know how to use that's easy, that's simple and that's cheap and just get it done and have something that is usable and can be tested by your audience and seeing whether it works according to what you're testing as far as the app's value to the customers.<br><br>[00:04:15] <strong>Erik Gillespie (Host): </strong>Just going to ask if you could briefly explain what you mean by MVP. <br><br>[00:04:18] <strong>Leo Dion (Host): </strong>So by MVP, I mean most viable product if you're familiar with like Lean Startup methodology. So you're just proving to whether this is a product that your customers are actually going to want. And so you're just getting something quickly out there that essentially works and that you can see whether this is something customers want or you need to pivot or you need to change something or something like. Does That that  make sense? <br><br>[00:04:39] <strong>Erik Gillespie (Host): </strong>Yeah, like a bare-bones version of like the basic features that you think that your customers or your users want exactly. <br><br>[00:04:46] <strong>Leo Dion (Host): </strong>Yep. <br><br>[00:04:46] <strong>Erik Gillespie (Host): </strong>Okay. <br><br>[00:04:47] <strong>Leo Dion (Host): </strong>Otherwise if you're building like an Enterprise app for a big Fortune 500 company, you probably are more likely going to want to build something a little bit more robust and customizable. That doesn't necessarily rule out some of the more cheaper options, but it's just something to consider is what do you want to work with in the long term because it's going to be used for quite a while. I think another thing to consider is when you're developing the iOS end of things and you're writing your Swift or Objective-c code to talk to this back-end make sure you have some healthy abstraction with your API communication so that way in case you pivot and use a different service at some point that that's not a big deal to what you view or what you're showing the user on the front end if that makes sense.<br><br>[00:05:27]<strong>Erik Gillespie (Host): </strong> I think so. So do you recommend doing some user-focus design and come up with the kind of data that your users need and then work your way back towards how you would need to store that in some kind of a back-end storage.<br><br>[00:05:40] <strong>Leo Dion (Host): </strong>Yeah, absolutely in an earlier episode. I believe it was episode number 6. We talked about project estimation and one of the first things I do when I have workout app is almost like a little MVP in a way is I build out the storyboard the UI of the app and essentially fake the data to make sure that that data is what the customers want and then go backwards which is exactly what you're saying. So get your UI because that's the most important thing that the users are going to see get that stuff settled and ready before you go in and build the back end in some cases. I think that's a useful rule <br><br>[00:06:16] <strong>Erik Gillespie (Host): </strong>right on. <br><br>[00:06:16] <strong>Leo Dion (Host): </strong>So another thing to consider is what devices you support. Are you only supporting Apple devices - In which case we'll talk about the more Apple centered back ends. Are you also going to support the web? Are going to support Android? Are going to support Windows and Linux desktops? Are you going to support internet of things? Because that all Is something to consider when you're looking at different backgrounds, which we'll talk about in a little bit. And then the other thing to think about is the complexity or simplicity of your queries, which is essentially when you're asked for data back or the data itself.<br><br>[00:06:50] How complex and simple is it? Because some things especially relational data is best done through some sort of SQL database when in  some cases you might be better off with like a document storage type database and all the various other nosql or other types of data structures that you can do with a database so that's something also to keep in mind.<br><br>[00:07:09] <strong>Erik Gillespie (Host): </strong>Okay. And so if I'm understanding correctly some other thing ways that you could approach that is do you need to aggregate your data or you do you need to create filters and view it in a lot of different ways and combine your data set? Is that close? <br><br>[00:07:23] <strong>Leo Dion (Host): </strong>Yeah, that's exactly it. <br><br>[00:07:25] <strong>Erik Gillespie (Host): </strong>Okay, and then on the simple side, it would be I need to look up a user with this ID. I need to look up, you know the single record with this ID or something along those lines. <br><br>[00:07:33] <strong>Leo Dion (Host): </strong>Yeah, exactly. Are you willing to just kind of offload a lot of the complexity of a good query over to the device like your iPhone or is it important to have that stuff on the server and done on the server instead? That's really the question asked. <br><br>[00:07:47] <strong>Erik Gillespie (Host): </strong>Okay. <br><br>[00:07:47] <strong>Leo Dion (Host): </strong>Another thing is do you need any sort of like outside communication or outside jobs, like cron jobs essentially scheduled jobs to be run on a periodic basis. Doing backups - that's another thing we could talk about because that stuff doesn't necessarily come with a lot of the more track cloud level databases that we're going to talk about.<br><br>[00:08:09]<strong>Erik Gillespie (Host): </strong> One of the ideas there is that the user does something that creates data and then you need to be able to do something with that data whether or not they have their phone on. <br><br>[00:08:18] <strong>Leo Dion (Host): </strong>Yes, exactly. Just because you think you might need a Cron job doesn't necessarily mean you might need one. Because in a lot of cases you can just get away with like having the person when they run your app run a particular job that they haven't run in like several days.<br><br>[00:08:32] That's totally a reasonable way to get around not having access to cron jobs is just having the user do it automatically when they run the app. So that's always something to think about. That's just a way to get around the lack of the ability of having cron jobs and last but not least. I think the two other more important ones is what's your developer team comfort level like what's their expertise in that's going to matter a big deal because if their expertise is a .net shop, you probably are just better off having a Windows back end with SQL Server and C# just using like Web API and have at it. If you're already getting a decent price on your Azure instance go for it because that's what your team is an expert in. There's nothing wrong with that. So, you know it all depends. What's your team? What's your price? Because it definitely matters. Does That make sense?<br><br>[00:09:21] <strong>Erik Gillespie (Host): </strong>Yeah it does I mean let your developers the ones who are going to be supporting all of this do what they do best. Yeah, that sounds very empowering. <br><br>[00:09:28] <strong>Leo Dion (Host): </strong>Exactly. So let's talk about the different options. The first option we're going to talk about is probably the most customizable the most robust perhaps and that's just hosting your own server essentially and even that comes with different abstraction layers.<br><br>[00:09:42] So you can buy your own server and have a hosted at a site you can have a virtual machine which is what 99% of people do and get something through like AWS EC2 or Linode or DigitalOcean. I'm doing linode that's like five bucks a month super reasonable and if you listen to any other podcasts in the technical area, I'm sure you can get a really reasonable discount. They are very reasonably priced. You can go that route. <br><br>[00:10:04] If you want to go another layer of abstraction. There's something like Kubernetes. This is Google's thing, but it's open source. I believe even like AWS and Linode or DigitalOcean also host Kubernetes instances, and that's like a software layer of abstraction. I'm not an expert on kubernetes, but that sound about right Erik.<br><br>[00:10:23]<strong>Erik Gillespie (Host): </strong> I think so. I was just going to ask if you would mind explaining a little bit about what some of these are.<br><br>[00:10:28]<strong>Leo Dion (Host): </strong>I am not an expert at them, but they're just simply put it's another way to easily plug in your app into an infrastructure without the headache of setting up an entire machine essentially. People are big fans of kubernetes and for good reason, especially in the dev-op space but that's another layer of abstraction rather than just sending up a whole server essentially. <br><br>[00:10:48] There's of course Docker which is uses Kubernetes as well. And there's other container type instances that you can use. I've used Heroku as well. Heroku is fantastic. If you're just starting from scratch and want  something very little to try out with I highly recommend starting off with Heroku with that.<br><br>[00:11:05] You don't even need to know kubernetes or how to setup an HTTP host or any of that stuff. That's super super easy. And that's also something to consider as well and they're not that expensive. <br><br>[00:11:14] <strong>Erik Gillespie (Host): </strong>I haven't dived into a lot of the specific platforms that you just mentioned, but I'm a little bit familiar with Heroku and I know that some of these platforms I would project don't necessarily support all of the different types of data storage solutions that you might want to host.<br><br>[00:11:30] <strong>Leo Dion (Host): </strong>Or if they do they might charge them at a premium. I mean, that's  part of the problem If anything. And we'll get into that in a little bit.<br><br>[00:11:37] <strong>Erik Gillespie (Host): </strong>Research Is important and don't just pick one and then think it's going to be smooth sailing <br><br>[00:11:43] <strong>Leo Dion (Host): </strong>right like with a virtual machine. You pretty much can put whatever you want to put on it. That shouldn't be a big deal because you have a blank slate to do whatever you want with but with Kubernetes or Heroku you're going to want to look at what databases they actually support. <br><br>[00:11:56] Well, let's just get into like the different database structures you could do you could do like a traditional SQL database like MySQL or Mariadb postgres or if you're doing Microsoft, you have SQL server or if you're really, you know, you're doing some Enterprise and you're a masochist you could always do Oracle<br><br>[00:12:14]<strong>Erik Gillespie (Host): </strong> and have a lot of money. <br><br>[00:12:15] <strong>Leo Dion (Host): </strong>Yeah, exactly. So those are options if you want a more of like a SQL relational database type structure. That's what I like to go with. That's what I'm used to and despite dabbling in nosql I've always found that I almost want to go back home to SQL when it comes to database structure because that's how I think of stuff - in real a relational ways the problem with those is that. And to be more expensive but that's always an option. Heroku has a free option with postgres, which is really nice. If you're doing something small and just want to do a SQL database. <br><br>[00:12:45] <strong>Erik Gillespie (Host): </strong>Yeah, that seems like it would work with the MVP approach very very well. <br><br>[00:12:49] <strong>Leo Dion (Host): </strong>You could always do something like Mongo if you want something more loose and document-based there's redis of course and other key value type database structures as well.<br><br>[00:12:57] So those are your options when it comes to data storage as far as the database is concerned. Programming language again, what is your developer team familiar with: just stick with like PHP? That's still pretty popular; ruby's very popular; nodejs; if you're a .Net shop. There's always C sharp. You can run on that and luckily for us Swift developers. We have a plethora of options right now. <br><br>[00:13:18] There's Perfect; if you're on the Enterprise side of things and we want to stick with Swift I would recommend looking at Kitura by IBM - they're moving fast on that. If you want something more community-based than I would highly recommend Vapor which is what I've worked with and it's really awesome and easy to set up both on development when it comes to xcode or if you're setting it up on a Ubuntu I got Vapor set up on Ubuntu box over on Linode and that worked fantastic. So that's something can consider again. What is your developer team want to do? What's their toolset? What are they familiar with you're going to go find with any of those options.<br><br>[00:13:55] When it comes to running your HTTP server, you have your choice with like Apache which has been around for forever. If you're doing dotnet there's IIS, of course what's really grown in popularity in the last 10 years is nginx because it's so simple and there's a great Community out there and it's much simpler than Apache and that's always something to look at as well. Did I cover everything you can think of as far as server, database, programming language, and abstraction?<br><br>[00:14:20]<strong>Erik Gillespie (Host): </strong> I think in regards to picking a language as well. If you don't have a team then these popular ones are also ones that you can look out for if you're looking for Freelancers to do some one-time development for you. <br><br>[00:14:32] <strong>Leo Dion (Host): </strong>Yes, and if you're looking for a Swift developer who's worked with Vapor contact me <br><br>[00:14:37] <strong>Erik Gillespie (Host): </strong>nice <br><br>[00:14:38] <strong>Leo Dion (Host): </strong>because I've worked with vapor and it's a really fun framework to work with if you're already a Swift developer.<br><br>[00:14:43] We've talked about the main stuff you need but then you're going to need some sort of monitoring security and backups and things like that and that's also something to consider. What I set up to get the app working on Ubuntu for Vapors is I used supervisor which essentially runs the app so that way it can be tunnelled through nginx through the main server and supervisor is really good.<br><br>[00:15:04] If you're looking for security or a CDN or things like that, you definitely want to look at cloudflare. They're pretty reasonable for what you can get for free from them. I would highly recommend checking them out. I don't know if New Relic is specifically PHP related but New Relic is really good for monitoring when it comes to your app.<br><br>[00:15:21]<strong>Erik Gillespie (Host): </strong> I recommend actually testing all of these out. So whichever one you decide actually try it out and make sure that for any kind of security or monitoring that you're able to not just read and understand how to use these tools. You can use them and that they work the way that you think and if you're doing like database restores and recovery and security that you're testing those really well. This is an area of your infrastructure that needs to be pretty rock solid or your entire application will just go down and be unavailable <br><br>[00:15:50] <strong>Leo Dion (Host): </strong>That's a really good point Erik. So some of the advantages of hosting your own is the fact that you can customize everything down to the minutiae, I mean you basically have a whole machine that you can work with that is also the disadvantage because the burden is on you to make sure everything is set up correctly wear as a lot of these other services. They pretty much can take care of everything. All you need to do is write your app code and get your database setup. So that's something to think about. I think the good time to host your own is if you're building Enterprise or long-term application. If you're using something outside of the Apple domain, I think it's something I consider is just hosting your own server or having your own web app.<br><br>[00:16:29] And then if you're doing any sort of complex queries or complex data, definitely you want to take a look at setting up your own SQL database. And if you absolutely need backups or cron jobs or things like that you definitely want to take a look at hosting your own.<br><br>[00:16:43] I would not recommend hosting your own if you need a simple MVP or if you're doing this only on Apple devices or your data is fairly simple. Of course, this is all pertains to what's your price range? What's your developer team Comfort level and things like. That but those are things to consider.<br><br>[00:16:57] <strong>Erik Gillespie (Host): </strong>It sounds like basically if you have simple needs go with the simplest solution and then plan on scaling out from there according to the growth of your own needs. <br><br>[00:17:06] <strong>Leo Dion (Host): </strong>Exactly. And let's be quite honest with ourselves here quite often people are rewriting  web apps all the time. So especially in software nothing's written in stone.<br><br>[00:17:16] So I would definitely think long term but not too long term because in the very long term the stuff is going to be re-written quite frankly keep that in mind as well. I don't know how I put that but so it makes sense Erik. Let's talk cloudkit now, which is Apple's more or less back-end storage. CloudKit is essentially like an abstraction layer of object storage cloud based object data storage.<br><br>[00:17:41] It's a fairly simple to use if you're sticking with iOS it comes with push notifications so you have the ability to do that. It's completely native to Apple. So if you're running a Mac app or an iPad app or using an Apple Watch or Apple TV, it's really easy to do. It also includes a JavaScript component for the web.<br><br>[00:17:59] So you have that ability. If you're doing something web-based. However, there are some disadvantages. Right now, It's probably pretty difficult to use for Android. I say that because there is no like. It is Android use, you know, it's interesting. We talked in the previous episode about Apple's growth in the services space.<br><br>[00:18:17] It'll be interesting to see if they make any moves towards Android with CloudKit June with WWDC because you know if they're putting an iTunes on a Samsung TV, or they're putting Apple music on an echo you'd think they wouldn't mind putting cloudkit on Android, but we'll see about that. I think there's probably ways to get around that with Android.<br><br>[00:18:34] I'm not an Android developer, but I would think there's ways you can call the JavaScript API using Android or at the very least you could like say running ionic or Cordova app and just use JavaScript in that sense using cloudkit. And you know going to the desktop maybe if you're running an electron app, for instance, you might be able to just use cloudkitJS with that so that option is available but like I said there might be an uphill battle. <br><br>[00:18:59] <strong>Erik Gillespie (Host): </strong>Do you happen to know if the JavaScript API can be used from node? Or is it only from the browser? <br><br>[00:19:06] <strong>Leo Dion (Host): </strong>I don't know that that goes to the next point is like would you be able to like write an app on a Raspberry Pi using cloudkit JS? Like I have no clue about that. That's a really good question and somebody out there knows that right us back. We'd love to hear. <br><br>[00:19:18] Where it is an easy yes is if you're just going to target only Apple devices. Then I would say cloudkit is definitely what you want to go with and then if you don't need a lot of outside jobs, like I said, you probably could figure out how to write your app so that way you don't really need a crown job, or maybe you do automatic backups in the app itself. These are seriously powerful iPhones so really I wouldn't worry too much about straightening a user's iPhone when they have so much power, especially with these like newer iPhones. I think you're totally fine offloading some of the stuff onto the iPhone itself if your data is not too complex or your data or your queries aren't too complex when I wouldn't suggest using it is if you're not doing Apple only I have some hesitation about just depending on cloudkit JS for everything if you're not targeting only Apple devices. And if you absolutely absolutely need outside backups or outside cron jobs of some sort to be run and you're absolutely cannot do it on an iPhone or an iPad then you might want to consider not going with the cloudkit option if you're targeting especially slower devices or you really need to offload a lot of these queries or data is just way too complex to sort and cloudkit then you might want to not consider cloudkit in that case.<br><br>[00:20:50] Maybe we'll do a little history lesson. So I would say about five years ago six years ago the most popular one out there by far when it came to mobile backends was Parse. Parse then got bought out by Facebook and then Facebook essentially killed it. Now, they open sourced it so anybody could run their own Parse server, but out of the ashes of that came another startup called Firebase. And I don't know how many years it's been but a Firebase essentially got acquired by Google.<br><br>[00:21:20] And as far as what I've seen it's the most popular mobile backend as a service and actually backend as a service over all because of price probably but also that it's available on a plethora of devices. Erik, you've actually used Firebase, correct? <br><br>[00:21:36] <strong>Erik Gillespie (Host): </strong>I have and yeah on the surface, it seemed really really appealing and I've got to say right now I would be hesitant to use it in to any of my applications that might scale <br><br>[00:21:49] <strong>Leo Dion (Host): </strong>so could.explain a little bit about how Firebase works?<br><br>[00:21:52] <strong>Erik Gillespie (Host): </strong>You can think of it as a nosql database that stores everything that effectively as one giant JSON object; every single user if you have user records, if you have a Blog every single post, it's all going to be in one giant JSON structure and they have a very basic querying language that you can use to access data within that JSON structure, but it's not very robust and it's got a little bit better, but I think this typically ends up happening with a lot of NoSQL databases if you want complex querying capabilities typically you end up duplicating a lot of your data to make it a little bit easier so.<br><br>[00:22:26] <strong>Leo Dion (Host): </strong>Did you run into a lot of like map-reduce issues with Firebase? That's what I've run into when it comes to Mongo is like you end up having a lot of map-reduce and like that stuff can get really complicated really quick.<br><br>[00:22:39] <strong>Erik Gillespie (Host): </strong>Yep. So there's a lot of different ways that I needed to use this data that took a lot of consideration and to how to secure the data how to. So data how to do things efficiently and then also like you were suggesting how to actually manipulate all of the data once I do have it so that I can report it to the user in the correct way.<br><br>[00:22:59] <strong>Leo Dion (Host): </strong>Does Firebase allow you to offload a lot of that complex querying over to their servers you can pick they do have functions. So you can do things on the Firebase server as you would or you can run your own server. And so you can query the Firebase database manipulate the data on your own server and then send that to the users or.<br><br>[00:23:19] <strong>Erik Gillespie (Host): </strong>You can even access everything directly from the browser or your IOS app and then manipulate the data directly on the client device. The tough thing is Firebase does make it really easy to get started with a database and do some really cool real-time interactions with basic data sets. And so there is a strong appeal and I can understand why there's this popularity to it and it's really good as an introductory database.<br><br>[00:23:44] If you want to learn how to do real-time database integration in a web browser and you don't want to have to introduce like rest apis or making graphql or any other typical ways where you have to just create a bunch of extra code, In order to get access to data. Firebase is a great way to go about it.<br><br>[00:24:01] However from my experience if you're doing anything more than basic it gets really complicated really quick. So very early in this episode you mentioned the security is one of the concerns. If you have clients accessing the database directly and you don't have any server in the middle there. Then you have to start writing all of these different rules in Firebase in order to make sure that user X cannot access data that is exclusive to user Y that's really complicated and it's kind of like JavaScript but it's not quite JavaScript. So there's all these nuances that you have to learn about how to use it. <br><br>[00:24:34] Testing is also really challenging. So the way that you watch data is you watch it query URL. So you provide a path, to an object or a structure within your Json that you want to watch and anytime there's changes to that fire base will automatically stream that data to any of the affected clients. So you have to be concerned about the size of the data. So if you have let's say you have a user profile that has your username and an avatar and a bio you have to be mindful that if you want to just present in the navigation bar on any given page the name of a user that you only want to query for the name of the user otherwise you might be incurring a lot of extra downloads if the bio or that image change. So there's some performance impacts if you don't model and code your Firebase application correctly. <br><br>[00:25:22] <strong>Leo Dion (Host): </strong>So this sounds a lot like subscriptions and cloudkit. So in cloudkit you can do something like a subscription and listen to changes in the database for a particular user. Is it some similar to that and then you get like a push notification with subscriptions essentially?<br><br>[00:25:37] <strong>Erik Gillespie (Host): </strong>Yeah exactly the Firebase realtime database doesn't use browser or client push notifications. So you don't have to do the like I allow this application or this website to push notifications to me.<br><br>[00:25:54] <strong>Leo Dion (Host): </strong>Right<br><br>[00:25:54] <strong>Erik Gillespie (Host): </strong>and it does that really well. So the data syncing does work marvelously. However, sometimes it can take a long time to sync data if you're watching an entire user record and they change their profile. Meanwhile, all of your users who are in a chat room who only care about the username then may have to download this profile that is maybe like one kilobyte and until that is donethey don't actually see any changes to like a username or anything like that. <br><br>[00:26:28] <strong>Leo Dion (Host): </strong>Yeah. That's a really good point. <br><br>[00:26:29] <strong>Erik Gillespie (Host): </strong>Yeah, so you have to be very careful about those subscriptions or what you're listening to.<br><br>[00:26:34] <strong>Leo Dion (Host): </strong>Now cloudkit has the idea of like a private database, public database and a shared database you have somebody like that like CloudKit? Or  is it all  just kind of like a database which is kind of the more traditional way of doing things?<br><br>[00:26:46]<strong>Erik Gillespie (Host): </strong> Firebase has a few different storage options might be able to guess this since they store in the real-time database everything as JSON you have all of the same limitations of what you're able to store so binary data is automatically out.<br><br>[00:27:00] So if you need to store files PDFs or images or anything like that, That will go into a different Firebase service. So you have to then code to separate ways to potentially get access to the data that you need which can have its benefits. However, it can also seem a little cumbersome. The last point is the querying capabilities.<br><br>[00:27:19] They've gotten better. However, there's still really basic and definitely not as powerful as what you can do with like an SQL database. I would say if you have any kinds of reporting needs or you need to aggregate lots of data and then present it to the user in. One, two, three, or more different ways than you may need to take that into consideration when you're modeling your data and potentially create duplications of your data, or maybe just reconsider using Firebase for that kind of reporting need.<br><br>[00:27:50] <strong>Leo Dion (Host): </strong>Okay, that makes total sense. <br><br>[00:27:52] <strong>Erik Gillespie (Host): </strong>It does seem really really popular but the more I dig into it like there are some companies using it but not a whole lot of like enterprise-grade companies that are really relying on Firebase. So that is something to consider as well. And I would recommend considering that not just for Firebase.<br><br>[00:28:09] But any kind of storage solution that you're going to use see if there are any big companies is using it if you want something that's rock solid and stable and gets a lot of support you can. Be sure that these big companies who have lots of lots of time and money to spend will have taken the time to research and vet these solutions and so you can offload some of the work on to them and consider it a little bit safer to go with a solution If you have like one of these Fortune 500 companies using it.<br><br>[00:28:37]<strong>Leo Dion (Host): </strong>What do you think of Fortune 500 company is using for their back-end?<br><br>[00:28:41]<strong>Erik Gillespie (Host): </strong> I've seen a lot of them end up hosting their own. <br><br>[00:28:44] <strong>Leo Dion (Host): </strong>Yes. <br><br>[00:28:44] <strong>Erik Gillespie (Host): </strong>I am seeing them shift more towards cloud based Solutions but what they tend to do is do a lot of self manage types of solutions. <br><br>[00:28:51] <strong>Leo Dion (Host): </strong>Yep.<br><br>[00:28:52] <strong>Erik Gillespie (Host): </strong>Not necessarily like a Heroku but maybe like AWS or there's other what are considered enterprise-grade.<br><br>[00:28:58] <strong>Leo Dion (Host): </strong>When it comes to your Fortune 500, If they're going to go Cloud, they usually go AWS, Azure, IBM - typically those are those are the big three Cloud platforms that I've heard of maybe maybe Google if they've been given enough incentives to do that as well.<br><br>[00:29:13] I don't see a lot of Firebase. Now, I've also seen the case where. You might use multiple database systems. So maybe you have like MySQL for some of your data. And then maybe you'll have like a real time data using Firebase. Is that a use case you've seen a lot of?<br><br>[00:29:27] <strong>Erik Gillespie (Host): </strong>I haven't seen a lot of it, but it was it is something that I would consider. I think graphql makes that a little bit easier because you can aggregate data from a lot of different sources more easily with a rest API you basically have to do all the coding yourself. So if you want to use Firebase and postgres, for example, then you create an API and then your apis server-side code will connect to both of those places pull down the data they need and then manipulate it however and then spit it back out to you so definitely very viable something to consider.<br><br>[00:29:57] <strong>Leo Dion (Host): </strong>Could you explain a little bit what graphql is as opposed to rest API<br><br>[00:30:01] <strong>Erik Gillespie (Host): </strong>With a rest API, typically you have a URL or resource on the web and you will fetch that and download one piece of data with graphql from the client you can provide a multitude of data that you want to access and then a graphql will take on the responsibility of figuring out how to quickly get and combine all of that data and then get it to you. <br><br>[00:30:31] <strong>Leo Dion (Host): </strong>Yeah, I think Rest API kind of is a very simple as far as what you can query. It's meant to be like that. It's always been structured in that way.<br><br>[00:30:39] So you can say I want to get user with ID 20 and I'll just do it and then maybe you can maybe attach some filters and things but it's really it's very simple as far as that where I think like with graphql which is by Facebook. They've done is they've created a weight so that the client can send a complex query essentially in some sort of JavaScript object notation format.<br><br>[00:31:01] And then the server has the responsibility of figuring out how that query is to be run and how that query data is supposed to be outputted to the user. Is that correct? <br><br>[00:31:11] <strong>Erik Gillespie (Host): </strong>Yeah for my understanding. Yeah and it introduces some alternative concerns with rest. You have a single resource that you're trying to fetch so it's pretty easy to lock down data. With graphql, then you have to consider now a user is potentially queering for anything that they want because you're exposing this query API to potentially anyone. <br><br>[00:31:31] <strong>Leo Dion (Host): </strong>Yes. <br><br>[00:31:31] <strong>Erik Gillespie (Host): </strong>So how do you protect all of this data? How do you make sure that they don't come up with a query that is going to just totally bog down your server or get access to data that they're not supposed to have access to. How do you actually present errors when they occur?<br><br>[00:31:45]<strong>Leo Dion (Host): </strong>Anything else you want to talk about as far as Firebase is concerned?<br><br>[00:31:47]<strong>Erik Gillespie (Host): </strong> I would recommend using it for very very simple situations where you have data that is not going to change in structure over time, data that's generally flat and when you don't have to do lots of complex queries. So on the flip side of that if you have lots of relational data you have to do a lot of reporting you have lots of large Fields like files to download that might be text-based so you'd be inclined store them in Jason or you have very complex security needs then you might want to consider some alternatives to Firebase. <br><br>[00:32:19] <strong>Leo Dion (Host): </strong>Yeah, because I feel like Firebase is the most popular it's the hotness and from what you've told me with your story is like it's not necessarily a good fit for most things. Is that correct? <br><br>[00:32:31] <strong>Erik Gillespie (Host): </strong>I think most people when they're building applications have grand ideas of them scaling to lots of people being used for very big things Firebase is very appealing for small projects. However, from what I've seen they get really complicated really quick. So as your needs change firebase might not be able to adapt and grow with you and can be very difficult to continue to support. <br><br>[00:32:55] <strong>Leo Dion (Host): </strong>I think it's a really good point Erik. So always consider your developer team your price when you're doing your backend and help simple. Can you make your data? How much can you get away without a lot of the complexity of a home-built server?<br><br>[00:33:07] Because the backend they're great. If you don't mind dealing with the hosting and all their headache and also even if you do a custom back-end consider how much of that can be abstract and you're willing to get away without having to maintain a server all on your own. If you're doing anything in the Apple space and you already have a team of Swift developers I would recommend looking at vapor at the very least for your back end. But if your team is mostly .net Developers or mostly Ruby developers or PHP or Elixir or go or rust or whatever one of the plethora of languages out there consider the comfort of your developer team. If you're just doing mostly Apple apps so stuff for the Mac iPad iPhone TV watch whatever consider cloudkit. With Cloudkit, you can get away with a lot. It's very very cheap. Apple practically gives it away for free. You're hardly ever going to run into the limit and it's really easy to use when you're working with Apple devices and you're already programming in Swift or Objective-c. <br><br>[00:34:00] And then as far as Firebase, it's great if you're doing really simple data or you're working with a really simple MVP but really look at the limitations before you jump into it. It might not be a good fit for what you're looking for. And you know, if you need to pivot do it early it. Don't do it when it's too late, if you feel like your data isn't a good fit for whatever you end up picking pivot as quickly as you can because you're not going to want to be burnt out by constantly trying to get your data to fit and in particular space.<br><br>[00:34:28] <strong>Erik Gillespie (Host): </strong>Yeah. Yeah. I totally agree with that <br><br>[00:34:30] <strong>Leo Dion (Host): </strong>cool. So yeah. Thank you so much for coming on again and telling your story about Firebase and we will talk to you later. <br><br>[00:34:37] <strong>Erik Gillespie (Host): </strong>Alright take it easy. Thanks for having me.<br><br><br><br><p><strong><a rel="payment" title="★ Support this podcast on Patreon ★" href="https://www.patreon.com/empowerappsshow">★ Support this podcast on Patreon ★</a></strong></p>]]>
      </content:encoded>
      <pubDate>Sun, 10 Feb 2019 01:00:00 -0500</pubDate>
      <author>Leo Dion, Principal CEO and Swift Developer at BrightDigit </author>
      <enclosure url="https://chtbl.com/track/51E5/media.transistor.fm/b0afd7df.mp3" length="16687333" type="audio/mpeg"/>
      <itunes:author>Leo Dion, Principal CEO and Swift Developer at BrightDigit </itunes:author>
      <itunes:image href="https://images.transistor.fm/file/transistor/images/show/122/full_1533929410-artwork.jpg"/>
      <itunes:duration>2080</itunes:duration>
      <itunes:summary>In this episode, Leo talks different backend technologies to use when building an iOS app or any other Apple device: when you need a cloud service, running on your own server, cloudkit, firebase, and more...</itunes:summary>
      <itunes:subtitle>In this episode, Leo talks different backend technologies to use when building an iOS app or any other Apple device: when you need a cloud service, running on your own server, cloudkit, firebase, and more...</itunes:subtitle>
      <itunes:keywords>apple, iOS, mobile apps, cloud, firebase, cloudkit, enterprise, mvp, aws, linode, digital ocean, kubernetes, docker, heroku, mysql, mariadb, postgresql, mongodb, redis, php, nodejs, C#, ruby, elixir, vapor, kitura, perfect, iis, nginx, apache, cloudflare, new relic, supervisor</itunes:keywords>
      <itunes:explicit>No</itunes:explicit>
      <googleplay:explicit>No</googleplay:explicit>
    </item>
    <item>
      <title>Apple 2019</title>
      <itunes:episode>7</itunes:episode>
      <itunes:title>Apple 2019</itunes:title>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:block>No</itunes:block>
      <googleplay:block>No</googleplay:block>
      <guid isPermaLink="false">fd556ba6-07a9-4658-adb2-7224c341dfca</guid>
      <link>https://share.transistor.fm/s/3ee56c45</link>
      <description>In this episode, Leo talks about the current state of Apple in 2019 and how it affects businesses and developers: the slow down in smartphone sales, the future for macs, services and business, the cloud and developers, and more...
</description>
      <content:encoded>
        <![CDATA[<h1>Previous Episodes </h1><ul>
<li><a href="http://www.empowerapps.show/episodes/iphone-xs-vs-iphone-xs-max-vs-iphone-xr">iPhone Xr</a></li>
<li><a href="http://www.empowerapps.show/episodes/low-cost-macs-macbook-air-mac-mini">Low-Cost Macs</a></li>
</ul><h1>Slowing iPhone Sales</h1><ul>
<li>China<ul>
<li><a href="https://www.cnbc.com/2019/01/08/samsung-q4-guidance-.html">Samsung 4th Quarter Guidance</a></li>
<li><a href="https://500ish.com/apples-precarious-and-pivotal-2019-f4f8cea3993a">Apple’s Precarious and Pivotal 2019 - M.G. Siegler</a></li>
<li><a href="https://overcast.fm/+CdQfKRJo/37:31">Apple Revises Guidance - Accidental Tech Podcast</a></li>
<li><a href="https://stratechery.com/2017/apples-china-problem/">Apple's China Problem - Strechery</a></li>
</ul>
</li>
<li>Decrease in Computer Sales<ul><li><a href="https://www.weforum.org/agenda/2016/04/4-charts-that-explain-the-decline-of-the-pc/">4 Charts That Explain The Decline in PC </a></li></ul>
</li>
<li>SmartPhones Plateau / Mature<ul>
<li><a href="https://www.cnbc.com/2018/02/23/smartphone-sales-are-slowing-and-here-are-two-key-reasons-why.html">Smartphone Sales Are Slowing</a></li>
<li><a href="https://www.imore.com/iphoneslow">Apple's Battery Program</a></li>
</ul>
</li>
<li>Growth in Services<ul><li><a href="https://www.statista.com/chart/14629/apple-services-revenue/">Apple's Servies Segment Continues to Grow</a></li></ul>
</li>
</ul><h1>Apple and Business</h1><ul>
<li>How does Apple balance quality and price in the PC Market?</li>
<li>How will Apple tailor their growing services segment for businesses? </li>
</ul><h1>Apple and Developers</h1><ul>
<li>Will Apple encourage more services in the cloud?<ul>
<li><a href="https://aws.amazon.com/">Amazon Web Services</a></li>
<li><a href="https://aws.amazon.com/lambda/">AWS Lambda (Server-Less)</a></li>
<li><a href="https://cloud.google.com">Google Cloud Platform</a></li>
<li><a href="https://azure.microsoft.com/en-us/">Microsoft Azure</a></li>
<li><a href="https://developer.apple.com/icloud/cloudkit/">Apple CloudKit</a></li>
</ul>
</li>
<li>Will Apple encourage more services for developers?<ul><li><a href="https://www.macstadium.com">MacStadium</a></li></ul>
</li>
<li>Will Apple offer some sort server-side services?<ul>
<li><a href="https://vapor.codes">Vapor</a></li>
<li><a href="https://perfect.org">Perfect</a></li>
<li><a href="https://www.kitura.io">Kitura</a></li>
</ul>
</li>
</ul><br><p><strong><a rel="payment" title="★ Support this podcast on Patreon ★" href="https://www.patreon.com/empowerappsshow">★ Support this podcast on Patreon ★</a></strong></p>]]>
      </content:encoded>
      <pubDate>Sat, 26 Jan 2019 23:50:00 -0500</pubDate>
      <author>Leo Dion, Principal CEO and Swift Developer at BrightDigit </author>
      <enclosure url="https://chtbl.com/track/51E5/media.transistor.fm/f3223e9b.mp3" length="9844600" type="audio/mpeg"/>
      <itunes:author>Leo Dion, Principal CEO and Swift Developer at BrightDigit </itunes:author>
      <itunes:image href="https://images.transistor.fm/file/transistor/images/show/122/full_1533929410-artwork.jpg"/>
      <itunes:duration>1225</itunes:duration>
      <itunes:summary>In this episode, Leo talks about the current state of Apple in 2019 and how it affects businesses and developers: the slow down in smartphone sales, the future for macs, services and business, the cloud and developers, and more...
</itunes:summary>
      <itunes:subtitle>In this episode, Leo talks about the current state of Apple in 2019 and how it affects businesses and developers: the slow down in smartphone sales, the future for macs, services and business, the cloud and developers, and more...
</itunes:subtitle>
      <itunes:keywords>technology, apple, iPhone, smartphone, china, PC, AWS, Cloud, Google, Azure, Devops, Swift, Vapor, IBM,</itunes:keywords>
      <itunes:explicit>No</itunes:explicit>
      <googleplay:explicit>No</googleplay:explicit>
    </item>
    <item>
      <title>Project Estimation</title>
      <itunes:episode>6</itunes:episode>
      <itunes:title>Project Estimation</itunes:title>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:block>No</itunes:block>
      <googleplay:block>No</googleplay:block>
      <guid isPermaLink="false">6d3721be-4030-49fa-975c-c82dd326b4f9</guid>
      <link>https://share.transistor.fm/s/00603d96</link>
      <description>In this episode, Leo and Theresa talk about how the process of going from a customer's idea to a proposal happens. These also include: what features to consider, how much involvement might be needed to get a proposal, budgets, timelines and more...</description>
      <content:encoded>
        <![CDATA[<ul>
<li><a href="https://learningswift.brightdigit.com/swift-development-tips-speculid-tryswift/">Speculid Talk</a></li>
<li>Development Alternatives<ul>
<li><a href="https://ionicframework.com/">Ionic</a></li>
<li><a href="https://facebook.github.io/react-native/">React Native</a></li>
<li><a href="https://visualstudio.microsoft.com/xamarin/">Xamarian</a></li>
<li><a href="https://cordova.apache.org">Cordova</a></li>
<li><a href="https://www.nativescript.org/">NativeScript</a></li>
</ul>
</li>
<li>Continuous Integration for iOS Options<ul>
<li><a href="https://www.macstadium.com/">MacStadium</a></li>
<li><a href="https://travis-ci.org">Travis-CI</a></li>
<li>
<a href="https://jenkins.io">Jenkins</a> </li>
<li><a href="https://www.macincloud.com/">MacinCloud</a></li>
<li><a href="https://developer.apple.com/library/archive/documentation/IDEs/Conceptual/xcode_guide-continuous_integration/index.html">Xcode Server</a></li>
<li><a href="https://circleci.com/">CircleCI</a></li>
<li><a href="https://hockeyapp.net/">HockeyApp</a></li>
</ul>
</li>
</ul><h1>Complete Transcription</h1>[00:00:00] <strong>Theresa Jasko (Host): </strong>I feel like last time we had our podcast you've maybe done a few speaking engagements. [00:00:06] <strong>Leo Dion (Host): </strong>I spoke at ArborMoon at the Ann Arbor Cocoaheads group about Try! Swift which is the conference, I went to Labor Day week. And then I also talked about Speculid which is a Mac App for developers that I've been working on for building graphics for apps. I just talked about how it works and kind of the guts of the challenges I faced building the app. [00:00:31] <strong>Theresa Jasko (Host): </strong>Nice, So what is IOS development? [00:00:34] <strong>Leo Dion (Host): </strong>IOS, of course, is the operating system for iPads and iPhones. So typically it's the process of coding, designing, testing, and packaging an app and delivering it in whatever way a customer would want.[00:00:52] <strong>Theresa Jasko (Host): </strong>Yeah, so if someone's looking into doing that what kind of factors go into getting a quote for that kind of service.[00:00:59] <strong>Leo Dion (Host): </strong>So really it depends on the features and kind of the timeline of the app. So faster timeline is going to mean a higher quote then integrating any sort of third party services. So if you're integrating something like Facebook or integrating any sort of special controls or sensors on the iPhone like motion controls then that's going to up your quote. And then the complexity of the data that's being used, especially if it's data that's going to be stored locally or remotely - there's going to be some complexity there and that will take take more time. [00:01:40] Because that's essentially what we're talking about is quality and time the more you pay the more time it will take and the more higher quality will also mean a higher quote for those Services because that quality also takes time of course. So offline capabilities - not a lot of apps necessarily need that but a lot of apps want to have the ability to just having online and offline capabilities so syncing and things like that. Any sort of UI complexity and any UX complexity, chat, the amount or number of screens is a good indicator of how complex an app is going to be and how much the price is going to be. [00:02:26] And then this is much more an issue on Android but as far as iOS is concerned, It's what operating system versions you support. What devices you support. So is this just an iPad app is it just an iPhone app is a support iOS 12, iOS 11 how far down the chain are you going and that usually factors into the price of the quote for developing an app.[00:02:53] And also another thing to mention is in many cases we're thinking a green app, but starting an app from scratch that has its challenges but also picking up an app that's already been developed on has its challenges as well. So that's something to that will weigh into the quote of developing an IOS app.[00:03:17] <strong>Theresa Jasko (Host): </strong>Yeah, so when you talk about like those factors just now is there like a common app that you could use it as an example of like kind of illustrating some of that stuff? Is there maybe like a weather app or something like when you talk about like UI ux complexity and things like that? I'm having a hard time envisioning what that means in real life.[00:03:38] <strong>Leo Dion (Host): </strong>Sure. So the way I think about it is a lot of times customers depending on how much they want to do when it comes to getting requirements for an app have a pretty good idea of what screens they want. And so I usually get into the process of asking them - Okay, what does this app do? What are you trying to do? What is your end goal and then figure out - okay, we'll need a screen for this and a screen for that and then the screen will go to that. Then I'll start thinking about like different edge cases because we always have to think like what happens in this case what happens in that case. What I do is in spreadsheet will write out the different screens that an app will need in order for it to essentially work. [00:04:26] For instance, we developed a nurse training app and that uses about four different tabs and probably each of those have different dialogues for adding credits for a nurse. And so we'll have say 12 screens in that app. Just kind of roughly and so that I look at the complexity how much data is being entered is it like one field, 2 fields, 3 Fields? How complex is that data? Is that data dependent on certain variables? Is there a certain range of acceptable values and then that factors into some of the UX that's involved or the user experience because I want to make sure that the user is walked through the app. Easily and knows what they need to do and it's intuitive.[00:05:17] So I kind of rough guess how many hours that's going to be for each screen. We also talked about for instance with a brand new app, there's some setup time usually involved. And then for each screen, there's going to be testing involved say every week or two weeks so that gets added in as well.[00:05:41] And then of course at the end, there's the issue of getting into the App Store assuming it's a app store app and there's always time involved there because you'll always find all sorts of issues when you get into App Store. There's also dependencies for their marketing or graphic design folks to make sure that they have the assets that are needed to get into the App Store.[00:06:02] <strong>Theresa Jasko (Host): </strong>Hmm. Wow, do you find that when people approach you about getting a quote or something? Do they have a full understanding of the things that you're talking about are usually have to really kind of work with people to even explain that?[00:06:17] <strong>Leo Dion (Host): </strong>Usually what I like to do is kind of do a rough tree of how the app is going to work. And then from there I'll go ahead and make estimates for each of those things. Sometimes I might do something like an initial consultation for a fee depending on how complex the app is. And then what I like to do early on in the project is have basically an app that doesn't work but at least has the UI and the workflow that they expect out of the app so that way early on in the process they're there confirming how the app is going to work eventually at some point. [00:07:00] <strong>Theresa Jasko (Host): </strong>What are the things - you know what - let's say someone wants to do a development project and they get let's say three different quotes. What's the reasons you know, if the prices are kind of varying pretty significantly what could be different there? What would you be maybe missing out on if you go with the least expensive? [00:07:23] <strong>Leo Dion (Host): </strong>Sometimes they are perhaps using services that might expediate the development process without really offering any ability to customize it later. Perhaps it's using some sort of different method besides building it native Apple like Swift or Objective-C. We can talk about the different methods for developing apps later. It's all kind of based on maybe an extensive experience or you know, just kind of taking shortcuts and things like that. There's some app building templates out there that people might be using as well which doesn't really fit with what they want. But really you're getting different quotes based on possibly the quality of work and just what features haven't been completely flushed out early in the process. [00:08:20] <strong>Theresa Jasko (Host): </strong>Yeah, so when you say for instance that you won't be able to be updated later or something. Does that mean they kind of cobble something together? And then that's just kind of it and you can't add to it later? [00:08:34] <strong>Leo Dion (Host): </strong>Yeah, that could definitely be the case in many ways. [00:08:37] <strong>Theresa Jasko (Host): </strong>Do a lot of people like when they make an app want to update it later or is it kind of 50/50 or you know, like well, yeah, we made this and it's good enough and we just kind of let it lie.[00:08:48] <strong>Leo Dion (Host): </strong>I think it's 50/50 but with a lot of at least with iOS you need to keep updating app if you're going to want people to use it when you come out with a new iPhone that's bigger or has a notch or uses a different design then you pretty much have to update your app. You can't get away with keeping on the App Store because Apple can just drop the app if it doesn't work on newer phones. [00:09:15] <strong>Theresa Jasko (Host): </strong>Mhm. And so when you're saying people you maybe use like a template or something to say is it is it kind of like a square peg in a round hole thing where it's like, well we have this starting point and we're going to kind of make it work for you.[00:09:26] <strong>Leo Dion (Host): </strong>Yeah, that's exactly what you could run into. If somebody could just be using like a template and they're not maintaining a they're not keeping it working and keeping it going. So when the new phones come around they haven't updated the template or they haven't updated the app. You're going to have to just come back to those people to update the app and your kind of dependent on them at that point.[00:09:51] <strong>Theresa Jasko (Host): </strong>So you're saying you couldn't have somebody else come in and update it then. [00:09:56] <strong>Leo Dion (Host): </strong>Well somebody else could but they're going to charge for whatever it takes to reconfigure that app. That might be outside of their wheel house. [00:10:06] <strong>Theresa Jasko (Host): </strong>So what is the difference between starting from scratch like to me when I feel like when you start from scratch with something it's going to take longer than going to be more expensive. But then you're saying if you using a template or you know, kind of a starting point that somebody else is made then that can create problems later on too. So you ever start with a template or anything or do always kind of start from scratch? I've started with some templates before or at least started with other development projects and it really depends on that previous team and how well they did if they did a good job and structured their app well, then it might not be that big of a deal to pick it up. But if it's just cobbled together like what we're talking about then there could be some serious issues trying to bring that app in. And if it's old enough that it uses some old code that doesn't work anymore. That could be a serious issue for the new team that comes in and adds new features to the app. They might come to a conclusion that is some of the stuff is worth just burning down and starting from scratch. [00:11:13] We've been kind of talking about different ways of going about it. Does that mean that there are different methods for developing apps for the iPhone? [00:11:21] <strong>Leo Dion (Host): </strong>Yeah. So we kind of talked about some templates. There's app building templates are out there, but there's also a different methods that deviate from just doing it the Apple way so to speak. So there's what I like to call like the web development wrapper way of doing it and the building it in my own favorite language, but still make it a native way of doing it and they each have their advantages.[00:11:48] So with the web development wrapper, that's typically something like Cordova or Ionic. Cordova was built by Adobe and essentially what it is is you build a web app. So you're just you doing regular HTML and things like that to build. The app and it's wrapped but you still have access to certain native features on that phone.[00:12:14] So to the user it looks like just regular app out of the box, but to you the developer, you're actually just building a web page. There's so many questions as far as how to get something like that into the App Store that can sometimes be a challenge but if you do it, right, there's quite a few apps that are built using that technology[00:12:39] <strong>Theresa Jasko (Host): </strong>what do you mean by native? [00:12:41] <strong>Leo Dion (Host): </strong>When I say at least looking native is an app that doesn't look like something that's hacked together using custom components or packaged like it doesn't use like actual apple design elements that people typically use when they build an app.[00:13:01] So like I've been on certain apps that have like a weird wood grain or it has buttons that don't look quite right or has drop down menus, which you don't really see in a lot of Apple apps and that kind of gives a good indication that use some custom software to build it. Unless of course it's designed well, and it uses kind of some of the third-party tools will talk about in a little bit.[00:13:26] So like with a web development wrapper, sometimes it'll just have a weird color scheme attached to it or it'll have different menus that you don't typically see in an app that's developed natively using xcode the toolset Apple has available. [00:13:45] <strong>Theresa Jasko (Host): </strong>Okay, so it just kind of feels a little off or looks a little off at best.[00:13:49] <strong>Leo Dion (Host): </strong>Yeah, exactly. [00:13:51] <strong>Theresa Jasko (Host): </strong>Okay, then what at worse? It just doesn't work correctly. Yeah. [00:13:55] <strong>Leo Dion (Host): </strong>Yeah or it just doesn't make any sense. It doesn't follow the paradigms people typically are used to when they use a IOS app. [00:14:04] <strong>Theresa Jasko (Host): </strong>Well, if so if it's clunky and weird like that, why do people even make them or release them [00:14:14] <strong>Leo Dion (Host): </strong>because it's cheap and easy. So, I mean that's kind of it. Also, maybe maybe they're focusing on Android. So they just wanted to make sure it works on Android and if it works on iOS, that's fine. It's a lot of that. So that is the benefit. A lot of these different methods is that you can ideally developed for both Android and iPhone at the same time. But in a lot of cases your UI won't look natural on Android, but also won't look all that natural on iPhone as well. Okay, because you've made some compromises. [00:14:51] <strong>Theresa Jasko (Host): </strong>Yeah, I didn't think it went that both ways because I've always heard. You know, when I complain about different apps that I use on my Android usually people are like, well it's because you have an Android. I didn't realize it happened on IPhones and stuff too. [00:15:08] <strong>Leo Dion (Host): </strong>Yeah, there's definitely some crappy apps out there on the iPhone. [00:15:15] <strong>Theresa Jasko (Host): </strong>All right. So what other ways are there to develop apps than besides this cobbled thing?[00:15:20] <strong>Leo Dion (Host): </strong>So we talked about building a website or webpage and then packaging it as an app kind of what Cordova or Ionic does. And then the other method is developing in a specific language that your development team might know in a lot of cases JavaScript and then building it using that for iPhone or IPad. You see that a lot with NativeScript which is built by the folks at Progress  but even more popular we see that with React Native which is built by the folks at Facebook. React is really popular amongst folks in the web development circles. And so if you're somebody who's already have a web team and they're already familiar with React then it makes sense. Maybe you just reuse those same people to build an app using React Native and it uses the same a lot of the same things that React does, but you can use it to build basically a native app. Whereas the first one [Ionic] takes it. A series of web pages are and HTML files and kind of puts it in a frame or wraps it this one actually converts the code into native code. So it actually is building a app. There's no HTML or anything like that in the app. It's actually building native features, but it's converting it to native from JavaScript in these cases or NativeScript. [00:16:55] <strong>Theresa Jasko (Host): </strong>Okay. Have you done all these different methods? [00:16:59] <strong>Leo Dion (Host): </strong>Well, the one that I've used is Xamarin, which is by the folks at Microsoft. So that uses C# to build apps. The problem that I found was constantly these tools have to catch up with Apple or Google to make sure that they're compatible. So Apple might come out with new stuff. That means your have to be dependent on them to make sure that they're updating their tools to work with whatever is new when it comes to Apple. So there can be a little bit of a support issue. Also at least with Xamarian those files can get pretty large because they might have like a file in there that has to do all the heavy lifting of making sure that the app works, even though it's written in a different language. So your app size might be a little bit larger a little bit slower because of that. That's kind of the issues I ran into at least when it came to developing using Xamarin [00:18:02] <strong>Theresa Jasko (Host): </strong>So developers do use different methods. [00:18:06] <strong>Leo Dion (Host): </strong>Yeah You'll see a lot of teams, they might just do react native because that's what they know - React. So it's easier for them to just go ahead and stick with that. Or they might be a bunch of web developers, so it might just be quick and easy to use Cordova or Ionic in that case. [00:18:25] <strong>Theresa Jasko (Host): </strong>So one of the related words or phrases I guess I've heard is continuous integration. So how does this relate to continuous integration? [00:18:38] <strong>Leo Dion (Host): </strong>Well, we're talking earlier about experience, testing, UI complexity are kind of the factors that might make a quote more expensive. One of the things is being able to continually make sure that as software is written that it actually is tested. So there's the common term in programming called unit testing where you'll write a thing that does addition. So you'll write a method or function that does addition that is takes numbers outputs the sum. Right, and then the way a unit test will work is you might have a series of numbers that you know add up to another number and you want to continually test to make sure that if you add two and two that will always equal four with this function if you had four and six at always equal 10, and so on. That's gives kind of a really simplified it sample, but you might have some developers come in and have make modifications to this method so that it does things like negative numbers or take decimal points. So then you need to make sure that you add those tests and you continually are testing both with the new test but also the old tests as you make changes to this function that adds two numbers together. So that's kind of the idea of continuous integration is as your team comes in and makes changes to different functions and methods and features within an app that the app still works based on the old code that's been written before. And typically how that's done is you might have a separate individual machine or you might use some service in the cloud that will take your code build it and make sure everything works no matter the environment that it's in and that it works on whatever you support and whatever devices you intend to support. Does that kind of make sense?[00:20:32] <strong>Theresa Jasko (Host): </strong>Yeah a little bit. I'm I guess I'm having a hard time imagining like. Do some people not tests throughout their development?[00:20:40] <strong>Leo Dion (Host): </strong>Yeah, I mean everybody "tests", but typically it's - so does it work? Like and you just kind of use the app and it works and you're fine, but there are so many outliers and different things that people do or my might do differently. And there's different kind of testing of course, but you'd be surprised how many teams don't test and don't do things like continuous integration.[00:21:03] <strong>Theresa Jasko (Host): </strong>It makes me wonder there's stuff going on at work where they developed a new system and has never quite functioned right and then they will do bug fixes and then the next day a bunch of other things have been broken and It's always kind of intrigued me like why is this happening? [00:21:21] <strong>Leo Dion (Host): </strong>Yep, and that's a lot of cases what they find is, you know, the testing is part of the thing that gets cut because if it works good enough that it works good enough and that's unfortunate in a lot of cases. [00:21:33] <strong>Theresa Jasko (Host): </strong>Yeah. So do you is this the method you use the continuous integration?[00:21:37] <strong>Leo Dion (Host): </strong>Yeah, actually  last night when I was in Ann Arbor. I talked about Speculid and how I used Continuous Integration. I used a Cloud Service - Travis CI which is available for free for open source projects, which is really nice because a lot of services that do continuous integration of the cloud are expensive. Because of how much it costs you pretty much have to get a Mac machine in order to do it. So yeah last night I talked about Travis CI and how there's some customization involved. But also one of the biggest challenges is if you are building in this case the Mac app or especially if you're building an app for the App Store you have to make sure that you have certificates and keys setup so that like for instance in the case of Travis CI you might want to just upload it to the App Store as soon as your testing is verified and it works correctly.[00:22:34] So that's always something to keep in mind is to make sure that you have your environment set up correctly and you have things like certificates and provisioning profiles and all the little doodads and security stuff that Apple requires when you want to post something to app store. Or in the case that I ran into just distribute the app downloadable.[00:23:01] So there's some other services out there. There's like Mac Stadium -Where you're typically like renting a machine essentially on a monthly basis. There's Jenkins if you want to run it on site or xcode server, which but I've been playing around with lately. And the idea is you're not running it on a machine. You'll especially run into the issue where a developer has something specifically set up and it works fine on this developer machine, but then when they run out on somebody else's machine, it doesn't work.[00:23:34] Well you need to know that. Because if you're going to write a piece of software you need to know what's depending on what needs to be set up or what you're missing in your application in order to get it to work. It's really nice with iOS because you can just run it in the simulator, but even simulators have some major differences to how it works on an actual device.[00:23:54] So you want to have access to something you can reset and start from scratch and run the app and make sure it works. [00:24:02] <strong>Theresa Jasko (Host): </strong>So is this automated is this something you set up and say test every day at 10 or is it something that you do yourself or how does it work? [00:24:10] <strong>Leo Dion (Host): </strong>So there's a couple of things you could do. You can set up on a schedule so you can say I'll run hourly or daily. You can especially if you're using something like git to control code where code gets checked in you can listen for changes to the code unlike the central server and when a code change happens, you can get the code and run it on the continuous integration machine. So it's another way to do it.[00:24:37] And typically those are kind of the two main ways - run it on any code change that you listen to or run it on a scheduled basis. [00:24:45] <strong>Theresa Jasko (Host): </strong>So if you know kind of your average customer is considering a developing an app, are there certain things that they would maybe assume comes along with it, but it doesn't or just things for them to keep in mind if they start thinking about this.[00:25:04] <strong>Leo Dion (Host): </strong>So we talked about continuous integration testing - that's something that they should look into and ask questions. What kind of testing do you do? What kind of testing environment do you have? Another thing you want to ask is analytics? I don't think people think about that enough, but I think it's super important to have some analytics to know how people are using your app and what issues they have is there any sort of bug reporting that's natively built into the app something like instabug or bugsnag or some service like that. Also animations like that stuff is pretty complex. Don't make the assumption that there's any animations any custom fonts or any Custom Graphics. Those are things that you have to think about when you're building an app and then any sort of like backup support.[00:25:56] Are you going to actually own the code when it's done? What kind of services are there for maintaining the app is that baked into your contract or into your quote? So those are some things to think about when you're asking somebody to build an app for you essentially.[00:26:13] <strong>Theresa Jasko (Host): </strong>Okay. Do you offer those different things depending on what your customers want or do you kind of have a standard like I always have bug reporting and analytics or something like that. [00:26:24] <strong>Leo Dion (Host): </strong>I always ask the customer what they want because it really depends on their budget coming up for my end. I want to make sure that I stay within their budget and make sure that I'm not adding in extra services they might not need because in some cases they just need a simple app. And then which is what I usually suggest depending on the budget is like both building something simple get like not a prototype but like a usable proof of concept that you can get to your customers so they can actually start using it and then if you see like there's some issues or there some features that we really need to flush out then, you know, come back to me let's build version 2.0 and really flesh this thing out. [00:27:04] <strong>Theresa Jasko (Host): </strong>So is it easier for people to come in and kind of know how much they have to spend or is it better to have a range and then work someone like you to start to hone in on like what features they want or what's the best way to approach a project like that?[00:27:20] <strong>Leo Dion (Host): </strong>I think both I think what is the ideal app you're looking at building and then what's your budget and that gives a good idea. Because the budget really is going to give me a good idea of what kind of features are reasonable. And also of course the timeline like well how soon do you expect it to be done?[00:27:40] And that really gives me a good idea because I want to build the best app within what somebody can spend and knowing those factors really help communicate clearly to me and clearly to them what can be done within that range. I work to make my customers happy and I want them to be happy and I hate to be in a position where I over-promised and that's something I never do.[00:28:06] So, the other thing to keep in mind is sometimes what the customer wants isn't really what the customer wants. And so you know, I could do a really kind of basic estimation but if they want something more flushed out, what I like to do is kind of do a requirements analysis and get an idea of  what are they really?[00:28:33] What's their end goal and then kind of design around that and maybe build a rapport that at the very least if they don't want that app, then they can they can take that to somebody else and go: "oh, you know, we had an analysis done this is kind of what we're looking at getting built and maybe take it to somebody else to have it built for them if that's much more a better fit for them.[00:29:00] So it really depends on their budget to like do they want to spend some money on a kind of report that we can take and then build an app against or do we want to put a quick estimate together and build based on that? And so that depends too is like how much of an analysis do they want beforehand.[00:29:20] <strong>Theresa Jasko (Host): </strong>Do you have any examples of someone thought maybe they wanted something but it what they really wanted was something else?[00:29:27]<strong>Leo Dion (Host): </strong>Yeah in a lot of cases. I've found that people you hear the I have a great idea for an app thing and I think I'm always surprised at how many times people haven't just looked in the App Store to see if that app already exists because a lot of times it does and in a lot of case It doesn't work very well. So that can always be a challenge. I think it a lot of cases people don't get into the specifics of the rules that they have in mind and they don't think of the weird edge cases that actually come up more often than they think so they think something is fairly simple, but then they realize that there's going to be situations where in fact it isn't that simple and that there might be a lot a situations where people are running into all sorts of issues because there are certain things that they need. for instance we had that nurse training app where we have on occasion with  nurses that need certifications in multiple states. So that's a big deal because you know, that might have been built to only support one state and if you're somebody who needs to get certifications in two states you need to track those credits accordingly in both States. And this is something people didn't think about and we brought that in and so they're always situations like that. Especially what you get with somebody like me is I've been developing an apple space for almost a decade now and I understand how different UI and ux paradigms work on Apple what people expect from a app that it's on an Apple device and those are things to think about as well.[00:31:19] <strong>Theresa Jasko (Host): </strong>You had mentioned earlier one of the questions was about like who owns the code. Can you explain more what that means? [00:31:26] <strong>Leo Dion (Host): </strong>Right so you'd wall was want somebody who develops an app for you to give you a copy or access to the code or repository? I mean, I feel like that's what requirement with any app.[00:31:38] <strong>Theresa Jasko (Host): </strong>Are There people that develop stuff and then don't give it to the customer. [00:31:41] <strong>Leo Dion (Host): </strong>Exactly and that is always something to check on. [00:31:45] <strong>Theresa Jasko (Host): </strong>What would be the reason for? [00:31:47] <strong>Leo Dion (Host): </strong>Maybe in a lot of cases they don't even think about the code. They just want the app in the app store and maybe they don't want the customer to see how poorly the code is written. I always provide the code like that just makes common sense. Yeah, but you'll find situations where that isn't the case.[00:32:05] <strong>Theresa Jasko (Host): </strong>yeah definitely wouldn't have thought about that. So if someone were interested in investigating this do people offer like a free consultation or it it usually like a fee to kind of start to explore [00:32:18] <strong>Leo Dion (Host): </strong>depends on how much you want me to break down the estimate if you want something for pretty basic than I could probably do it for free, but I think it's always better to like talk to the customers start like sketching things out and of course when it gets more details than it's not a free consultation, but for a very basic app yeah, I've done free consultation certainly. [00:32:43] <strong>Theresa Jasko (Host): </strong>I just mean like if I don't even have any idea like I'm thinking I want an app. I could probably spend $5,000. I mean is that even like in the realm of reality? Like how do you even know what you need to put aside for that. [00:32:56] <strong>Leo Dion (Host): </strong>No, I think five thousand dollar app would be well below the budget at this point. Yeah, I mean it's possible to do a five grand app, but it's not going to have a lot of features quite frankly. I think like right now you're talking bass price for an app would be 10 grand and it goes up from there. And I think that yeah, so typically, you know, that's where you need to start thinking about like third-party services, analytics, offline, UI  and ux complexity and things like that and that's where the price kind of increases from there.[00:33:33] <strong>Theresa Jasko (Host): </strong>So other than getting like referrals from people that have worked with folks, is there other ways to kind of tell if you know who's a good developer and if they know what they're doing. [00:33:44] <strong>Leo Dion (Host): </strong>I think look at their portfolio. I think that's a great way to look at the references and then kind of get an idea - talk to them about how a typical timeline will work and you want somebody that's going to be honest with you and tell you all the different missteps that can go along the way and all different gotchas that happen in the app development process, especially with like Apple, like something that will come up is your app gets rejected for the App Store. Now, what are you going to do and you have to think about those things and you want to developer that'll be honest with you and forthright about the different issues that could come up. Like I said, portfolio references what's on the App Store? what do they have as far as on the company website?[00:34:30] What do they have that talks about this kind of stuff that's going to give you some confidence to know that they're actually doing what they're talking about. [00:34:36] <strong>Theresa Jasko (Host): </strong>So is it safe to assume there are going to be hiccups. There are going to be speed bumps and it's just kind of matter of what they are and when they're going to happen.[00:34:45] <strong>Leo Dion (Host): </strong>Yes, exactly. Yeah. [00:34:47] <strong>Theresa Jasko (Host): </strong>So if anyone tries to tell you it's just going to be smooth sailing and nothing bad's going to happen - that's a red flag. [00:34:53] <strong>Leo Dion (Host): </strong>Yeah, I would say so it's definitely a red flag and like if they haven't given you a portfolio or a list of references, like that's a red flag as well because they probably don't know what they're talking about.[00:35:04] <strong>Theresa Jasko (Host): </strong>Yeah. So what kind of things you know, besides getting a budget are there certain things that a customer should think about beforehand or prepare in order to make the most that time.[00:35:16]<strong>Leo Dion (Host): </strong>Have regular meetings with that customer talk to them. Make sure you have a copy of the app to test around on your own machine on your own iPhone so that you can look at it get it into your hands as quickly as possible so you can see it and talk about it and look at what issues come up and I think that's a big part of it. [00:35:38] <strong>Theresa Jasko (Host): </strong>I feel like what we've talked about does make it maybe seem less scary to me, you know, if this was something I was going to be investigating for myself, which I think is a big big thing. Right? I mean a lot of technology stuff I feel like because kind of based on fear you make decisions based on fear. You don't make decisions based on fear. So, you know, I think anything that makes it a little more easier to understand is good[00:36:01] <strong>Leo Dion (Host): </strong>Going to our discussion previously about continuous integration. I think it'll be interesting to see how Mac Mini is that into other development shops and how they might employ Mac minis in their environment because you know that I think is the biggest draw of getting a Mac Mini is having a continuous integration machine you can you could format and do all sorts of stuff with and break, essentially without having to worry about you know the cost of getting into enormous machine to do it. Because this is easy to run every so often interested work. [00:36:33] <strong>Theresa Jasko (Host): </strong>Yeah. Well cool. This has been super interesting. I always learn a lot from our discussions. [00:36:39] <strong>Leo Dion (Host): </strong>Yeah. Well, thank you Teresa. [00:36:41] <strong>Theresa Jasko (Host): </strong>Yeah, great. I can't wait till next time. Yep. Talk to you later.<br><br><p><strong><a rel="payment" title="★ Support this podcast on Patreon ★" href="https://www.patreon.com/empowerappsshow">★ Support this podcast on Patreon ★</a></strong></p>]]>
      </content:encoded>
      <pubDate>Tue, 08 Jan 2019 00:00:00 -0500</pubDate>
      <author>Leo Dion, Principal CEO and Swift Developer at BrightDigit </author>
      <enclosure url="https://chtbl.com/track/51E5/media.transistor.fm/00603d96.mp3" length="17656272" type="audio/mpeg"/>
      <itunes:author>Leo Dion, Principal CEO and Swift Developer at BrightDigit </itunes:author>
      <itunes:image href="https://images.transistor.fm/file/transistor/images/show/122/full_1533929410-artwork.jpg"/>
      <itunes:duration>2204</itunes:duration>
      <itunes:summary>In this episode, Leo and Theresa talk about how the process of going from a customer's idea to a proposal happens. These also include: what features to consider, how much involvement might be needed to get a proposal, budgets, timelines and more...</itunes:summary>
      <itunes:subtitle>In this episode, Leo and Theresa talk about how the process of going from a customer's idea to a proposal happens. These also include: what features to consider, how much involvement might be needed to get a proposal, budgets, timelines and more...</itunes:subtitle>
      <itunes:keywords>project estimation, budget, react native, xamarin, mac mini, writing a proposal, project timelines</itunes:keywords>
      <itunes:explicit>No</itunes:explicit>
      <googleplay:explicit>No</googleplay:explicit>
    </item>
    <item>
      <title>Apple Watch Series 4</title>
      <itunes:episode>5</itunes:episode>
      <itunes:title>Apple Watch Series 4</itunes:title>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:block>No</itunes:block>
      <googleplay:block>No</googleplay:block>
      <guid isPermaLink="false">9962bba2-774d-4c99-90b5-982c6979108c</guid>
      <link>https://share.transistor.fm/s/82709349</link>
      <description>In this episode, Leo and Theresa talk about the new Apple Watch Series 4. How useful are the new health features? What complications will be useful on the new display? How should apps be updated on the new watch? What kind of industries should think about having an app on the watch? What's the future of other smart watches?</description>
      <content:encoded>
        <![CDATA[<ul>
<li><a href="https://www.reddit.com/r/apple/comments/9fkb3t/im_an_emergency_physician_and_wanted_to_talk/">I'm an Emergency Physician and wanted to talk about Apple Watch's new ECG</a></li>
<li>
<strong>Watch Faces</strong> <a href="https://imgur.com/OKHiyYI.png">Infographic</a> and <a href="https://i.imgur.com/ZwWrrwT.png">Infographic Modular</a>
</li>
<li>
<strong>Previous Episodes</strong><ul>
<li><a href="https://www.empowerapps.show/3">Episode 3 : Low-Cost Macs - MacBook Air &amp; Mac Mini</a></li>
<li><a href="http://www.empowerapps.show/4">Episode 4 : iPhone Xs vs iPhone Xs Max vs iPhone Xr</a></li>
</ul>
</li>
<li>
<strong>Apple Developer Videos</strong><ul>
<li><a href="https://developer.apple.com/videos/play/tech-talks/802/">Designing for Apple Watch Series 4</a></li>
<li><a href="https://developer.apple.com/videos/play/tech-talks/208/">Developing Complications for Apple Watch Series 4</a></li>
<li><a href="https://developer.apple.com/videos/play/insights/112/">Using Subscriptions</a></li>
<li><a href="https://developer.apple.com/videos/play/tech-talks/803/">Designing for Subscription Success</a></li>
</ul>
</li>
</ul><p><strong><a rel="payment" title="★ Support this podcast on Patreon ★" href="https://www.patreon.com/empowerappsshow">★ Support this podcast on Patreon ★</a></strong></p>]]>
      </content:encoded>
      <pubDate>Fri, 28 Sep 2018 01:00:00 -0400</pubDate>
      <author>Leo Dion, Principal CEO and Swift Developer at BrightDigit </author>
      <enclosure url="https://chtbl.com/track/51E5/media.transistor.fm/82709349.mp3" length="13763010" type="audio/mpeg"/>
      <itunes:author>Leo Dion, Principal CEO and Swift Developer at BrightDigit </itunes:author>
      <itunes:image href="https://images.transistor.fm/file/transistor/images/show/122/full_1533929410-artwork.jpg"/>
      <itunes:duration>1703</itunes:duration>
      <itunes:summary>In this episode, Leo and Theresa talk about the new Apple Watch Series 4. How useful are the new health features? What complications will be useful on the new display? How should apps be updated on the new watch? What kind of industries should think about having an app on the watch? What's the future of other smart watches?</itunes:summary>
      <itunes:subtitle>In this episode, Leo and Theresa talk about the new Apple Watch Series 4. How useful are the new health features? What complications will be useful on the new display? How should apps be updated on the new watch? What kind of industries should think about</itunes:subtitle>
      <itunes:keywords>apple, Apple Watch Series 4, Fitbit, pebble, ECG, complications</itunes:keywords>
      <itunes:explicit>No</itunes:explicit>
      <googleplay:explicit>No</googleplay:explicit>
    </item>
    <item>
      <title>iPhone Xs vs iPhone Xs Max vs iPhone Xr</title>
      <itunes:episode>4</itunes:episode>
      <itunes:title>iPhone Xs vs iPhone Xs Max vs iPhone Xr</itunes:title>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:block>No</itunes:block>
      <googleplay:block>No</googleplay:block>
      <guid isPermaLink="false">baeaecb3-b6d3-4652-bc6b-030ec6771b8d</guid>
      <link>https://share.transistor.fm/s/b358d0a4</link>
      <description>In this episode, Leo and Theresa talk about the new iPhones for 2018: the iPhone Xs, iPhone Xs Max, and iPhone Xr. Whether it's worth getting the Xs? Is the Xs Max too big or just right? How does the Xr fit in the market? How can developers utilize these new phones? What updates should be coming to apps in machine learning, photography, and screen layout?</description>
      <content:encoded>
        <![CDATA[<ul>
<li><a href="http://www.empowerapps.show/episodes/low-cost-macs-macbook-air-mac-mini">Episode 3 - Low-Cost Macs</a></li>
<li><a href="https://brightdigit.com/blog/2018/09/20/machine-learning-business-applications-with-kevin-scott/">Interview with Kevin Scott on Machine Learning</a></li>
<li><a href="https://stratechery.com/2018/the-iphone-franchise/">Stratechery - The iPhone Franchise</a></li>
<li><a href="https://learningswift.brightdigit.com/swift-thoughts-tryswift-nyc-2018/">Swift Thoughts on try!Swift NYC 2018</a></li>
<li><a href="https://developer.apple.com/videos/play/tech-talks/207/">Building Apps for iPhone XS, iPhone XS Max, and iPhone XR</a></li>
</ul><p><strong><a rel="payment" title="★ Support this podcast on Patreon ★" href="https://www.patreon.com/empowerappsshow">★ Support this podcast on Patreon ★</a></strong></p>]]>
      </content:encoded>
      <pubDate>Wed, 26 Sep 2018 00:00:00 -0400</pubDate>
      <author>Leo Dion, Principal CEO and Swift Developer at BrightDigit </author>
      <enclosure url="https://chtbl.com/track/51E5/media.transistor.fm/b358d0a4.mp3" length="19989877" type="audio/mpeg"/>
      <itunes:author>Leo Dion, Principal CEO and Swift Developer at BrightDigit </itunes:author>
      <itunes:image href="https://images.transistor.fm/file/transistor/images/show/122/full_1533929410-artwork.jpg"/>
      <itunes:duration>2495</itunes:duration>
      <itunes:summary>In this episode, Leo and Theresa talk about the new iPhones for 2018: the iPhone Xs, iPhone Xs Max, and iPhone Xr. Whether it's worth getting the Xs? Is the Xs Max too big or just right? How does the Xr fit in the market? How can developers utilize these new phones? What updates should be coming to apps in machine learning, photography, and screen layout?</itunes:summary>
      <itunes:subtitle>In this episode, Leo and Theresa talk about the new iPhones for 2018: the iPhone Xs, iPhone Xs Max, and iPhone Xr. Whether it's worth getting the Xs? Is the Xs Max too big or just right? How does the Xr fit in the market? How can developers utilize these </itunes:subtitle>
      <itunes:keywords>apple, iPhone, iPhone Xr, iPhone Xs, iPhone Xs Max, Machine Learning, </itunes:keywords>
      <itunes:explicit>No</itunes:explicit>
      <googleplay:explicit>No</googleplay:explicit>
    </item>
    <item>
      <title>Low-Cost Macs - MacBook Air &amp; Mac Mini</title>
      <itunes:episode>3</itunes:episode>
      <itunes:title>Low-Cost Macs - MacBook Air &amp; Mac Mini</itunes:title>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:block>No</itunes:block>
      <googleplay:block>No</googleplay:block>
      <guid isPermaLink="false">8c8eaaa6-a9b0-45b6-934f-a46b0ead1d72</guid>
      <link>https://share.transistor.fm/s/4f13fa7b</link>
      <description>There are rumors this year of new Mac Minis and a budget MacBook (i.e. MacBook Air replacement). What do people use Mac Minis for? What could be the reasoning behind Apple making new models? What is the use case for a new budget MacBook? How will new budget MacBooks compete with iPads?</description>
      <content:encoded>
        <![CDATA[<ul>
<li><a href="https://itunes.apple.com/us/podcast/apple-special-event-september-2015-1080p/id509310064?i=1000352406900&amp;mt=2">Apple September Event 2015  </a></li>
<li><a href="https://daringfireball.net/2018/08/new_low-cost_laptop_to_succeed_macbook_air">Daring Fireball - Let’s Really Think About This ‘New Low-Cost Laptop to Succeed MacBook Air’ Thing</a></li>
<li>Reddit Threads<ul>
<li><a href="https://www.reddit.com/r/apple/comments/9a7opp/dear_mac_mini_owners_three_questions/">/r/Apple - Dear Mac Mini Owners... (Three Questions)</a></li>
<li><a href="https://www.reddit.com/r/MacOS/comments/9a253e/dear_mac_mini_owners_three_questions/">/r/MacOS - Dear Mac Mini Owners... (Three Questions) </a></li>
<li><a href="https://www.reddit.com/r/iOSProgramming/comments/9awl61/dear_developers_with_a_mac_mini_two_questions/">/r/iOSProgramming - Dear Developers with a Mac Mini... (Two Questions)</a></li>
<li><a href="https://www.reddit.com/r/swift/comments/9apooj/dear_developers_with_a_mac_mini_two_questions/">/r/Swift - Dear Developers with a Mac Mini... (Two Questions)</a></li>
</ul>
</li>
<li><a href="https://www.plex.tv">Plex</a></li>
<li><a href="https://buyersguide.macrumors.com">MacRumors Buyers Guide</a></li>
</ul><p><strong><a rel="payment" title="★ Support this podcast on Patreon ★" href="https://www.patreon.com/empowerappsshow">★ Support this podcast on Patreon ★</a></strong></p>]]>
      </content:encoded>
      <pubDate>Mon, 10 Sep 2018 07:00:00 -0400</pubDate>
      <author>Bright Digit, LLC</author>
      <enclosure url="https://chtbl.com/track/51E5/media.transistor.fm/4f13fa7b.mp3" length="8592505" type="audio/mpeg"/>
      <itunes:author>Bright Digit, LLC</itunes:author>
      <itunes:image href="https://images.transistor.fm/file/transistor/images/show/122/full_1533929410-artwork.jpg"/>
      <itunes:duration>922</itunes:duration>
      <itunes:summary>There are rumors this year of new Mac Minis and a budget MacBook (i.e. MacBook Air replacement). What do people use Mac Minis for? What could be the reasoning behind Apple making new models? What is the use case for a new budget MacBook? How will new budget MacBooks compete with iPads?</itunes:summary>
      <itunes:subtitle>There are rumors this year of new Mac Minis and a budget MacBook (i.e. MacBook Air replacement). What do people use Mac Minis for? What could be the reasoning behind Apple making new models? What is the use case for a new budget MacBook? How will new budg</itunes:subtitle>
      <itunes:keywords>macbook air retina, macbook air, mac mini, apple September event, </itunes:keywords>
      <itunes:explicit>No</itunes:explicit>
      <googleplay:explicit>No</googleplay:explicit>
    </item>
    <item>
      <title>September 12th Apple Event - iPhone and Apple Watch 2018</title>
      <itunes:episode>2</itunes:episode>
      <itunes:title>September 12th Apple Event - iPhone and Apple Watch 2018</itunes:title>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:block>No</itunes:block>
      <googleplay:block>No</googleplay:block>
      <guid isPermaLink="false">610aa723-1eec-42cc-a83a-f855797c9316</guid>
      <link>https://share.transistor.fm/s/c1521cf5</link>
      <description>In this episode, Leo and Theresa discuss what the Apple September event might be about based on the current rumors. 
- Why are people so interested in larger phones? 
- Is this the first Apple event with no new Home Button iPhones? 
- How does a more affordable large phone compete with Android? 
- How is Apple giving us more display and less bezel on the iPhone, iPad, and the Apple Watch? </description>
      <content:encoded>
        <![CDATA[<ul>
<li><a href="https://www.tomsguide.com/us/new-iphones-apple-event-date,news-27904.html">Tom's Guide - Apple Will Launch New iPhones at Big Sept. 12 Event</a></li>
<li><a href="https://www.imore.com/iphone-xs">iMore - iPhone Xs (2018) rumors: Release date, specs, price, and features!</a></li>
<li><a href="https://gizmodo.com/apple-s-next-smartphones-and-watch-allegedly-revealed-i-1828723924">Gizmodo - Apple’s Next Smartphones and Watch Allegedly Revealed in New Leak</a></li>
<li><a href="http://atp.fm/episodes/289">Accidental Tech Podcast #289 - How does the budget "iPhone 9" fit?</a></li>
<li><a href="https://www.youtube.com/watch?v=0sXvuUrJa0o">MKBHD - The 2019 iPhone Models!</a></li>
<li><a href="https://light.co/camera">Light L16 Camera</a></li>
<li><a href="https://www.youtube.com/watch?v=oD_3wMh5kLg">MKBHD - Top 5 Smartphone Cameras: The Blind Test! [2018]</a></li>
<li><a href="https://itunes.apple.com/us/podcast/apple-special-event-march-2015-1080p/id509310064?i=1000337281199&amp;mt=2">Original Apple Watch Event - March 2015</a></li>
</ul><p><strong><a rel="payment" title="★ Support this podcast on Patreon ★" href="https://www.patreon.com/empowerappsshow">★ Support this podcast on Patreon ★</a></strong></p>]]>
      </content:encoded>
      <pubDate>Tue, 04 Sep 2018 10:00:00 -0400</pubDate>
      <author>Bright Digit, LLC</author>
      <enclosure url="https://chtbl.com/track/51E5/media.transistor.fm/c1521cf5.mp3" length="11488999" type="audio/mpeg"/>
      <itunes:author>Bright Digit, LLC</itunes:author>
      <itunes:image href="https://images.transistor.fm/file/transistor/images/show/122/full_1533929410-artwork.jpg"/>
      <itunes:duration>1433</itunes:duration>
      <itunes:summary>In this episode, Leo and Theresa discuss what the Apple September event might be about based on the current rumors. 
- Why are people so interested in larger phones? 
- Is this the first Apple event with no new Home Button iPhones? 
- How does a more affordable large phone compete with Android? 
- How is Apple giving us more display and less bezel on the iPhone, iPad, and the Apple Watch? </itunes:summary>
      <itunes:subtitle>In this episode, Leo and Theresa discuss what the Apple September event might be about based on the current rumors. 
- Why are people so interested in larger phones? 
- Is this the first Apple event with no new Home Button iPhones? 
- How does a more a</itunes:subtitle>
      <itunes:keywords>iPhone, Apple Watch, iPad, iPhone 9, iPhone XS, iPhone XS Plus, Apple Watch Series 4, Apple September Event, Apple Event, Apple Announcement</itunes:keywords>
      <itunes:explicit>No</itunes:explicit>
      <googleplay:explicit>No</googleplay:explicit>
    </item>
    <item>
      <title>WWDC 2018 - What Does It Mean For Businesses?</title>
      <itunes:episode>1</itunes:episode>
      <itunes:title>WWDC 2018 - What Does It Mean For Businesses?</itunes:title>
      <itunes:episodeType>full</itunes:episodeType>
      <itunes:block>No</itunes:block>
      <googleplay:block>No</googleplay:block>
      <guid isPermaLink="false">02255150-c3b1-4150-9ebb-201c8e243e20</guid>
      <link>https://share.transistor.fm/s/8108defb</link>
      <description>In this episode, we talk about WWDC 2018 and what it means for the technology industry and businesses. We talk iOS 12, Mojave, and dessert.</description>
      <content:encoded>
        <![CDATA[In this episode, we talk about <strong>WWDC 2018</strong> and what it means for the technology industry and businesses. <br>It seemed like a fairly quiet conference for Apple but maybe that's a good thing. <ul>
<li>Is Apple cleaning house?</li>
<li>Will iOS 12 work on your current iPhone or iPad?</li>
<li>Why should old people in business and tech like us care about Memoji? (Hint: AR and ML)</li>
<li>When is a good time to install the new OSes?</li>
<li>What is new with the Mac App Store?</li>
<li>What are the new features in macOS Mojave?</li>
<li>How is development changing for macOS Mojave in 2019?</li>
</ul><h1>Links</h1><ul>
<li>
<a href="https://www.pokemon.com/us/">Pokemon Go</a> </li>
<li>
<a href="https://www.apple.com/newsroom/2018/06/apple-previews-ios-12/">Memoji</a> </li>
<li><a href="https://questvisual.com">WordLens</a></li>
<li><a href="https://itunes.apple.com/us/app/ikea-place/id1279244498?mt=8">Ikea Place</a></li>
</ul><br><br><p><strong><a rel="payment" title="★ Support this podcast on Patreon ★" href="https://www.patreon.com/empowerappsshow">★ Support this podcast on Patreon ★</a></strong></p>]]>
      </content:encoded>
      <pubDate>Tue, 14 Aug 2018 00:00:00 -0400</pubDate>
      <author>Leo Dion, Principal CEO and Swift Developer at BrightDigit </author>
      <enclosure url="https://chtbl.com/track/51E5/media.transistor.fm/8108defb.mp3" length="14347923" type="audio/mpeg"/>
      <itunes:author>Leo Dion, Principal CEO and Swift Developer at BrightDigit </itunes:author>
      <itunes:image href="https://images.transistor.fm/file/transistor/images/show/122/full_1533929410-artwork.jpg"/>
      <itunes:duration>1776</itunes:duration>
      <itunes:summary>In this episode, we talk about WWDC 2018 and what it means for the technology industry and businesses. We talk iOS 12, Mojave, and dessert.</itunes:summary>
      <itunes:subtitle>In this episode, we talk about WWDC 2018 and what it means for the technology industry and businesses. We talk iOS 12, Mojave, and dessert.</itunes:subtitle>
      <itunes:keywords>WWDC, wwdc 2018, macOS, apple, iPhone, iPad, Mojave, iOS 12, Memoji, Augmented Reality, AR, Machine Learning, Artificial Intelligence</itunes:keywords>
      <itunes:explicit>No</itunes:explicit>
      <googleplay:explicit>No</googleplay:explicit>
    </item>
  </channel>
</rss>
